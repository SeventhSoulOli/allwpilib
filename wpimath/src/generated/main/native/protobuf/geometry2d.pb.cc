// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geometry2d.proto

#include "geometry2d.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace wpi {
namespace proto {
PROTOBUF_CONSTEXPR ProtobufTranslation2d::ProtobufTranslation2d(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtobufTranslation2dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtobufTranslation2dDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtobufTranslation2dDefaultTypeInternal() {}
  union {
    ProtobufTranslation2d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtobufTranslation2dDefaultTypeInternal _ProtobufTranslation2d_default_instance_;
PROTOBUF_CONSTEXPR ProtobufRotation2d::ProtobufRotation2d(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtobufRotation2dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtobufRotation2dDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtobufRotation2dDefaultTypeInternal() {}
  union {
    ProtobufRotation2d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtobufRotation2dDefaultTypeInternal _ProtobufRotation2d_default_instance_;
PROTOBUF_CONSTEXPR ProtobufPose2d::ProtobufPose2d(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.translation_)*/nullptr
  , /*decltype(_impl_.rotation_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtobufPose2dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtobufPose2dDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtobufPose2dDefaultTypeInternal() {}
  union {
    ProtobufPose2d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtobufPose2dDefaultTypeInternal _ProtobufPose2d_default_instance_;
PROTOBUF_CONSTEXPR ProtobufTransform2d::ProtobufTransform2d(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.translation_)*/nullptr
  , /*decltype(_impl_.rotation_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtobufTransform2dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtobufTransform2dDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtobufTransform2dDefaultTypeInternal() {}
  union {
    ProtobufTransform2d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtobufTransform2dDefaultTypeInternal _ProtobufTransform2d_default_instance_;
PROTOBUF_CONSTEXPR ProtobufTwist2d::ProtobufTwist2d(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dx_)*/0
  , /*decltype(_impl_.dy_)*/0
  , /*decltype(_impl_.dtheta_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtobufTwist2dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtobufTwist2dDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtobufTwist2dDefaultTypeInternal() {}
  union {
    ProtobufTwist2d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtobufTwist2dDefaultTypeInternal _ProtobufTwist2d_default_instance_;
}  // namespace proto
}  // namespace wpi
static ::_pb::Metadata file_level_metadata_geometry2d_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_geometry2d_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_geometry2d_2eproto = nullptr;

const uint32_t TableStruct_geometry2d_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufTranslation2d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufTranslation2d, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufTranslation2d, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufRotation2d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufRotation2d, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufPose2d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufPose2d, _impl_.translation_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufPose2d, _impl_.rotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufTransform2d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufTransform2d, _impl_.translation_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufTransform2d, _impl_.rotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufTwist2d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufTwist2d, _impl_.dx_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufTwist2d, _impl_.dy_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufTwist2d, _impl_.dtheta_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::wpi::proto::ProtobufTranslation2d)},
  { 8, -1, -1, sizeof(::wpi::proto::ProtobufRotation2d)},
  { 15, -1, -1, sizeof(::wpi::proto::ProtobufPose2d)},
  { 23, -1, -1, sizeof(::wpi::proto::ProtobufTransform2d)},
  { 31, -1, -1, sizeof(::wpi::proto::ProtobufTwist2d)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::wpi::proto::_ProtobufTranslation2d_default_instance_._instance,
  &::wpi::proto::_ProtobufRotation2d_default_instance_._instance,
  &::wpi::proto::_ProtobufPose2d_default_instance_._instance,
  &::wpi::proto::_ProtobufTransform2d_default_instance_._instance,
  &::wpi::proto::_ProtobufTwist2d_default_instance_._instance,
};

const char descriptor_table_protodef_geometry2d_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020geometry2d.proto\022\twpi.proto\"-\n\025Protobu"
  "fTranslation2d\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\"#\n\022"
  "ProtobufRotation2d\022\r\n\005value\030\001 \001(\001\"x\n\016Pro"
  "tobufPose2d\0225\n\013translation\030\001 \001(\0132 .wpi.p"
  "roto.ProtobufTranslation2d\022/\n\010rotation\030\002"
  " \001(\0132\035.wpi.proto.ProtobufRotation2d\"}\n\023P"
  "rotobufTransform2d\0225\n\013translation\030\001 \001(\0132"
  " .wpi.proto.ProtobufTranslation2d\022/\n\010rot"
  "ation\030\002 \001(\0132\035.wpi.proto.ProtobufRotation"
  "2d\"9\n\017ProtobufTwist2d\022\n\n\002dx\030\001 \001(\001\022\n\n\002dy\030"
  "\002 \001(\001\022\016\n\006dtheta\030\003 \001(\001B\032\n\030edu.wpi.first.m"
  "ath.protob\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_geometry2d_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_geometry2d_2eproto = {
    false, false, 457, descriptor_table_protodef_geometry2d_2eproto,
    "geometry2d.proto",
    &descriptor_table_geometry2d_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_geometry2d_2eproto::offsets,
    file_level_metadata_geometry2d_2eproto, file_level_enum_descriptors_geometry2d_2eproto,
    file_level_service_descriptors_geometry2d_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_geometry2d_2eproto_getter() {
  return &descriptor_table_geometry2d_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_geometry2d_2eproto(&descriptor_table_geometry2d_2eproto);
namespace wpi {
namespace proto {

// ===================================================================

class ProtobufTranslation2d::_Internal {
 public:
};

ProtobufTranslation2d::ProtobufTranslation2d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wpi.proto.ProtobufTranslation2d)
}
ProtobufTranslation2d::ProtobufTranslation2d(const ProtobufTranslation2d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtobufTranslation2d* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:wpi.proto.ProtobufTranslation2d)
}

inline void ProtobufTranslation2d::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProtobufTranslation2d::~ProtobufTranslation2d() {
  // @@protoc_insertion_point(destructor:wpi.proto.ProtobufTranslation2d)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtobufTranslation2d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProtobufTranslation2d::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtobufTranslation2d::Clear() {
// @@protoc_insertion_point(message_clear_start:wpi.proto.ProtobufTranslation2d)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtobufTranslation2d::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtobufTranslation2d::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wpi.proto.ProtobufTranslation2d)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wpi.proto.ProtobufTranslation2d)
  return target;
}

size_t ProtobufTranslation2d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wpi.proto.ProtobufTranslation2d)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtobufTranslation2d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtobufTranslation2d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtobufTranslation2d::GetClassData() const { return &_class_data_; }


void ProtobufTranslation2d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtobufTranslation2d*>(&to_msg);
  auto& from = static_cast<const ProtobufTranslation2d&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wpi.proto.ProtobufTranslation2d)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtobufTranslation2d::CopyFrom(const ProtobufTranslation2d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wpi.proto.ProtobufTranslation2d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufTranslation2d::IsInitialized() const {
  return true;
}

void ProtobufTranslation2d::InternalSwap(ProtobufTranslation2d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtobufTranslation2d, _impl_.y_)
      + sizeof(ProtobufTranslation2d::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(ProtobufTranslation2d, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtobufTranslation2d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry2d_2eproto_getter, &descriptor_table_geometry2d_2eproto_once,
      file_level_metadata_geometry2d_2eproto[0]);
}

// ===================================================================

class ProtobufRotation2d::_Internal {
 public:
};

ProtobufRotation2d::ProtobufRotation2d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wpi.proto.ProtobufRotation2d)
}
ProtobufRotation2d::ProtobufRotation2d(const ProtobufRotation2d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtobufRotation2d* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:wpi.proto.ProtobufRotation2d)
}

inline void ProtobufRotation2d::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProtobufRotation2d::~ProtobufRotation2d() {
  // @@protoc_insertion_point(destructor:wpi.proto.ProtobufRotation2d)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtobufRotation2d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProtobufRotation2d::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtobufRotation2d::Clear() {
// @@protoc_insertion_point(message_clear_start:wpi.proto.ProtobufRotation2d)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtobufRotation2d::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtobufRotation2d::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wpi.proto.ProtobufRotation2d)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double value = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = this->_internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wpi.proto.ProtobufRotation2d)
  return target;
}

size_t ProtobufRotation2d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wpi.proto.ProtobufRotation2d)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double value = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = this->_internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtobufRotation2d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtobufRotation2d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtobufRotation2d::GetClassData() const { return &_class_data_; }


void ProtobufRotation2d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtobufRotation2d*>(&to_msg);
  auto& from = static_cast<const ProtobufRotation2d&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wpi.proto.ProtobufRotation2d)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = from._internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtobufRotation2d::CopyFrom(const ProtobufRotation2d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wpi.proto.ProtobufRotation2d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufRotation2d::IsInitialized() const {
  return true;
}

void ProtobufRotation2d::InternalSwap(ProtobufRotation2d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtobufRotation2d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry2d_2eproto_getter, &descriptor_table_geometry2d_2eproto_once,
      file_level_metadata_geometry2d_2eproto[1]);
}

// ===================================================================

class ProtobufPose2d::_Internal {
 public:
  static const ::wpi::proto::ProtobufTranslation2d& translation(const ProtobufPose2d* msg);
  static const ::wpi::proto::ProtobufRotation2d& rotation(const ProtobufPose2d* msg);
};

const ::wpi::proto::ProtobufTranslation2d&
ProtobufPose2d::_Internal::translation(const ProtobufPose2d* msg) {
  return *msg->_impl_.translation_;
}
const ::wpi::proto::ProtobufRotation2d&
ProtobufPose2d::_Internal::rotation(const ProtobufPose2d* msg) {
  return *msg->_impl_.rotation_;
}
ProtobufPose2d::ProtobufPose2d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wpi.proto.ProtobufPose2d)
}
ProtobufPose2d::ProtobufPose2d(const ProtobufPose2d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtobufPose2d* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.translation_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_translation()) {
    _this->_impl_.translation_ = new ::wpi::proto::ProtobufTranslation2d(*from._impl_.translation_);
  }
  if (from._internal_has_rotation()) {
    _this->_impl_.rotation_ = new ::wpi::proto::ProtobufRotation2d(*from._impl_.rotation_);
  }
  // @@protoc_insertion_point(copy_constructor:wpi.proto.ProtobufPose2d)
}

inline void ProtobufPose2d::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.translation_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProtobufPose2d::~ProtobufPose2d() {
  // @@protoc_insertion_point(destructor:wpi.proto.ProtobufPose2d)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtobufPose2d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.translation_;
  if (this != internal_default_instance()) delete _impl_.rotation_;
}

void ProtobufPose2d::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtobufPose2d::Clear() {
// @@protoc_insertion_point(message_clear_start:wpi.proto.ProtobufPose2d)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.translation_ != nullptr) {
    delete _impl_.translation_;
  }
  _impl_.translation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtobufPose2d::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .wpi.proto.ProtobufTranslation2d translation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_translation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .wpi.proto.ProtobufRotation2d rotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtobufPose2d::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wpi.proto.ProtobufPose2d)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .wpi.proto.ProtobufTranslation2d translation = 1;
  if (this->_internal_has_translation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::translation(this),
        _Internal::translation(this).GetCachedSize(), target, stream);
  }

  // .wpi.proto.ProtobufRotation2d rotation = 2;
  if (this->_internal_has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wpi.proto.ProtobufPose2d)
  return target;
}

size_t ProtobufPose2d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wpi.proto.ProtobufPose2d)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .wpi.proto.ProtobufTranslation2d translation = 1;
  if (this->_internal_has_translation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.translation_);
  }

  // .wpi.proto.ProtobufRotation2d rotation = 2;
  if (this->_internal_has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rotation_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtobufPose2d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtobufPose2d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtobufPose2d::GetClassData() const { return &_class_data_; }


void ProtobufPose2d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtobufPose2d*>(&to_msg);
  auto& from = static_cast<const ProtobufPose2d&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wpi.proto.ProtobufPose2d)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_translation()) {
    _this->_internal_mutable_translation()->::wpi::proto::ProtobufTranslation2d::MergeFrom(
        from._internal_translation());
  }
  if (from._internal_has_rotation()) {
    _this->_internal_mutable_rotation()->::wpi::proto::ProtobufRotation2d::MergeFrom(
        from._internal_rotation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtobufPose2d::CopyFrom(const ProtobufPose2d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wpi.proto.ProtobufPose2d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufPose2d::IsInitialized() const {
  return true;
}

void ProtobufPose2d::InternalSwap(ProtobufPose2d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtobufPose2d, _impl_.rotation_)
      + sizeof(ProtobufPose2d::_impl_.rotation_)
      - PROTOBUF_FIELD_OFFSET(ProtobufPose2d, _impl_.translation_)>(
          reinterpret_cast<char*>(&_impl_.translation_),
          reinterpret_cast<char*>(&other->_impl_.translation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtobufPose2d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry2d_2eproto_getter, &descriptor_table_geometry2d_2eproto_once,
      file_level_metadata_geometry2d_2eproto[2]);
}

// ===================================================================

class ProtobufTransform2d::_Internal {
 public:
  static const ::wpi::proto::ProtobufTranslation2d& translation(const ProtobufTransform2d* msg);
  static const ::wpi::proto::ProtobufRotation2d& rotation(const ProtobufTransform2d* msg);
};

const ::wpi::proto::ProtobufTranslation2d&
ProtobufTransform2d::_Internal::translation(const ProtobufTransform2d* msg) {
  return *msg->_impl_.translation_;
}
const ::wpi::proto::ProtobufRotation2d&
ProtobufTransform2d::_Internal::rotation(const ProtobufTransform2d* msg) {
  return *msg->_impl_.rotation_;
}
ProtobufTransform2d::ProtobufTransform2d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wpi.proto.ProtobufTransform2d)
}
ProtobufTransform2d::ProtobufTransform2d(const ProtobufTransform2d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtobufTransform2d* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.translation_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_translation()) {
    _this->_impl_.translation_ = new ::wpi::proto::ProtobufTranslation2d(*from._impl_.translation_);
  }
  if (from._internal_has_rotation()) {
    _this->_impl_.rotation_ = new ::wpi::proto::ProtobufRotation2d(*from._impl_.rotation_);
  }
  // @@protoc_insertion_point(copy_constructor:wpi.proto.ProtobufTransform2d)
}

inline void ProtobufTransform2d::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.translation_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProtobufTransform2d::~ProtobufTransform2d() {
  // @@protoc_insertion_point(destructor:wpi.proto.ProtobufTransform2d)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtobufTransform2d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.translation_;
  if (this != internal_default_instance()) delete _impl_.rotation_;
}

void ProtobufTransform2d::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtobufTransform2d::Clear() {
// @@protoc_insertion_point(message_clear_start:wpi.proto.ProtobufTransform2d)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.translation_ != nullptr) {
    delete _impl_.translation_;
  }
  _impl_.translation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtobufTransform2d::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .wpi.proto.ProtobufTranslation2d translation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_translation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .wpi.proto.ProtobufRotation2d rotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtobufTransform2d::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wpi.proto.ProtobufTransform2d)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .wpi.proto.ProtobufTranslation2d translation = 1;
  if (this->_internal_has_translation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::translation(this),
        _Internal::translation(this).GetCachedSize(), target, stream);
  }

  // .wpi.proto.ProtobufRotation2d rotation = 2;
  if (this->_internal_has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wpi.proto.ProtobufTransform2d)
  return target;
}

size_t ProtobufTransform2d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wpi.proto.ProtobufTransform2d)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .wpi.proto.ProtobufTranslation2d translation = 1;
  if (this->_internal_has_translation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.translation_);
  }

  // .wpi.proto.ProtobufRotation2d rotation = 2;
  if (this->_internal_has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rotation_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtobufTransform2d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtobufTransform2d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtobufTransform2d::GetClassData() const { return &_class_data_; }


void ProtobufTransform2d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtobufTransform2d*>(&to_msg);
  auto& from = static_cast<const ProtobufTransform2d&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wpi.proto.ProtobufTransform2d)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_translation()) {
    _this->_internal_mutable_translation()->::wpi::proto::ProtobufTranslation2d::MergeFrom(
        from._internal_translation());
  }
  if (from._internal_has_rotation()) {
    _this->_internal_mutable_rotation()->::wpi::proto::ProtobufRotation2d::MergeFrom(
        from._internal_rotation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtobufTransform2d::CopyFrom(const ProtobufTransform2d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wpi.proto.ProtobufTransform2d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufTransform2d::IsInitialized() const {
  return true;
}

void ProtobufTransform2d::InternalSwap(ProtobufTransform2d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtobufTransform2d, _impl_.rotation_)
      + sizeof(ProtobufTransform2d::_impl_.rotation_)
      - PROTOBUF_FIELD_OFFSET(ProtobufTransform2d, _impl_.translation_)>(
          reinterpret_cast<char*>(&_impl_.translation_),
          reinterpret_cast<char*>(&other->_impl_.translation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtobufTransform2d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry2d_2eproto_getter, &descriptor_table_geometry2d_2eproto_once,
      file_level_metadata_geometry2d_2eproto[3]);
}

// ===================================================================

class ProtobufTwist2d::_Internal {
 public:
};

ProtobufTwist2d::ProtobufTwist2d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wpi.proto.ProtobufTwist2d)
}
ProtobufTwist2d::ProtobufTwist2d(const ProtobufTwist2d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtobufTwist2d* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dx_){}
    , decltype(_impl_.dy_){}
    , decltype(_impl_.dtheta_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.dx_, &from._impl_.dx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dtheta_) -
    reinterpret_cast<char*>(&_impl_.dx_)) + sizeof(_impl_.dtheta_));
  // @@protoc_insertion_point(copy_constructor:wpi.proto.ProtobufTwist2d)
}

inline void ProtobufTwist2d::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dx_){0}
    , decltype(_impl_.dy_){0}
    , decltype(_impl_.dtheta_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProtobufTwist2d::~ProtobufTwist2d() {
  // @@protoc_insertion_point(destructor:wpi.proto.ProtobufTwist2d)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtobufTwist2d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProtobufTwist2d::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtobufTwist2d::Clear() {
// @@protoc_insertion_point(message_clear_start:wpi.proto.ProtobufTwist2d)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.dx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dtheta_) -
      reinterpret_cast<char*>(&_impl_.dx_)) + sizeof(_impl_.dtheta_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtobufTwist2d::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double dx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.dx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double dy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.dy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double dtheta = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.dtheta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtobufTwist2d::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wpi.proto.ProtobufTwist2d)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double dx = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dx = this->_internal_dx();
  uint64_t raw_dx;
  memcpy(&raw_dx, &tmp_dx, sizeof(tmp_dx));
  if (raw_dx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_dx(), target);
  }

  // double dy = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dy = this->_internal_dy();
  uint64_t raw_dy;
  memcpy(&raw_dy, &tmp_dy, sizeof(tmp_dy));
  if (raw_dy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_dy(), target);
  }

  // double dtheta = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dtheta = this->_internal_dtheta();
  uint64_t raw_dtheta;
  memcpy(&raw_dtheta, &tmp_dtheta, sizeof(tmp_dtheta));
  if (raw_dtheta != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_dtheta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wpi.proto.ProtobufTwist2d)
  return target;
}

size_t ProtobufTwist2d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wpi.proto.ProtobufTwist2d)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double dx = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dx = this->_internal_dx();
  uint64_t raw_dx;
  memcpy(&raw_dx, &tmp_dx, sizeof(tmp_dx));
  if (raw_dx != 0) {
    total_size += 1 + 8;
  }

  // double dy = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dy = this->_internal_dy();
  uint64_t raw_dy;
  memcpy(&raw_dy, &tmp_dy, sizeof(tmp_dy));
  if (raw_dy != 0) {
    total_size += 1 + 8;
  }

  // double dtheta = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dtheta = this->_internal_dtheta();
  uint64_t raw_dtheta;
  memcpy(&raw_dtheta, &tmp_dtheta, sizeof(tmp_dtheta));
  if (raw_dtheta != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtobufTwist2d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtobufTwist2d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtobufTwist2d::GetClassData() const { return &_class_data_; }


void ProtobufTwist2d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtobufTwist2d*>(&to_msg);
  auto& from = static_cast<const ProtobufTwist2d&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wpi.proto.ProtobufTwist2d)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dx = from._internal_dx();
  uint64_t raw_dx;
  memcpy(&raw_dx, &tmp_dx, sizeof(tmp_dx));
  if (raw_dx != 0) {
    _this->_internal_set_dx(from._internal_dx());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dy = from._internal_dy();
  uint64_t raw_dy;
  memcpy(&raw_dy, &tmp_dy, sizeof(tmp_dy));
  if (raw_dy != 0) {
    _this->_internal_set_dy(from._internal_dy());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dtheta = from._internal_dtheta();
  uint64_t raw_dtheta;
  memcpy(&raw_dtheta, &tmp_dtheta, sizeof(tmp_dtheta));
  if (raw_dtheta != 0) {
    _this->_internal_set_dtheta(from._internal_dtheta());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtobufTwist2d::CopyFrom(const ProtobufTwist2d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wpi.proto.ProtobufTwist2d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufTwist2d::IsInitialized() const {
  return true;
}

void ProtobufTwist2d::InternalSwap(ProtobufTwist2d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtobufTwist2d, _impl_.dtheta_)
      + sizeof(ProtobufTwist2d::_impl_.dtheta_)
      - PROTOBUF_FIELD_OFFSET(ProtobufTwist2d, _impl_.dx_)>(
          reinterpret_cast<char*>(&_impl_.dx_),
          reinterpret_cast<char*>(&other->_impl_.dx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtobufTwist2d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry2d_2eproto_getter, &descriptor_table_geometry2d_2eproto_once,
      file_level_metadata_geometry2d_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace wpi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::wpi::proto::ProtobufTranslation2d*
Arena::CreateMaybeMessage< ::wpi::proto::ProtobufTranslation2d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wpi::proto::ProtobufTranslation2d >(arena);
}
template<> PROTOBUF_NOINLINE ::wpi::proto::ProtobufRotation2d*
Arena::CreateMaybeMessage< ::wpi::proto::ProtobufRotation2d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wpi::proto::ProtobufRotation2d >(arena);
}
template<> PROTOBUF_NOINLINE ::wpi::proto::ProtobufPose2d*
Arena::CreateMaybeMessage< ::wpi::proto::ProtobufPose2d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wpi::proto::ProtobufPose2d >(arena);
}
template<> PROTOBUF_NOINLINE ::wpi::proto::ProtobufTransform2d*
Arena::CreateMaybeMessage< ::wpi::proto::ProtobufTransform2d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wpi::proto::ProtobufTransform2d >(arena);
}
template<> PROTOBUF_NOINLINE ::wpi::proto::ProtobufTwist2d*
Arena::CreateMaybeMessage< ::wpi::proto::ProtobufTwist2d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wpi::proto::ProtobufTwist2d >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

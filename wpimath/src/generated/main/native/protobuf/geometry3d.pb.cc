// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geometry3d.proto

#include "geometry3d.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace wpi {
namespace proto {
PROTOBUF_CONSTEXPR ProtobufTranslation3d::ProtobufTranslation3d(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtobufTranslation3dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtobufTranslation3dDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtobufTranslation3dDefaultTypeInternal() {}
  union {
    ProtobufTranslation3d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtobufTranslation3dDefaultTypeInternal _ProtobufTranslation3d_default_instance_;
PROTOBUF_CONSTEXPR ProtobufQuaternion::ProtobufQuaternion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.w_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtobufQuaternionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtobufQuaternionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtobufQuaternionDefaultTypeInternal() {}
  union {
    ProtobufQuaternion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtobufQuaternionDefaultTypeInternal _ProtobufQuaternion_default_instance_;
PROTOBUF_CONSTEXPR ProtobufRotation3d::ProtobufRotation3d(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.q_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtobufRotation3dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtobufRotation3dDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtobufRotation3dDefaultTypeInternal() {}
  union {
    ProtobufRotation3d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtobufRotation3dDefaultTypeInternal _ProtobufRotation3d_default_instance_;
PROTOBUF_CONSTEXPR ProtobufPose3d::ProtobufPose3d(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.translation_)*/nullptr
  , /*decltype(_impl_.rotation_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtobufPose3dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtobufPose3dDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtobufPose3dDefaultTypeInternal() {}
  union {
    ProtobufPose3d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtobufPose3dDefaultTypeInternal _ProtobufPose3d_default_instance_;
PROTOBUF_CONSTEXPR ProtobufTransform3d::ProtobufTransform3d(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.translation_)*/nullptr
  , /*decltype(_impl_.rotation_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtobufTransform3dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtobufTransform3dDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtobufTransform3dDefaultTypeInternal() {}
  union {
    ProtobufTransform3d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtobufTransform3dDefaultTypeInternal _ProtobufTransform3d_default_instance_;
PROTOBUF_CONSTEXPR ProtobufTwist3d::ProtobufTwist3d(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dx_)*/0
  , /*decltype(_impl_.dy_)*/0
  , /*decltype(_impl_.dz_)*/0
  , /*decltype(_impl_.rx_)*/0
  , /*decltype(_impl_.ry_)*/0
  , /*decltype(_impl_.rz_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtobufTwist3dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtobufTwist3dDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtobufTwist3dDefaultTypeInternal() {}
  union {
    ProtobufTwist3d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtobufTwist3dDefaultTypeInternal _ProtobufTwist3d_default_instance_;
}  // namespace proto
}  // namespace wpi
static ::_pb::Metadata file_level_metadata_geometry3d_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_geometry3d_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_geometry3d_2eproto = nullptr;

const uint32_t TableStruct_geometry3d_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufTranslation3d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufTranslation3d, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufTranslation3d, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufTranslation3d, _impl_.z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufQuaternion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufQuaternion, _impl_.w_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufQuaternion, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufQuaternion, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufQuaternion, _impl_.z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufRotation3d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufRotation3d, _impl_.q_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufPose3d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufPose3d, _impl_.translation_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufPose3d, _impl_.rotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufTransform3d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufTransform3d, _impl_.translation_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufTransform3d, _impl_.rotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufTwist3d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufTwist3d, _impl_.dx_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufTwist3d, _impl_.dy_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufTwist3d, _impl_.dz_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufTwist3d, _impl_.rx_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufTwist3d, _impl_.ry_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufTwist3d, _impl_.rz_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::wpi::proto::ProtobufTranslation3d)},
  { 9, -1, -1, sizeof(::wpi::proto::ProtobufQuaternion)},
  { 19, -1, -1, sizeof(::wpi::proto::ProtobufRotation3d)},
  { 26, -1, -1, sizeof(::wpi::proto::ProtobufPose3d)},
  { 34, -1, -1, sizeof(::wpi::proto::ProtobufTransform3d)},
  { 42, -1, -1, sizeof(::wpi::proto::ProtobufTwist3d)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::wpi::proto::_ProtobufTranslation3d_default_instance_._instance,
  &::wpi::proto::_ProtobufQuaternion_default_instance_._instance,
  &::wpi::proto::_ProtobufRotation3d_default_instance_._instance,
  &::wpi::proto::_ProtobufPose3d_default_instance_._instance,
  &::wpi::proto::_ProtobufTransform3d_default_instance_._instance,
  &::wpi::proto::_ProtobufTwist3d_default_instance_._instance,
};

const char descriptor_table_protodef_geometry3d_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020geometry3d.proto\022\twpi.proto\"8\n\025Protobu"
  "fTranslation3d\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001"
  "z\030\003 \001(\001\"@\n\022ProtobufQuaternion\022\t\n\001w\030\001 \001(\001"
  "\022\t\n\001x\030\002 \001(\001\022\t\n\001y\030\003 \001(\001\022\t\n\001z\030\004 \001(\001\">\n\022Pro"
  "tobufRotation3d\022(\n\001q\030\001 \001(\0132\035.wpi.proto.P"
  "rotobufQuaternion\"x\n\016ProtobufPose3d\0225\n\013t"
  "ranslation\030\001 \001(\0132 .wpi.proto.ProtobufTra"
  "nslation3d\022/\n\010rotation\030\002 \001(\0132\035.wpi.proto"
  ".ProtobufRotation3d\"}\n\023ProtobufTransform"
  "3d\0225\n\013translation\030\001 \001(\0132 .wpi.proto.Prot"
  "obufTranslation3d\022/\n\010rotation\030\002 \001(\0132\035.wp"
  "i.proto.ProtobufRotation3d\"Y\n\017ProtobufTw"
  "ist3d\022\n\n\002dx\030\001 \001(\001\022\n\n\002dy\030\002 \001(\001\022\n\n\002dz\030\003 \001("
  "\001\022\n\n\002rx\030\004 \001(\001\022\n\n\002ry\030\005 \001(\001\022\n\n\002rz\030\006 \001(\001B\032\n"
  "\030edu.wpi.first.math.protob\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_geometry3d_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_geometry3d_2eproto = {
    false, false, 593, descriptor_table_protodef_geometry3d_2eproto,
    "geometry3d.proto",
    &descriptor_table_geometry3d_2eproto_once, nullptr, 0, 6,
    schemas, file_default_instances, TableStruct_geometry3d_2eproto::offsets,
    file_level_metadata_geometry3d_2eproto, file_level_enum_descriptors_geometry3d_2eproto,
    file_level_service_descriptors_geometry3d_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_geometry3d_2eproto_getter() {
  return &descriptor_table_geometry3d_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_geometry3d_2eproto(&descriptor_table_geometry3d_2eproto);
namespace wpi {
namespace proto {

// ===================================================================

class ProtobufTranslation3d::_Internal {
 public:
};

ProtobufTranslation3d::ProtobufTranslation3d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wpi.proto.ProtobufTranslation3d)
}
ProtobufTranslation3d::ProtobufTranslation3d(const ProtobufTranslation3d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtobufTranslation3d* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:wpi.proto.ProtobufTranslation3d)
}

inline void ProtobufTranslation3d::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProtobufTranslation3d::~ProtobufTranslation3d() {
  // @@protoc_insertion_point(destructor:wpi.proto.ProtobufTranslation3d)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtobufTranslation3d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProtobufTranslation3d::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtobufTranslation3d::Clear() {
// @@protoc_insertion_point(message_clear_start:wpi.proto.ProtobufTranslation3d)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtobufTranslation3d::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtobufTranslation3d::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wpi.proto.ProtobufTranslation3d)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wpi.proto.ProtobufTranslation3d)
  return target;
}

size_t ProtobufTranslation3d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wpi.proto.ProtobufTranslation3d)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  // double z = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtobufTranslation3d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtobufTranslation3d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtobufTranslation3d::GetClassData() const { return &_class_data_; }


void ProtobufTranslation3d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtobufTranslation3d*>(&to_msg);
  auto& from = static_cast<const ProtobufTranslation3d&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wpi.proto.ProtobufTranslation3d)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = from._internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtobufTranslation3d::CopyFrom(const ProtobufTranslation3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wpi.proto.ProtobufTranslation3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufTranslation3d::IsInitialized() const {
  return true;
}

void ProtobufTranslation3d::InternalSwap(ProtobufTranslation3d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtobufTranslation3d, _impl_.z_)
      + sizeof(ProtobufTranslation3d::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(ProtobufTranslation3d, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtobufTranslation3d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry3d_2eproto_getter, &descriptor_table_geometry3d_2eproto_once,
      file_level_metadata_geometry3d_2eproto[0]);
}

// ===================================================================

class ProtobufQuaternion::_Internal {
 public:
};

ProtobufQuaternion::ProtobufQuaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wpi.proto.ProtobufQuaternion)
}
ProtobufQuaternion::ProtobufQuaternion(const ProtobufQuaternion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtobufQuaternion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.w_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.w_, &from._impl_.w_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.w_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:wpi.proto.ProtobufQuaternion)
}

inline void ProtobufQuaternion::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.w_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProtobufQuaternion::~ProtobufQuaternion() {
  // @@protoc_insertion_point(destructor:wpi.proto.ProtobufQuaternion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtobufQuaternion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProtobufQuaternion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtobufQuaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:wpi.proto.ProtobufQuaternion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.w_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtobufQuaternion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double w = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtobufQuaternion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wpi.proto.ProtobufQuaternion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double w = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_w = this->_internal_w();
  uint64_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_w(), target);
  }

  // double x = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_x(), target);
  }

  // double y = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_y(), target);
  }

  // double z = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wpi.proto.ProtobufQuaternion)
  return target;
}

size_t ProtobufQuaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wpi.proto.ProtobufQuaternion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double w = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_w = this->_internal_w();
  uint64_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    total_size += 1 + 8;
  }

  // double x = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  // double z = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtobufQuaternion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtobufQuaternion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtobufQuaternion::GetClassData() const { return &_class_data_; }


void ProtobufQuaternion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtobufQuaternion*>(&to_msg);
  auto& from = static_cast<const ProtobufQuaternion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wpi.proto.ProtobufQuaternion)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_w = from._internal_w();
  uint64_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    _this->_internal_set_w(from._internal_w());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = from._internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtobufQuaternion::CopyFrom(const ProtobufQuaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wpi.proto.ProtobufQuaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufQuaternion::IsInitialized() const {
  return true;
}

void ProtobufQuaternion::InternalSwap(ProtobufQuaternion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtobufQuaternion, _impl_.z_)
      + sizeof(ProtobufQuaternion::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(ProtobufQuaternion, _impl_.w_)>(
          reinterpret_cast<char*>(&_impl_.w_),
          reinterpret_cast<char*>(&other->_impl_.w_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtobufQuaternion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry3d_2eproto_getter, &descriptor_table_geometry3d_2eproto_once,
      file_level_metadata_geometry3d_2eproto[1]);
}

// ===================================================================

class ProtobufRotation3d::_Internal {
 public:
  static const ::wpi::proto::ProtobufQuaternion& q(const ProtobufRotation3d* msg);
};

const ::wpi::proto::ProtobufQuaternion&
ProtobufRotation3d::_Internal::q(const ProtobufRotation3d* msg) {
  return *msg->_impl_.q_;
}
ProtobufRotation3d::ProtobufRotation3d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wpi.proto.ProtobufRotation3d)
}
ProtobufRotation3d::ProtobufRotation3d(const ProtobufRotation3d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtobufRotation3d* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.q_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_q()) {
    _this->_impl_.q_ = new ::wpi::proto::ProtobufQuaternion(*from._impl_.q_);
  }
  // @@protoc_insertion_point(copy_constructor:wpi.proto.ProtobufRotation3d)
}

inline void ProtobufRotation3d::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.q_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProtobufRotation3d::~ProtobufRotation3d() {
  // @@protoc_insertion_point(destructor:wpi.proto.ProtobufRotation3d)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtobufRotation3d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.q_;
}

void ProtobufRotation3d::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtobufRotation3d::Clear() {
// @@protoc_insertion_point(message_clear_start:wpi.proto.ProtobufRotation3d)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.q_ != nullptr) {
    delete _impl_.q_;
  }
  _impl_.q_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtobufRotation3d::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .wpi.proto.ProtobufQuaternion q = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_q(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtobufRotation3d::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wpi.proto.ProtobufRotation3d)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .wpi.proto.ProtobufQuaternion q = 1;
  if (this->_internal_has_q()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::q(this),
        _Internal::q(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wpi.proto.ProtobufRotation3d)
  return target;
}

size_t ProtobufRotation3d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wpi.proto.ProtobufRotation3d)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .wpi.proto.ProtobufQuaternion q = 1;
  if (this->_internal_has_q()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.q_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtobufRotation3d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtobufRotation3d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtobufRotation3d::GetClassData() const { return &_class_data_; }


void ProtobufRotation3d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtobufRotation3d*>(&to_msg);
  auto& from = static_cast<const ProtobufRotation3d&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wpi.proto.ProtobufRotation3d)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_q()) {
    _this->_internal_mutable_q()->::wpi::proto::ProtobufQuaternion::MergeFrom(
        from._internal_q());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtobufRotation3d::CopyFrom(const ProtobufRotation3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wpi.proto.ProtobufRotation3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufRotation3d::IsInitialized() const {
  return true;
}

void ProtobufRotation3d::InternalSwap(ProtobufRotation3d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.q_, other->_impl_.q_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtobufRotation3d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry3d_2eproto_getter, &descriptor_table_geometry3d_2eproto_once,
      file_level_metadata_geometry3d_2eproto[2]);
}

// ===================================================================

class ProtobufPose3d::_Internal {
 public:
  static const ::wpi::proto::ProtobufTranslation3d& translation(const ProtobufPose3d* msg);
  static const ::wpi::proto::ProtobufRotation3d& rotation(const ProtobufPose3d* msg);
};

const ::wpi::proto::ProtobufTranslation3d&
ProtobufPose3d::_Internal::translation(const ProtobufPose3d* msg) {
  return *msg->_impl_.translation_;
}
const ::wpi::proto::ProtobufRotation3d&
ProtobufPose3d::_Internal::rotation(const ProtobufPose3d* msg) {
  return *msg->_impl_.rotation_;
}
ProtobufPose3d::ProtobufPose3d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wpi.proto.ProtobufPose3d)
}
ProtobufPose3d::ProtobufPose3d(const ProtobufPose3d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtobufPose3d* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.translation_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_translation()) {
    _this->_impl_.translation_ = new ::wpi::proto::ProtobufTranslation3d(*from._impl_.translation_);
  }
  if (from._internal_has_rotation()) {
    _this->_impl_.rotation_ = new ::wpi::proto::ProtobufRotation3d(*from._impl_.rotation_);
  }
  // @@protoc_insertion_point(copy_constructor:wpi.proto.ProtobufPose3d)
}

inline void ProtobufPose3d::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.translation_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProtobufPose3d::~ProtobufPose3d() {
  // @@protoc_insertion_point(destructor:wpi.proto.ProtobufPose3d)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtobufPose3d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.translation_;
  if (this != internal_default_instance()) delete _impl_.rotation_;
}

void ProtobufPose3d::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtobufPose3d::Clear() {
// @@protoc_insertion_point(message_clear_start:wpi.proto.ProtobufPose3d)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.translation_ != nullptr) {
    delete _impl_.translation_;
  }
  _impl_.translation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtobufPose3d::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .wpi.proto.ProtobufTranslation3d translation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_translation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .wpi.proto.ProtobufRotation3d rotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtobufPose3d::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wpi.proto.ProtobufPose3d)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .wpi.proto.ProtobufTranslation3d translation = 1;
  if (this->_internal_has_translation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::translation(this),
        _Internal::translation(this).GetCachedSize(), target, stream);
  }

  // .wpi.proto.ProtobufRotation3d rotation = 2;
  if (this->_internal_has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wpi.proto.ProtobufPose3d)
  return target;
}

size_t ProtobufPose3d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wpi.proto.ProtobufPose3d)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .wpi.proto.ProtobufTranslation3d translation = 1;
  if (this->_internal_has_translation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.translation_);
  }

  // .wpi.proto.ProtobufRotation3d rotation = 2;
  if (this->_internal_has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rotation_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtobufPose3d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtobufPose3d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtobufPose3d::GetClassData() const { return &_class_data_; }


void ProtobufPose3d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtobufPose3d*>(&to_msg);
  auto& from = static_cast<const ProtobufPose3d&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wpi.proto.ProtobufPose3d)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_translation()) {
    _this->_internal_mutable_translation()->::wpi::proto::ProtobufTranslation3d::MergeFrom(
        from._internal_translation());
  }
  if (from._internal_has_rotation()) {
    _this->_internal_mutable_rotation()->::wpi::proto::ProtobufRotation3d::MergeFrom(
        from._internal_rotation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtobufPose3d::CopyFrom(const ProtobufPose3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wpi.proto.ProtobufPose3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufPose3d::IsInitialized() const {
  return true;
}

void ProtobufPose3d::InternalSwap(ProtobufPose3d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtobufPose3d, _impl_.rotation_)
      + sizeof(ProtobufPose3d::_impl_.rotation_)
      - PROTOBUF_FIELD_OFFSET(ProtobufPose3d, _impl_.translation_)>(
          reinterpret_cast<char*>(&_impl_.translation_),
          reinterpret_cast<char*>(&other->_impl_.translation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtobufPose3d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry3d_2eproto_getter, &descriptor_table_geometry3d_2eproto_once,
      file_level_metadata_geometry3d_2eproto[3]);
}

// ===================================================================

class ProtobufTransform3d::_Internal {
 public:
  static const ::wpi::proto::ProtobufTranslation3d& translation(const ProtobufTransform3d* msg);
  static const ::wpi::proto::ProtobufRotation3d& rotation(const ProtobufTransform3d* msg);
};

const ::wpi::proto::ProtobufTranslation3d&
ProtobufTransform3d::_Internal::translation(const ProtobufTransform3d* msg) {
  return *msg->_impl_.translation_;
}
const ::wpi::proto::ProtobufRotation3d&
ProtobufTransform3d::_Internal::rotation(const ProtobufTransform3d* msg) {
  return *msg->_impl_.rotation_;
}
ProtobufTransform3d::ProtobufTransform3d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wpi.proto.ProtobufTransform3d)
}
ProtobufTransform3d::ProtobufTransform3d(const ProtobufTransform3d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtobufTransform3d* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.translation_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_translation()) {
    _this->_impl_.translation_ = new ::wpi::proto::ProtobufTranslation3d(*from._impl_.translation_);
  }
  if (from._internal_has_rotation()) {
    _this->_impl_.rotation_ = new ::wpi::proto::ProtobufRotation3d(*from._impl_.rotation_);
  }
  // @@protoc_insertion_point(copy_constructor:wpi.proto.ProtobufTransform3d)
}

inline void ProtobufTransform3d::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.translation_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProtobufTransform3d::~ProtobufTransform3d() {
  // @@protoc_insertion_point(destructor:wpi.proto.ProtobufTransform3d)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtobufTransform3d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.translation_;
  if (this != internal_default_instance()) delete _impl_.rotation_;
}

void ProtobufTransform3d::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtobufTransform3d::Clear() {
// @@protoc_insertion_point(message_clear_start:wpi.proto.ProtobufTransform3d)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.translation_ != nullptr) {
    delete _impl_.translation_;
  }
  _impl_.translation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtobufTransform3d::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .wpi.proto.ProtobufTranslation3d translation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_translation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .wpi.proto.ProtobufRotation3d rotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtobufTransform3d::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wpi.proto.ProtobufTransform3d)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .wpi.proto.ProtobufTranslation3d translation = 1;
  if (this->_internal_has_translation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::translation(this),
        _Internal::translation(this).GetCachedSize(), target, stream);
  }

  // .wpi.proto.ProtobufRotation3d rotation = 2;
  if (this->_internal_has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wpi.proto.ProtobufTransform3d)
  return target;
}

size_t ProtobufTransform3d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wpi.proto.ProtobufTransform3d)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .wpi.proto.ProtobufTranslation3d translation = 1;
  if (this->_internal_has_translation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.translation_);
  }

  // .wpi.proto.ProtobufRotation3d rotation = 2;
  if (this->_internal_has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rotation_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtobufTransform3d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtobufTransform3d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtobufTransform3d::GetClassData() const { return &_class_data_; }


void ProtobufTransform3d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtobufTransform3d*>(&to_msg);
  auto& from = static_cast<const ProtobufTransform3d&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wpi.proto.ProtobufTransform3d)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_translation()) {
    _this->_internal_mutable_translation()->::wpi::proto::ProtobufTranslation3d::MergeFrom(
        from._internal_translation());
  }
  if (from._internal_has_rotation()) {
    _this->_internal_mutable_rotation()->::wpi::proto::ProtobufRotation3d::MergeFrom(
        from._internal_rotation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtobufTransform3d::CopyFrom(const ProtobufTransform3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wpi.proto.ProtobufTransform3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufTransform3d::IsInitialized() const {
  return true;
}

void ProtobufTransform3d::InternalSwap(ProtobufTransform3d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtobufTransform3d, _impl_.rotation_)
      + sizeof(ProtobufTransform3d::_impl_.rotation_)
      - PROTOBUF_FIELD_OFFSET(ProtobufTransform3d, _impl_.translation_)>(
          reinterpret_cast<char*>(&_impl_.translation_),
          reinterpret_cast<char*>(&other->_impl_.translation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtobufTransform3d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry3d_2eproto_getter, &descriptor_table_geometry3d_2eproto_once,
      file_level_metadata_geometry3d_2eproto[4]);
}

// ===================================================================

class ProtobufTwist3d::_Internal {
 public:
};

ProtobufTwist3d::ProtobufTwist3d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wpi.proto.ProtobufTwist3d)
}
ProtobufTwist3d::ProtobufTwist3d(const ProtobufTwist3d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtobufTwist3d* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dx_){}
    , decltype(_impl_.dy_){}
    , decltype(_impl_.dz_){}
    , decltype(_impl_.rx_){}
    , decltype(_impl_.ry_){}
    , decltype(_impl_.rz_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.dx_, &from._impl_.dx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rz_) -
    reinterpret_cast<char*>(&_impl_.dx_)) + sizeof(_impl_.rz_));
  // @@protoc_insertion_point(copy_constructor:wpi.proto.ProtobufTwist3d)
}

inline void ProtobufTwist3d::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dx_){0}
    , decltype(_impl_.dy_){0}
    , decltype(_impl_.dz_){0}
    , decltype(_impl_.rx_){0}
    , decltype(_impl_.ry_){0}
    , decltype(_impl_.rz_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProtobufTwist3d::~ProtobufTwist3d() {
  // @@protoc_insertion_point(destructor:wpi.proto.ProtobufTwist3d)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtobufTwist3d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProtobufTwist3d::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtobufTwist3d::Clear() {
// @@protoc_insertion_point(message_clear_start:wpi.proto.ProtobufTwist3d)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.dx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rz_) -
      reinterpret_cast<char*>(&_impl_.dx_)) + sizeof(_impl_.rz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtobufTwist3d::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double dx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.dx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double dy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.dy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double dz = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.dz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double rx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.rx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ry = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.ry_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double rz = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.rz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtobufTwist3d::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wpi.proto.ProtobufTwist3d)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double dx = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dx = this->_internal_dx();
  uint64_t raw_dx;
  memcpy(&raw_dx, &tmp_dx, sizeof(tmp_dx));
  if (raw_dx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_dx(), target);
  }

  // double dy = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dy = this->_internal_dy();
  uint64_t raw_dy;
  memcpy(&raw_dy, &tmp_dy, sizeof(tmp_dy));
  if (raw_dy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_dy(), target);
  }

  // double dz = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dz = this->_internal_dz();
  uint64_t raw_dz;
  memcpy(&raw_dz, &tmp_dz, sizeof(tmp_dz));
  if (raw_dz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_dz(), target);
  }

  // double rx = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rx = this->_internal_rx();
  uint64_t raw_rx;
  memcpy(&raw_rx, &tmp_rx, sizeof(tmp_rx));
  if (raw_rx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_rx(), target);
  }

  // double ry = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ry = this->_internal_ry();
  uint64_t raw_ry;
  memcpy(&raw_ry, &tmp_ry, sizeof(tmp_ry));
  if (raw_ry != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_ry(), target);
  }

  // double rz = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rz = this->_internal_rz();
  uint64_t raw_rz;
  memcpy(&raw_rz, &tmp_rz, sizeof(tmp_rz));
  if (raw_rz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_rz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wpi.proto.ProtobufTwist3d)
  return target;
}

size_t ProtobufTwist3d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wpi.proto.ProtobufTwist3d)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double dx = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dx = this->_internal_dx();
  uint64_t raw_dx;
  memcpy(&raw_dx, &tmp_dx, sizeof(tmp_dx));
  if (raw_dx != 0) {
    total_size += 1 + 8;
  }

  // double dy = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dy = this->_internal_dy();
  uint64_t raw_dy;
  memcpy(&raw_dy, &tmp_dy, sizeof(tmp_dy));
  if (raw_dy != 0) {
    total_size += 1 + 8;
  }

  // double dz = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dz = this->_internal_dz();
  uint64_t raw_dz;
  memcpy(&raw_dz, &tmp_dz, sizeof(tmp_dz));
  if (raw_dz != 0) {
    total_size += 1 + 8;
  }

  // double rx = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rx = this->_internal_rx();
  uint64_t raw_rx;
  memcpy(&raw_rx, &tmp_rx, sizeof(tmp_rx));
  if (raw_rx != 0) {
    total_size += 1 + 8;
  }

  // double ry = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ry = this->_internal_ry();
  uint64_t raw_ry;
  memcpy(&raw_ry, &tmp_ry, sizeof(tmp_ry));
  if (raw_ry != 0) {
    total_size += 1 + 8;
  }

  // double rz = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rz = this->_internal_rz();
  uint64_t raw_rz;
  memcpy(&raw_rz, &tmp_rz, sizeof(tmp_rz));
  if (raw_rz != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtobufTwist3d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtobufTwist3d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtobufTwist3d::GetClassData() const { return &_class_data_; }


void ProtobufTwist3d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtobufTwist3d*>(&to_msg);
  auto& from = static_cast<const ProtobufTwist3d&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wpi.proto.ProtobufTwist3d)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dx = from._internal_dx();
  uint64_t raw_dx;
  memcpy(&raw_dx, &tmp_dx, sizeof(tmp_dx));
  if (raw_dx != 0) {
    _this->_internal_set_dx(from._internal_dx());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dy = from._internal_dy();
  uint64_t raw_dy;
  memcpy(&raw_dy, &tmp_dy, sizeof(tmp_dy));
  if (raw_dy != 0) {
    _this->_internal_set_dy(from._internal_dy());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dz = from._internal_dz();
  uint64_t raw_dz;
  memcpy(&raw_dz, &tmp_dz, sizeof(tmp_dz));
  if (raw_dz != 0) {
    _this->_internal_set_dz(from._internal_dz());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rx = from._internal_rx();
  uint64_t raw_rx;
  memcpy(&raw_rx, &tmp_rx, sizeof(tmp_rx));
  if (raw_rx != 0) {
    _this->_internal_set_rx(from._internal_rx());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ry = from._internal_ry();
  uint64_t raw_ry;
  memcpy(&raw_ry, &tmp_ry, sizeof(tmp_ry));
  if (raw_ry != 0) {
    _this->_internal_set_ry(from._internal_ry());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rz = from._internal_rz();
  uint64_t raw_rz;
  memcpy(&raw_rz, &tmp_rz, sizeof(tmp_rz));
  if (raw_rz != 0) {
    _this->_internal_set_rz(from._internal_rz());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtobufTwist3d::CopyFrom(const ProtobufTwist3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wpi.proto.ProtobufTwist3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufTwist3d::IsInitialized() const {
  return true;
}

void ProtobufTwist3d::InternalSwap(ProtobufTwist3d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtobufTwist3d, _impl_.rz_)
      + sizeof(ProtobufTwist3d::_impl_.rz_)
      - PROTOBUF_FIELD_OFFSET(ProtobufTwist3d, _impl_.dx_)>(
          reinterpret_cast<char*>(&_impl_.dx_),
          reinterpret_cast<char*>(&other->_impl_.dx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtobufTwist3d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_geometry3d_2eproto_getter, &descriptor_table_geometry3d_2eproto_once,
      file_level_metadata_geometry3d_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace wpi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::wpi::proto::ProtobufTranslation3d*
Arena::CreateMaybeMessage< ::wpi::proto::ProtobufTranslation3d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wpi::proto::ProtobufTranslation3d >(arena);
}
template<> PROTOBUF_NOINLINE ::wpi::proto::ProtobufQuaternion*
Arena::CreateMaybeMessage< ::wpi::proto::ProtobufQuaternion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wpi::proto::ProtobufQuaternion >(arena);
}
template<> PROTOBUF_NOINLINE ::wpi::proto::ProtobufRotation3d*
Arena::CreateMaybeMessage< ::wpi::proto::ProtobufRotation3d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wpi::proto::ProtobufRotation3d >(arena);
}
template<> PROTOBUF_NOINLINE ::wpi::proto::ProtobufPose3d*
Arena::CreateMaybeMessage< ::wpi::proto::ProtobufPose3d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wpi::proto::ProtobufPose3d >(arena);
}
template<> PROTOBUF_NOINLINE ::wpi::proto::ProtobufTransform3d*
Arena::CreateMaybeMessage< ::wpi::proto::ProtobufTransform3d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wpi::proto::ProtobufTransform3d >(arena);
}
template<> PROTOBUF_NOINLINE ::wpi::proto::ProtobufTwist3d*
Arena::CreateMaybeMessage< ::wpi::proto::ProtobufTwist3d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wpi::proto::ProtobufTwist3d >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controller.proto

#include "controller.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace wpi {
namespace proto {
PROTOBUF_CONSTEXPR ProtobufArmFeedforward::ProtobufArmFeedforward(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ks_)*/0
  , /*decltype(_impl_.kg_)*/0
  , /*decltype(_impl_.kv_)*/0
  , /*decltype(_impl_.ka_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtobufArmFeedforwardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtobufArmFeedforwardDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtobufArmFeedforwardDefaultTypeInternal() {}
  union {
    ProtobufArmFeedforward _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtobufArmFeedforwardDefaultTypeInternal _ProtobufArmFeedforward_default_instance_;
PROTOBUF_CONSTEXPR ProtobufDifferentialDriveFeedforward::ProtobufDifferentialDriveFeedforward(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.kv_linear_)*/0
  , /*decltype(_impl_.ka_linear_)*/0
  , /*decltype(_impl_.kv_angular_)*/0
  , /*decltype(_impl_.ka_angular_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtobufDifferentialDriveFeedforwardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtobufDifferentialDriveFeedforwardDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtobufDifferentialDriveFeedforwardDefaultTypeInternal() {}
  union {
    ProtobufDifferentialDriveFeedforward _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtobufDifferentialDriveFeedforwardDefaultTypeInternal _ProtobufDifferentialDriveFeedforward_default_instance_;
PROTOBUF_CONSTEXPR ProtobufElevatorFeedforward::ProtobufElevatorFeedforward(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ks_)*/0
  , /*decltype(_impl_.kg_)*/0
  , /*decltype(_impl_.kv_)*/0
  , /*decltype(_impl_.ka_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtobufElevatorFeedforwardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtobufElevatorFeedforwardDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtobufElevatorFeedforwardDefaultTypeInternal() {}
  union {
    ProtobufElevatorFeedforward _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtobufElevatorFeedforwardDefaultTypeInternal _ProtobufElevatorFeedforward_default_instance_;
PROTOBUF_CONSTEXPR ProtobufSimpleMotorFeedforward::ProtobufSimpleMotorFeedforward(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ks_)*/0
  , /*decltype(_impl_.kv_)*/0
  , /*decltype(_impl_.ka_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtobufSimpleMotorFeedforwardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtobufSimpleMotorFeedforwardDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtobufSimpleMotorFeedforwardDefaultTypeInternal() {}
  union {
    ProtobufSimpleMotorFeedforward _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtobufSimpleMotorFeedforwardDefaultTypeInternal _ProtobufSimpleMotorFeedforward_default_instance_;
PROTOBUF_CONSTEXPR ProtobufDifferentialDriveWheelVoltages::ProtobufDifferentialDriveWheelVoltages(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.left_)*/0
  , /*decltype(_impl_.right_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtobufDifferentialDriveWheelVoltagesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtobufDifferentialDriveWheelVoltagesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtobufDifferentialDriveWheelVoltagesDefaultTypeInternal() {}
  union {
    ProtobufDifferentialDriveWheelVoltages _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtobufDifferentialDriveWheelVoltagesDefaultTypeInternal _ProtobufDifferentialDriveWheelVoltages_default_instance_;
}  // namespace proto
}  // namespace wpi
static ::_pb::Metadata file_level_metadata_controller_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_controller_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_controller_2eproto = nullptr;

const uint32_t TableStruct_controller_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufArmFeedforward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufArmFeedforward, _impl_.ks_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufArmFeedforward, _impl_.kg_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufArmFeedforward, _impl_.kv_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufArmFeedforward, _impl_.ka_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufDifferentialDriveFeedforward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufDifferentialDriveFeedforward, _impl_.kv_linear_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufDifferentialDriveFeedforward, _impl_.ka_linear_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufDifferentialDriveFeedforward, _impl_.kv_angular_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufDifferentialDriveFeedforward, _impl_.ka_angular_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufElevatorFeedforward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufElevatorFeedforward, _impl_.ks_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufElevatorFeedforward, _impl_.kg_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufElevatorFeedforward, _impl_.kv_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufElevatorFeedforward, _impl_.ka_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufSimpleMotorFeedforward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufSimpleMotorFeedforward, _impl_.ks_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufSimpleMotorFeedforward, _impl_.kv_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufSimpleMotorFeedforward, _impl_.ka_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufDifferentialDriveWheelVoltages, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufDifferentialDriveWheelVoltages, _impl_.left_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufDifferentialDriveWheelVoltages, _impl_.right_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::wpi::proto::ProtobufArmFeedforward)},
  { 10, -1, -1, sizeof(::wpi::proto::ProtobufDifferentialDriveFeedforward)},
  { 20, -1, -1, sizeof(::wpi::proto::ProtobufElevatorFeedforward)},
  { 30, -1, -1, sizeof(::wpi::proto::ProtobufSimpleMotorFeedforward)},
  { 39, -1, -1, sizeof(::wpi::proto::ProtobufDifferentialDriveWheelVoltages)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::wpi::proto::_ProtobufArmFeedforward_default_instance_._instance,
  &::wpi::proto::_ProtobufDifferentialDriveFeedforward_default_instance_._instance,
  &::wpi::proto::_ProtobufElevatorFeedforward_default_instance_._instance,
  &::wpi::proto::_ProtobufSimpleMotorFeedforward_default_instance_._instance,
  &::wpi::proto::_ProtobufDifferentialDriveWheelVoltages_default_instance_._instance,
};

const char descriptor_table_protodef_controller_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020controller.proto\022\twpi.proto\"H\n\026Protobu"
  "fArmFeedforward\022\n\n\002ks\030\001 \001(\001\022\n\n\002kg\030\002 \001(\001\022"
  "\n\n\002kv\030\003 \001(\001\022\n\n\002ka\030\004 \001(\001\"t\n$ProtobufDiffe"
  "rentialDriveFeedforward\022\021\n\tkv_linear\030\001 \001"
  "(\001\022\021\n\tka_linear\030\002 \001(\001\022\022\n\nkv_angular\030\003 \001("
  "\001\022\022\n\nka_angular\030\004 \001(\001\"M\n\033ProtobufElevato"
  "rFeedforward\022\n\n\002ks\030\001 \001(\001\022\n\n\002kg\030\002 \001(\001\022\n\n\002"
  "kv\030\003 \001(\001\022\n\n\002ka\030\004 \001(\001\"D\n\036ProtobufSimpleMo"
  "torFeedforward\022\n\n\002ks\030\001 \001(\001\022\n\n\002kv\030\002 \001(\001\022\n"
  "\n\002ka\030\003 \001(\001\"E\n&ProtobufDifferentialDriveW"
  "heelVoltages\022\014\n\004left\030\001 \001(\001\022\r\n\005right\030\002 \001("
  "\001B\032\n\030edu.wpi.first.math.protob\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_controller_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_controller_2eproto = {
    false, false, 477, descriptor_table_protodef_controller_2eproto,
    "controller.proto",
    &descriptor_table_controller_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_controller_2eproto::offsets,
    file_level_metadata_controller_2eproto, file_level_enum_descriptors_controller_2eproto,
    file_level_service_descriptors_controller_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_controller_2eproto_getter() {
  return &descriptor_table_controller_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_controller_2eproto(&descriptor_table_controller_2eproto);
namespace wpi {
namespace proto {

// ===================================================================

class ProtobufArmFeedforward::_Internal {
 public:
};

ProtobufArmFeedforward::ProtobufArmFeedforward(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wpi.proto.ProtobufArmFeedforward)
}
ProtobufArmFeedforward::ProtobufArmFeedforward(const ProtobufArmFeedforward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtobufArmFeedforward* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ks_){}
    , decltype(_impl_.kg_){}
    , decltype(_impl_.kv_){}
    , decltype(_impl_.ka_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ks_, &from._impl_.ks_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ka_) -
    reinterpret_cast<char*>(&_impl_.ks_)) + sizeof(_impl_.ka_));
  // @@protoc_insertion_point(copy_constructor:wpi.proto.ProtobufArmFeedforward)
}

inline void ProtobufArmFeedforward::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ks_){0}
    , decltype(_impl_.kg_){0}
    , decltype(_impl_.kv_){0}
    , decltype(_impl_.ka_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProtobufArmFeedforward::~ProtobufArmFeedforward() {
  // @@protoc_insertion_point(destructor:wpi.proto.ProtobufArmFeedforward)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtobufArmFeedforward::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProtobufArmFeedforward::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtobufArmFeedforward::Clear() {
// @@protoc_insertion_point(message_clear_start:wpi.proto.ProtobufArmFeedforward)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.ks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ka_) -
      reinterpret_cast<char*>(&_impl_.ks_)) + sizeof(_impl_.ka_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtobufArmFeedforward::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double ks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.ks_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double kg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.kg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double kv = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.kv_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ka = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.ka_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtobufArmFeedforward::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wpi.proto.ProtobufArmFeedforward)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double ks = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ks = this->_internal_ks();
  uint64_t raw_ks;
  memcpy(&raw_ks, &tmp_ks, sizeof(tmp_ks));
  if (raw_ks != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_ks(), target);
  }

  // double kg = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_kg = this->_internal_kg();
  uint64_t raw_kg;
  memcpy(&raw_kg, &tmp_kg, sizeof(tmp_kg));
  if (raw_kg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_kg(), target);
  }

  // double kv = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_kv = this->_internal_kv();
  uint64_t raw_kv;
  memcpy(&raw_kv, &tmp_kv, sizeof(tmp_kv));
  if (raw_kv != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_kv(), target);
  }

  // double ka = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ka = this->_internal_ka();
  uint64_t raw_ka;
  memcpy(&raw_ka, &tmp_ka, sizeof(tmp_ka));
  if (raw_ka != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_ka(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wpi.proto.ProtobufArmFeedforward)
  return target;
}

size_t ProtobufArmFeedforward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wpi.proto.ProtobufArmFeedforward)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double ks = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ks = this->_internal_ks();
  uint64_t raw_ks;
  memcpy(&raw_ks, &tmp_ks, sizeof(tmp_ks));
  if (raw_ks != 0) {
    total_size += 1 + 8;
  }

  // double kg = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_kg = this->_internal_kg();
  uint64_t raw_kg;
  memcpy(&raw_kg, &tmp_kg, sizeof(tmp_kg));
  if (raw_kg != 0) {
    total_size += 1 + 8;
  }

  // double kv = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_kv = this->_internal_kv();
  uint64_t raw_kv;
  memcpy(&raw_kv, &tmp_kv, sizeof(tmp_kv));
  if (raw_kv != 0) {
    total_size += 1 + 8;
  }

  // double ka = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ka = this->_internal_ka();
  uint64_t raw_ka;
  memcpy(&raw_ka, &tmp_ka, sizeof(tmp_ka));
  if (raw_ka != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtobufArmFeedforward::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtobufArmFeedforward::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtobufArmFeedforward::GetClassData() const { return &_class_data_; }


void ProtobufArmFeedforward::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtobufArmFeedforward*>(&to_msg);
  auto& from = static_cast<const ProtobufArmFeedforward&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wpi.proto.ProtobufArmFeedforward)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ks = from._internal_ks();
  uint64_t raw_ks;
  memcpy(&raw_ks, &tmp_ks, sizeof(tmp_ks));
  if (raw_ks != 0) {
    _this->_internal_set_ks(from._internal_ks());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_kg = from._internal_kg();
  uint64_t raw_kg;
  memcpy(&raw_kg, &tmp_kg, sizeof(tmp_kg));
  if (raw_kg != 0) {
    _this->_internal_set_kg(from._internal_kg());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_kv = from._internal_kv();
  uint64_t raw_kv;
  memcpy(&raw_kv, &tmp_kv, sizeof(tmp_kv));
  if (raw_kv != 0) {
    _this->_internal_set_kv(from._internal_kv());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ka = from._internal_ka();
  uint64_t raw_ka;
  memcpy(&raw_ka, &tmp_ka, sizeof(tmp_ka));
  if (raw_ka != 0) {
    _this->_internal_set_ka(from._internal_ka());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtobufArmFeedforward::CopyFrom(const ProtobufArmFeedforward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wpi.proto.ProtobufArmFeedforward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufArmFeedforward::IsInitialized() const {
  return true;
}

void ProtobufArmFeedforward::InternalSwap(ProtobufArmFeedforward* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtobufArmFeedforward, _impl_.ka_)
      + sizeof(ProtobufArmFeedforward::_impl_.ka_)
      - PROTOBUF_FIELD_OFFSET(ProtobufArmFeedforward, _impl_.ks_)>(
          reinterpret_cast<char*>(&_impl_.ks_),
          reinterpret_cast<char*>(&other->_impl_.ks_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtobufArmFeedforward::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_controller_2eproto_getter, &descriptor_table_controller_2eproto_once,
      file_level_metadata_controller_2eproto[0]);
}

// ===================================================================

class ProtobufDifferentialDriveFeedforward::_Internal {
 public:
};

ProtobufDifferentialDriveFeedforward::ProtobufDifferentialDriveFeedforward(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wpi.proto.ProtobufDifferentialDriveFeedforward)
}
ProtobufDifferentialDriveFeedforward::ProtobufDifferentialDriveFeedforward(const ProtobufDifferentialDriveFeedforward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtobufDifferentialDriveFeedforward* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.kv_linear_){}
    , decltype(_impl_.ka_linear_){}
    , decltype(_impl_.kv_angular_){}
    , decltype(_impl_.ka_angular_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.kv_linear_, &from._impl_.kv_linear_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ka_angular_) -
    reinterpret_cast<char*>(&_impl_.kv_linear_)) + sizeof(_impl_.ka_angular_));
  // @@protoc_insertion_point(copy_constructor:wpi.proto.ProtobufDifferentialDriveFeedforward)
}

inline void ProtobufDifferentialDriveFeedforward::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.kv_linear_){0}
    , decltype(_impl_.ka_linear_){0}
    , decltype(_impl_.kv_angular_){0}
    , decltype(_impl_.ka_angular_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProtobufDifferentialDriveFeedforward::~ProtobufDifferentialDriveFeedforward() {
  // @@protoc_insertion_point(destructor:wpi.proto.ProtobufDifferentialDriveFeedforward)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtobufDifferentialDriveFeedforward::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProtobufDifferentialDriveFeedforward::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtobufDifferentialDriveFeedforward::Clear() {
// @@protoc_insertion_point(message_clear_start:wpi.proto.ProtobufDifferentialDriveFeedforward)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.kv_linear_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ka_angular_) -
      reinterpret_cast<char*>(&_impl_.kv_linear_)) + sizeof(_impl_.ka_angular_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtobufDifferentialDriveFeedforward::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double kv_linear = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.kv_linear_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ka_linear = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.ka_linear_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double kv_angular = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.kv_angular_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ka_angular = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.ka_angular_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtobufDifferentialDriveFeedforward::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wpi.proto.ProtobufDifferentialDriveFeedforward)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double kv_linear = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_kv_linear = this->_internal_kv_linear();
  uint64_t raw_kv_linear;
  memcpy(&raw_kv_linear, &tmp_kv_linear, sizeof(tmp_kv_linear));
  if (raw_kv_linear != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_kv_linear(), target);
  }

  // double ka_linear = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ka_linear = this->_internal_ka_linear();
  uint64_t raw_ka_linear;
  memcpy(&raw_ka_linear, &tmp_ka_linear, sizeof(tmp_ka_linear));
  if (raw_ka_linear != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_ka_linear(), target);
  }

  // double kv_angular = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_kv_angular = this->_internal_kv_angular();
  uint64_t raw_kv_angular;
  memcpy(&raw_kv_angular, &tmp_kv_angular, sizeof(tmp_kv_angular));
  if (raw_kv_angular != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_kv_angular(), target);
  }

  // double ka_angular = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ka_angular = this->_internal_ka_angular();
  uint64_t raw_ka_angular;
  memcpy(&raw_ka_angular, &tmp_ka_angular, sizeof(tmp_ka_angular));
  if (raw_ka_angular != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_ka_angular(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wpi.proto.ProtobufDifferentialDriveFeedforward)
  return target;
}

size_t ProtobufDifferentialDriveFeedforward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wpi.proto.ProtobufDifferentialDriveFeedforward)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double kv_linear = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_kv_linear = this->_internal_kv_linear();
  uint64_t raw_kv_linear;
  memcpy(&raw_kv_linear, &tmp_kv_linear, sizeof(tmp_kv_linear));
  if (raw_kv_linear != 0) {
    total_size += 1 + 8;
  }

  // double ka_linear = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ka_linear = this->_internal_ka_linear();
  uint64_t raw_ka_linear;
  memcpy(&raw_ka_linear, &tmp_ka_linear, sizeof(tmp_ka_linear));
  if (raw_ka_linear != 0) {
    total_size += 1 + 8;
  }

  // double kv_angular = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_kv_angular = this->_internal_kv_angular();
  uint64_t raw_kv_angular;
  memcpy(&raw_kv_angular, &tmp_kv_angular, sizeof(tmp_kv_angular));
  if (raw_kv_angular != 0) {
    total_size += 1 + 8;
  }

  // double ka_angular = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ka_angular = this->_internal_ka_angular();
  uint64_t raw_ka_angular;
  memcpy(&raw_ka_angular, &tmp_ka_angular, sizeof(tmp_ka_angular));
  if (raw_ka_angular != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtobufDifferentialDriveFeedforward::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtobufDifferentialDriveFeedforward::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtobufDifferentialDriveFeedforward::GetClassData() const { return &_class_data_; }


void ProtobufDifferentialDriveFeedforward::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtobufDifferentialDriveFeedforward*>(&to_msg);
  auto& from = static_cast<const ProtobufDifferentialDriveFeedforward&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wpi.proto.ProtobufDifferentialDriveFeedforward)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_kv_linear = from._internal_kv_linear();
  uint64_t raw_kv_linear;
  memcpy(&raw_kv_linear, &tmp_kv_linear, sizeof(tmp_kv_linear));
  if (raw_kv_linear != 0) {
    _this->_internal_set_kv_linear(from._internal_kv_linear());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ka_linear = from._internal_ka_linear();
  uint64_t raw_ka_linear;
  memcpy(&raw_ka_linear, &tmp_ka_linear, sizeof(tmp_ka_linear));
  if (raw_ka_linear != 0) {
    _this->_internal_set_ka_linear(from._internal_ka_linear());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_kv_angular = from._internal_kv_angular();
  uint64_t raw_kv_angular;
  memcpy(&raw_kv_angular, &tmp_kv_angular, sizeof(tmp_kv_angular));
  if (raw_kv_angular != 0) {
    _this->_internal_set_kv_angular(from._internal_kv_angular());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ka_angular = from._internal_ka_angular();
  uint64_t raw_ka_angular;
  memcpy(&raw_ka_angular, &tmp_ka_angular, sizeof(tmp_ka_angular));
  if (raw_ka_angular != 0) {
    _this->_internal_set_ka_angular(from._internal_ka_angular());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtobufDifferentialDriveFeedforward::CopyFrom(const ProtobufDifferentialDriveFeedforward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wpi.proto.ProtobufDifferentialDriveFeedforward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufDifferentialDriveFeedforward::IsInitialized() const {
  return true;
}

void ProtobufDifferentialDriveFeedforward::InternalSwap(ProtobufDifferentialDriveFeedforward* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtobufDifferentialDriveFeedforward, _impl_.ka_angular_)
      + sizeof(ProtobufDifferentialDriveFeedforward::_impl_.ka_angular_)
      - PROTOBUF_FIELD_OFFSET(ProtobufDifferentialDriveFeedforward, _impl_.kv_linear_)>(
          reinterpret_cast<char*>(&_impl_.kv_linear_),
          reinterpret_cast<char*>(&other->_impl_.kv_linear_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtobufDifferentialDriveFeedforward::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_controller_2eproto_getter, &descriptor_table_controller_2eproto_once,
      file_level_metadata_controller_2eproto[1]);
}

// ===================================================================

class ProtobufElevatorFeedforward::_Internal {
 public:
};

ProtobufElevatorFeedforward::ProtobufElevatorFeedforward(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wpi.proto.ProtobufElevatorFeedforward)
}
ProtobufElevatorFeedforward::ProtobufElevatorFeedforward(const ProtobufElevatorFeedforward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtobufElevatorFeedforward* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ks_){}
    , decltype(_impl_.kg_){}
    , decltype(_impl_.kv_){}
    , decltype(_impl_.ka_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ks_, &from._impl_.ks_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ka_) -
    reinterpret_cast<char*>(&_impl_.ks_)) + sizeof(_impl_.ka_));
  // @@protoc_insertion_point(copy_constructor:wpi.proto.ProtobufElevatorFeedforward)
}

inline void ProtobufElevatorFeedforward::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ks_){0}
    , decltype(_impl_.kg_){0}
    , decltype(_impl_.kv_){0}
    , decltype(_impl_.ka_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProtobufElevatorFeedforward::~ProtobufElevatorFeedforward() {
  // @@protoc_insertion_point(destructor:wpi.proto.ProtobufElevatorFeedforward)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtobufElevatorFeedforward::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProtobufElevatorFeedforward::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtobufElevatorFeedforward::Clear() {
// @@protoc_insertion_point(message_clear_start:wpi.proto.ProtobufElevatorFeedforward)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.ks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ka_) -
      reinterpret_cast<char*>(&_impl_.ks_)) + sizeof(_impl_.ka_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtobufElevatorFeedforward::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double ks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.ks_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double kg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.kg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double kv = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.kv_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ka = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.ka_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtobufElevatorFeedforward::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wpi.proto.ProtobufElevatorFeedforward)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double ks = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ks = this->_internal_ks();
  uint64_t raw_ks;
  memcpy(&raw_ks, &tmp_ks, sizeof(tmp_ks));
  if (raw_ks != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_ks(), target);
  }

  // double kg = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_kg = this->_internal_kg();
  uint64_t raw_kg;
  memcpy(&raw_kg, &tmp_kg, sizeof(tmp_kg));
  if (raw_kg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_kg(), target);
  }

  // double kv = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_kv = this->_internal_kv();
  uint64_t raw_kv;
  memcpy(&raw_kv, &tmp_kv, sizeof(tmp_kv));
  if (raw_kv != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_kv(), target);
  }

  // double ka = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ka = this->_internal_ka();
  uint64_t raw_ka;
  memcpy(&raw_ka, &tmp_ka, sizeof(tmp_ka));
  if (raw_ka != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_ka(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wpi.proto.ProtobufElevatorFeedforward)
  return target;
}

size_t ProtobufElevatorFeedforward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wpi.proto.ProtobufElevatorFeedforward)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double ks = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ks = this->_internal_ks();
  uint64_t raw_ks;
  memcpy(&raw_ks, &tmp_ks, sizeof(tmp_ks));
  if (raw_ks != 0) {
    total_size += 1 + 8;
  }

  // double kg = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_kg = this->_internal_kg();
  uint64_t raw_kg;
  memcpy(&raw_kg, &tmp_kg, sizeof(tmp_kg));
  if (raw_kg != 0) {
    total_size += 1 + 8;
  }

  // double kv = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_kv = this->_internal_kv();
  uint64_t raw_kv;
  memcpy(&raw_kv, &tmp_kv, sizeof(tmp_kv));
  if (raw_kv != 0) {
    total_size += 1 + 8;
  }

  // double ka = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ka = this->_internal_ka();
  uint64_t raw_ka;
  memcpy(&raw_ka, &tmp_ka, sizeof(tmp_ka));
  if (raw_ka != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtobufElevatorFeedforward::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtobufElevatorFeedforward::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtobufElevatorFeedforward::GetClassData() const { return &_class_data_; }


void ProtobufElevatorFeedforward::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtobufElevatorFeedforward*>(&to_msg);
  auto& from = static_cast<const ProtobufElevatorFeedforward&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wpi.proto.ProtobufElevatorFeedforward)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ks = from._internal_ks();
  uint64_t raw_ks;
  memcpy(&raw_ks, &tmp_ks, sizeof(tmp_ks));
  if (raw_ks != 0) {
    _this->_internal_set_ks(from._internal_ks());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_kg = from._internal_kg();
  uint64_t raw_kg;
  memcpy(&raw_kg, &tmp_kg, sizeof(tmp_kg));
  if (raw_kg != 0) {
    _this->_internal_set_kg(from._internal_kg());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_kv = from._internal_kv();
  uint64_t raw_kv;
  memcpy(&raw_kv, &tmp_kv, sizeof(tmp_kv));
  if (raw_kv != 0) {
    _this->_internal_set_kv(from._internal_kv());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ka = from._internal_ka();
  uint64_t raw_ka;
  memcpy(&raw_ka, &tmp_ka, sizeof(tmp_ka));
  if (raw_ka != 0) {
    _this->_internal_set_ka(from._internal_ka());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtobufElevatorFeedforward::CopyFrom(const ProtobufElevatorFeedforward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wpi.proto.ProtobufElevatorFeedforward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufElevatorFeedforward::IsInitialized() const {
  return true;
}

void ProtobufElevatorFeedforward::InternalSwap(ProtobufElevatorFeedforward* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtobufElevatorFeedforward, _impl_.ka_)
      + sizeof(ProtobufElevatorFeedforward::_impl_.ka_)
      - PROTOBUF_FIELD_OFFSET(ProtobufElevatorFeedforward, _impl_.ks_)>(
          reinterpret_cast<char*>(&_impl_.ks_),
          reinterpret_cast<char*>(&other->_impl_.ks_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtobufElevatorFeedforward::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_controller_2eproto_getter, &descriptor_table_controller_2eproto_once,
      file_level_metadata_controller_2eproto[2]);
}

// ===================================================================

class ProtobufSimpleMotorFeedforward::_Internal {
 public:
};

ProtobufSimpleMotorFeedforward::ProtobufSimpleMotorFeedforward(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wpi.proto.ProtobufSimpleMotorFeedforward)
}
ProtobufSimpleMotorFeedforward::ProtobufSimpleMotorFeedforward(const ProtobufSimpleMotorFeedforward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtobufSimpleMotorFeedforward* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ks_){}
    , decltype(_impl_.kv_){}
    , decltype(_impl_.ka_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ks_, &from._impl_.ks_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ka_) -
    reinterpret_cast<char*>(&_impl_.ks_)) + sizeof(_impl_.ka_));
  // @@protoc_insertion_point(copy_constructor:wpi.proto.ProtobufSimpleMotorFeedforward)
}

inline void ProtobufSimpleMotorFeedforward::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ks_){0}
    , decltype(_impl_.kv_){0}
    , decltype(_impl_.ka_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProtobufSimpleMotorFeedforward::~ProtobufSimpleMotorFeedforward() {
  // @@protoc_insertion_point(destructor:wpi.proto.ProtobufSimpleMotorFeedforward)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtobufSimpleMotorFeedforward::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProtobufSimpleMotorFeedforward::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtobufSimpleMotorFeedforward::Clear() {
// @@protoc_insertion_point(message_clear_start:wpi.proto.ProtobufSimpleMotorFeedforward)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.ks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ka_) -
      reinterpret_cast<char*>(&_impl_.ks_)) + sizeof(_impl_.ka_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtobufSimpleMotorFeedforward::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double ks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.ks_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double kv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.kv_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ka = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.ka_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtobufSimpleMotorFeedforward::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wpi.proto.ProtobufSimpleMotorFeedforward)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double ks = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ks = this->_internal_ks();
  uint64_t raw_ks;
  memcpy(&raw_ks, &tmp_ks, sizeof(tmp_ks));
  if (raw_ks != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_ks(), target);
  }

  // double kv = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_kv = this->_internal_kv();
  uint64_t raw_kv;
  memcpy(&raw_kv, &tmp_kv, sizeof(tmp_kv));
  if (raw_kv != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_kv(), target);
  }

  // double ka = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ka = this->_internal_ka();
  uint64_t raw_ka;
  memcpy(&raw_ka, &tmp_ka, sizeof(tmp_ka));
  if (raw_ka != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_ka(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wpi.proto.ProtobufSimpleMotorFeedforward)
  return target;
}

size_t ProtobufSimpleMotorFeedforward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wpi.proto.ProtobufSimpleMotorFeedforward)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double ks = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ks = this->_internal_ks();
  uint64_t raw_ks;
  memcpy(&raw_ks, &tmp_ks, sizeof(tmp_ks));
  if (raw_ks != 0) {
    total_size += 1 + 8;
  }

  // double kv = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_kv = this->_internal_kv();
  uint64_t raw_kv;
  memcpy(&raw_kv, &tmp_kv, sizeof(tmp_kv));
  if (raw_kv != 0) {
    total_size += 1 + 8;
  }

  // double ka = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ka = this->_internal_ka();
  uint64_t raw_ka;
  memcpy(&raw_ka, &tmp_ka, sizeof(tmp_ka));
  if (raw_ka != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtobufSimpleMotorFeedforward::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtobufSimpleMotorFeedforward::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtobufSimpleMotorFeedforward::GetClassData() const { return &_class_data_; }


void ProtobufSimpleMotorFeedforward::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtobufSimpleMotorFeedforward*>(&to_msg);
  auto& from = static_cast<const ProtobufSimpleMotorFeedforward&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wpi.proto.ProtobufSimpleMotorFeedforward)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ks = from._internal_ks();
  uint64_t raw_ks;
  memcpy(&raw_ks, &tmp_ks, sizeof(tmp_ks));
  if (raw_ks != 0) {
    _this->_internal_set_ks(from._internal_ks());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_kv = from._internal_kv();
  uint64_t raw_kv;
  memcpy(&raw_kv, &tmp_kv, sizeof(tmp_kv));
  if (raw_kv != 0) {
    _this->_internal_set_kv(from._internal_kv());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ka = from._internal_ka();
  uint64_t raw_ka;
  memcpy(&raw_ka, &tmp_ka, sizeof(tmp_ka));
  if (raw_ka != 0) {
    _this->_internal_set_ka(from._internal_ka());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtobufSimpleMotorFeedforward::CopyFrom(const ProtobufSimpleMotorFeedforward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wpi.proto.ProtobufSimpleMotorFeedforward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufSimpleMotorFeedforward::IsInitialized() const {
  return true;
}

void ProtobufSimpleMotorFeedforward::InternalSwap(ProtobufSimpleMotorFeedforward* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtobufSimpleMotorFeedforward, _impl_.ka_)
      + sizeof(ProtobufSimpleMotorFeedforward::_impl_.ka_)
      - PROTOBUF_FIELD_OFFSET(ProtobufSimpleMotorFeedforward, _impl_.ks_)>(
          reinterpret_cast<char*>(&_impl_.ks_),
          reinterpret_cast<char*>(&other->_impl_.ks_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtobufSimpleMotorFeedforward::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_controller_2eproto_getter, &descriptor_table_controller_2eproto_once,
      file_level_metadata_controller_2eproto[3]);
}

// ===================================================================

class ProtobufDifferentialDriveWheelVoltages::_Internal {
 public:
};

ProtobufDifferentialDriveWheelVoltages::ProtobufDifferentialDriveWheelVoltages(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wpi.proto.ProtobufDifferentialDriveWheelVoltages)
}
ProtobufDifferentialDriveWheelVoltages::ProtobufDifferentialDriveWheelVoltages(const ProtobufDifferentialDriveWheelVoltages& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtobufDifferentialDriveWheelVoltages* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.left_){}
    , decltype(_impl_.right_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.left_, &from._impl_.left_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.right_) -
    reinterpret_cast<char*>(&_impl_.left_)) + sizeof(_impl_.right_));
  // @@protoc_insertion_point(copy_constructor:wpi.proto.ProtobufDifferentialDriveWheelVoltages)
}

inline void ProtobufDifferentialDriveWheelVoltages::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.left_){0}
    , decltype(_impl_.right_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProtobufDifferentialDriveWheelVoltages::~ProtobufDifferentialDriveWheelVoltages() {
  // @@protoc_insertion_point(destructor:wpi.proto.ProtobufDifferentialDriveWheelVoltages)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtobufDifferentialDriveWheelVoltages::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProtobufDifferentialDriveWheelVoltages::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtobufDifferentialDriveWheelVoltages::Clear() {
// @@protoc_insertion_point(message_clear_start:wpi.proto.ProtobufDifferentialDriveWheelVoltages)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.right_) -
      reinterpret_cast<char*>(&_impl_.left_)) + sizeof(_impl_.right_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtobufDifferentialDriveWheelVoltages::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double right = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtobufDifferentialDriveWheelVoltages::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wpi.proto.ProtobufDifferentialDriveWheelVoltages)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double left = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_left = this->_internal_left();
  uint64_t raw_left;
  memcpy(&raw_left, &tmp_left, sizeof(tmp_left));
  if (raw_left != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_left(), target);
  }

  // double right = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_right = this->_internal_right();
  uint64_t raw_right;
  memcpy(&raw_right, &tmp_right, sizeof(tmp_right));
  if (raw_right != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_right(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wpi.proto.ProtobufDifferentialDriveWheelVoltages)
  return target;
}

size_t ProtobufDifferentialDriveWheelVoltages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wpi.proto.ProtobufDifferentialDriveWheelVoltages)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double left = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_left = this->_internal_left();
  uint64_t raw_left;
  memcpy(&raw_left, &tmp_left, sizeof(tmp_left));
  if (raw_left != 0) {
    total_size += 1 + 8;
  }

  // double right = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_right = this->_internal_right();
  uint64_t raw_right;
  memcpy(&raw_right, &tmp_right, sizeof(tmp_right));
  if (raw_right != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtobufDifferentialDriveWheelVoltages::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtobufDifferentialDriveWheelVoltages::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtobufDifferentialDriveWheelVoltages::GetClassData() const { return &_class_data_; }


void ProtobufDifferentialDriveWheelVoltages::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtobufDifferentialDriveWheelVoltages*>(&to_msg);
  auto& from = static_cast<const ProtobufDifferentialDriveWheelVoltages&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wpi.proto.ProtobufDifferentialDriveWheelVoltages)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_left = from._internal_left();
  uint64_t raw_left;
  memcpy(&raw_left, &tmp_left, sizeof(tmp_left));
  if (raw_left != 0) {
    _this->_internal_set_left(from._internal_left());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_right = from._internal_right();
  uint64_t raw_right;
  memcpy(&raw_right, &tmp_right, sizeof(tmp_right));
  if (raw_right != 0) {
    _this->_internal_set_right(from._internal_right());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtobufDifferentialDriveWheelVoltages::CopyFrom(const ProtobufDifferentialDriveWheelVoltages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wpi.proto.ProtobufDifferentialDriveWheelVoltages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufDifferentialDriveWheelVoltages::IsInitialized() const {
  return true;
}

void ProtobufDifferentialDriveWheelVoltages::InternalSwap(ProtobufDifferentialDriveWheelVoltages* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtobufDifferentialDriveWheelVoltages, _impl_.right_)
      + sizeof(ProtobufDifferentialDriveWheelVoltages::_impl_.right_)
      - PROTOBUF_FIELD_OFFSET(ProtobufDifferentialDriveWheelVoltages, _impl_.left_)>(
          reinterpret_cast<char*>(&_impl_.left_),
          reinterpret_cast<char*>(&other->_impl_.left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtobufDifferentialDriveWheelVoltages::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_controller_2eproto_getter, &descriptor_table_controller_2eproto_once,
      file_level_metadata_controller_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace wpi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::wpi::proto::ProtobufArmFeedforward*
Arena::CreateMaybeMessage< ::wpi::proto::ProtobufArmFeedforward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wpi::proto::ProtobufArmFeedforward >(arena);
}
template<> PROTOBUF_NOINLINE ::wpi::proto::ProtobufDifferentialDriveFeedforward*
Arena::CreateMaybeMessage< ::wpi::proto::ProtobufDifferentialDriveFeedforward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wpi::proto::ProtobufDifferentialDriveFeedforward >(arena);
}
template<> PROTOBUF_NOINLINE ::wpi::proto::ProtobufElevatorFeedforward*
Arena::CreateMaybeMessage< ::wpi::proto::ProtobufElevatorFeedforward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wpi::proto::ProtobufElevatorFeedforward >(arena);
}
template<> PROTOBUF_NOINLINE ::wpi::proto::ProtobufSimpleMotorFeedforward*
Arena::CreateMaybeMessage< ::wpi::proto::ProtobufSimpleMotorFeedforward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wpi::proto::ProtobufSimpleMotorFeedforward >(arena);
}
template<> PROTOBUF_NOINLINE ::wpi::proto::ProtobufDifferentialDriveWheelVoltages*
Arena::CreateMaybeMessage< ::wpi::proto::ProtobufDifferentialDriveWheelVoltages >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wpi::proto::ProtobufDifferentialDriveWheelVoltages >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

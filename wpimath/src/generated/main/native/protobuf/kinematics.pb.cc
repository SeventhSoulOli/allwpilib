// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kinematics.proto

#include "kinematics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace wpi {
namespace proto {
PROTOBUF_CONSTEXPR ProtobufChassisSpeeds::ProtobufChassisSpeeds(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vx_)*/0
  , /*decltype(_impl_.vy_)*/0
  , /*decltype(_impl_.omega_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtobufChassisSpeedsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtobufChassisSpeedsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtobufChassisSpeedsDefaultTypeInternal() {}
  union {
    ProtobufChassisSpeeds _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtobufChassisSpeedsDefaultTypeInternal _ProtobufChassisSpeeds_default_instance_;
PROTOBUF_CONSTEXPR ProtobufDifferentialDriveKinematics::ProtobufDifferentialDriveKinematics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.track_width_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtobufDifferentialDriveKinematicsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtobufDifferentialDriveKinematicsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtobufDifferentialDriveKinematicsDefaultTypeInternal() {}
  union {
    ProtobufDifferentialDriveKinematics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtobufDifferentialDriveKinematicsDefaultTypeInternal _ProtobufDifferentialDriveKinematics_default_instance_;
PROTOBUF_CONSTEXPR ProtobufDifferentialDriveWheelSpeeds::ProtobufDifferentialDriveWheelSpeeds(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.left_)*/0
  , /*decltype(_impl_.right_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtobufDifferentialDriveWheelSpeedsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtobufDifferentialDriveWheelSpeedsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtobufDifferentialDriveWheelSpeedsDefaultTypeInternal() {}
  union {
    ProtobufDifferentialDriveWheelSpeeds _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtobufDifferentialDriveWheelSpeedsDefaultTypeInternal _ProtobufDifferentialDriveWheelSpeeds_default_instance_;
PROTOBUF_CONSTEXPR ProtobufMecanumDriveKinematics::ProtobufMecanumDriveKinematics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.front_left_)*/nullptr
  , /*decltype(_impl_.front_right_)*/nullptr
  , /*decltype(_impl_.rear_left_)*/nullptr
  , /*decltype(_impl_.rear_right_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtobufMecanumDriveKinematicsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtobufMecanumDriveKinematicsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtobufMecanumDriveKinematicsDefaultTypeInternal() {}
  union {
    ProtobufMecanumDriveKinematics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtobufMecanumDriveKinematicsDefaultTypeInternal _ProtobufMecanumDriveKinematics_default_instance_;
PROTOBUF_CONSTEXPR ProtobufMecanumDriveMotorVoltages::ProtobufMecanumDriveMotorVoltages(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.front_left_)*/0
  , /*decltype(_impl_.front_right_)*/0
  , /*decltype(_impl_.rear_left_)*/0
  , /*decltype(_impl_.rear_right_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtobufMecanumDriveMotorVoltagesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtobufMecanumDriveMotorVoltagesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtobufMecanumDriveMotorVoltagesDefaultTypeInternal() {}
  union {
    ProtobufMecanumDriveMotorVoltages _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtobufMecanumDriveMotorVoltagesDefaultTypeInternal _ProtobufMecanumDriveMotorVoltages_default_instance_;
PROTOBUF_CONSTEXPR ProtobufMecanumDriveWheelPositions::ProtobufMecanumDriveWheelPositions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.front_left_)*/0
  , /*decltype(_impl_.front_right_)*/0
  , /*decltype(_impl_.rear_left_)*/0
  , /*decltype(_impl_.rear_right_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtobufMecanumDriveWheelPositionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtobufMecanumDriveWheelPositionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtobufMecanumDriveWheelPositionsDefaultTypeInternal() {}
  union {
    ProtobufMecanumDriveWheelPositions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtobufMecanumDriveWheelPositionsDefaultTypeInternal _ProtobufMecanumDriveWheelPositions_default_instance_;
PROTOBUF_CONSTEXPR ProtobufMecanumDriveWheelSpeeds::ProtobufMecanumDriveWheelSpeeds(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.front_left_)*/0
  , /*decltype(_impl_.front_right_)*/0
  , /*decltype(_impl_.rear_left_)*/0
  , /*decltype(_impl_.rear_right_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtobufMecanumDriveWheelSpeedsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtobufMecanumDriveWheelSpeedsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtobufMecanumDriveWheelSpeedsDefaultTypeInternal() {}
  union {
    ProtobufMecanumDriveWheelSpeeds _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtobufMecanumDriveWheelSpeedsDefaultTypeInternal _ProtobufMecanumDriveWheelSpeeds_default_instance_;
PROTOBUF_CONSTEXPR ProtobufSwerveDriveKinematics::ProtobufSwerveDriveKinematics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.modules_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtobufSwerveDriveKinematicsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtobufSwerveDriveKinematicsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtobufSwerveDriveKinematicsDefaultTypeInternal() {}
  union {
    ProtobufSwerveDriveKinematics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtobufSwerveDriveKinematicsDefaultTypeInternal _ProtobufSwerveDriveKinematics_default_instance_;
PROTOBUF_CONSTEXPR ProtobufSwerveModulePosition::ProtobufSwerveModulePosition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.angle_)*/nullptr
  , /*decltype(_impl_.distance_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtobufSwerveModulePositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtobufSwerveModulePositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtobufSwerveModulePositionDefaultTypeInternal() {}
  union {
    ProtobufSwerveModulePosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtobufSwerveModulePositionDefaultTypeInternal _ProtobufSwerveModulePosition_default_instance_;
PROTOBUF_CONSTEXPR ProtobufSwerveModuleState::ProtobufSwerveModuleState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.angle_)*/nullptr
  , /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtobufSwerveModuleStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtobufSwerveModuleStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtobufSwerveModuleStateDefaultTypeInternal() {}
  union {
    ProtobufSwerveModuleState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtobufSwerveModuleStateDefaultTypeInternal _ProtobufSwerveModuleState_default_instance_;
}  // namespace proto
}  // namespace wpi
static ::_pb::Metadata file_level_metadata_kinematics_2eproto[10];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_kinematics_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_kinematics_2eproto = nullptr;

const uint32_t TableStruct_kinematics_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufChassisSpeeds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufChassisSpeeds, _impl_.vx_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufChassisSpeeds, _impl_.vy_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufChassisSpeeds, _impl_.omega_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufDifferentialDriveKinematics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufDifferentialDriveKinematics, _impl_.track_width_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufDifferentialDriveWheelSpeeds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufDifferentialDriveWheelSpeeds, _impl_.left_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufDifferentialDriveWheelSpeeds, _impl_.right_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufMecanumDriveKinematics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufMecanumDriveKinematics, _impl_.front_left_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufMecanumDriveKinematics, _impl_.front_right_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufMecanumDriveKinematics, _impl_.rear_left_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufMecanumDriveKinematics, _impl_.rear_right_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufMecanumDriveMotorVoltages, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufMecanumDriveMotorVoltages, _impl_.front_left_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufMecanumDriveMotorVoltages, _impl_.front_right_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufMecanumDriveMotorVoltages, _impl_.rear_left_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufMecanumDriveMotorVoltages, _impl_.rear_right_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufMecanumDriveWheelPositions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufMecanumDriveWheelPositions, _impl_.front_left_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufMecanumDriveWheelPositions, _impl_.front_right_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufMecanumDriveWheelPositions, _impl_.rear_left_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufMecanumDriveWheelPositions, _impl_.rear_right_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufMecanumDriveWheelSpeeds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufMecanumDriveWheelSpeeds, _impl_.front_left_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufMecanumDriveWheelSpeeds, _impl_.front_right_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufMecanumDriveWheelSpeeds, _impl_.rear_left_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufMecanumDriveWheelSpeeds, _impl_.rear_right_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufSwerveDriveKinematics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufSwerveDriveKinematics, _impl_.modules_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufSwerveModulePosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufSwerveModulePosition, _impl_.distance_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufSwerveModulePosition, _impl_.angle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufSwerveModuleState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufSwerveModuleState, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufSwerveModuleState, _impl_.angle_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::wpi::proto::ProtobufChassisSpeeds)},
  { 9, -1, -1, sizeof(::wpi::proto::ProtobufDifferentialDriveKinematics)},
  { 16, -1, -1, sizeof(::wpi::proto::ProtobufDifferentialDriveWheelSpeeds)},
  { 24, -1, -1, sizeof(::wpi::proto::ProtobufMecanumDriveKinematics)},
  { 34, -1, -1, sizeof(::wpi::proto::ProtobufMecanumDriveMotorVoltages)},
  { 44, -1, -1, sizeof(::wpi::proto::ProtobufMecanumDriveWheelPositions)},
  { 54, -1, -1, sizeof(::wpi::proto::ProtobufMecanumDriveWheelSpeeds)},
  { 64, -1, -1, sizeof(::wpi::proto::ProtobufSwerveDriveKinematics)},
  { 71, -1, -1, sizeof(::wpi::proto::ProtobufSwerveModulePosition)},
  { 79, -1, -1, sizeof(::wpi::proto::ProtobufSwerveModuleState)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::wpi::proto::_ProtobufChassisSpeeds_default_instance_._instance,
  &::wpi::proto::_ProtobufDifferentialDriveKinematics_default_instance_._instance,
  &::wpi::proto::_ProtobufDifferentialDriveWheelSpeeds_default_instance_._instance,
  &::wpi::proto::_ProtobufMecanumDriveKinematics_default_instance_._instance,
  &::wpi::proto::_ProtobufMecanumDriveMotorVoltages_default_instance_._instance,
  &::wpi::proto::_ProtobufMecanumDriveWheelPositions_default_instance_._instance,
  &::wpi::proto::_ProtobufMecanumDriveWheelSpeeds_default_instance_._instance,
  &::wpi::proto::_ProtobufSwerveDriveKinematics_default_instance_._instance,
  &::wpi::proto::_ProtobufSwerveModulePosition_default_instance_._instance,
  &::wpi::proto::_ProtobufSwerveModuleState_default_instance_._instance,
};

const char descriptor_table_protodef_kinematics_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020kinematics.proto\022\twpi.proto\032\020geometry2"
  "d.proto\">\n\025ProtobufChassisSpeeds\022\n\n\002vx\030\001"
  " \001(\001\022\n\n\002vy\030\002 \001(\001\022\r\n\005omega\030\003 \001(\001\":\n#Proto"
  "bufDifferentialDriveKinematics\022\023\n\013track_"
  "width\030\001 \001(\001\"C\n$ProtobufDifferentialDrive"
  "WheelSpeeds\022\014\n\004left\030\001 \001(\001\022\r\n\005right\030\002 \001(\001"
  "\"\370\001\n\036ProtobufMecanumDriveKinematics\0224\n\nf"
  "ront_left\030\001 \001(\0132 .wpi.proto.ProtobufTran"
  "slation2d\0225\n\013front_right\030\002 \001(\0132 .wpi.pro"
  "to.ProtobufTranslation2d\0223\n\trear_left\030\003 "
  "\001(\0132 .wpi.proto.ProtobufTranslation2d\0224\n"
  "\nrear_right\030\004 \001(\0132 .wpi.proto.ProtobufTr"
  "anslation2d\"s\n!ProtobufMecanumDriveMotor"
  "Voltages\022\022\n\nfront_left\030\001 \001(\001\022\023\n\013front_ri"
  "ght\030\002 \001(\001\022\021\n\trear_left\030\003 \001(\001\022\022\n\nrear_rig"
  "ht\030\004 \001(\001\"t\n\"ProtobufMecanumDriveWheelPos"
  "itions\022\022\n\nfront_left\030\001 \001(\001\022\023\n\013front_righ"
  "t\030\002 \001(\001\022\021\n\trear_left\030\003 \001(\001\022\022\n\nrear_right"
  "\030\004 \001(\001\"q\n\037ProtobufMecanumDriveWheelSpeed"
  "s\022\022\n\nfront_left\030\001 \001(\001\022\023\n\013front_right\030\002 \001"
  "(\001\022\021\n\trear_left\030\003 \001(\001\022\022\n\nrear_right\030\004 \001("
  "\001\"R\n\035ProtobufSwerveDriveKinematics\0221\n\007mo"
  "dules\030\001 \003(\0132 .wpi.proto.ProtobufTranslat"
  "ion2d\"^\n\034ProtobufSwerveModulePosition\022\020\n"
  "\010distance\030\001 \001(\001\022,\n\005angle\030\002 \001(\0132\035.wpi.pro"
  "to.ProtobufRotation2d\"X\n\031ProtobufSwerveM"
  "oduleState\022\r\n\005speed\030\001 \001(\001\022,\n\005angle\030\002 \001(\013"
  "2\035.wpi.proto.ProtobufRotation2dB\032\n\030edu.w"
  "pi.first.math.protob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_kinematics_2eproto_deps[1] = {
  &::descriptor_table_geometry2d_2eproto,
};
static ::_pbi::once_flag descriptor_table_kinematics_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_kinematics_2eproto = {
    false, false, 1147, descriptor_table_protodef_kinematics_2eproto,
    "kinematics.proto",
    &descriptor_table_kinematics_2eproto_once, descriptor_table_kinematics_2eproto_deps, 1, 10,
    schemas, file_default_instances, TableStruct_kinematics_2eproto::offsets,
    file_level_metadata_kinematics_2eproto, file_level_enum_descriptors_kinematics_2eproto,
    file_level_service_descriptors_kinematics_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_kinematics_2eproto_getter() {
  return &descriptor_table_kinematics_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_kinematics_2eproto(&descriptor_table_kinematics_2eproto);
namespace wpi {
namespace proto {

// ===================================================================

class ProtobufChassisSpeeds::_Internal {
 public:
};

ProtobufChassisSpeeds::ProtobufChassisSpeeds(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wpi.proto.ProtobufChassisSpeeds)
}
ProtobufChassisSpeeds::ProtobufChassisSpeeds(const ProtobufChassisSpeeds& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtobufChassisSpeeds* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vx_){}
    , decltype(_impl_.vy_){}
    , decltype(_impl_.omega_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vx_, &from._impl_.vx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.omega_) -
    reinterpret_cast<char*>(&_impl_.vx_)) + sizeof(_impl_.omega_));
  // @@protoc_insertion_point(copy_constructor:wpi.proto.ProtobufChassisSpeeds)
}

inline void ProtobufChassisSpeeds::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vx_){0}
    , decltype(_impl_.vy_){0}
    , decltype(_impl_.omega_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProtobufChassisSpeeds::~ProtobufChassisSpeeds() {
  // @@protoc_insertion_point(destructor:wpi.proto.ProtobufChassisSpeeds)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtobufChassisSpeeds::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProtobufChassisSpeeds::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtobufChassisSpeeds::Clear() {
// @@protoc_insertion_point(message_clear_start:wpi.proto.ProtobufChassisSpeeds)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.vx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.omega_) -
      reinterpret_cast<char*>(&_impl_.vx_)) + sizeof(_impl_.omega_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtobufChassisSpeeds::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double vx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.vx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double vy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.vy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double omega = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.omega_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtobufChassisSpeeds::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wpi.proto.ProtobufChassisSpeeds)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double vx = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_vx = this->_internal_vx();
  uint64_t raw_vx;
  memcpy(&raw_vx, &tmp_vx, sizeof(tmp_vx));
  if (raw_vx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_vx(), target);
  }

  // double vy = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_vy = this->_internal_vy();
  uint64_t raw_vy;
  memcpy(&raw_vy, &tmp_vy, sizeof(tmp_vy));
  if (raw_vy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_vy(), target);
  }

  // double omega = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_omega = this->_internal_omega();
  uint64_t raw_omega;
  memcpy(&raw_omega, &tmp_omega, sizeof(tmp_omega));
  if (raw_omega != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_omega(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wpi.proto.ProtobufChassisSpeeds)
  return target;
}

size_t ProtobufChassisSpeeds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wpi.proto.ProtobufChassisSpeeds)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double vx = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_vx = this->_internal_vx();
  uint64_t raw_vx;
  memcpy(&raw_vx, &tmp_vx, sizeof(tmp_vx));
  if (raw_vx != 0) {
    total_size += 1 + 8;
  }

  // double vy = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_vy = this->_internal_vy();
  uint64_t raw_vy;
  memcpy(&raw_vy, &tmp_vy, sizeof(tmp_vy));
  if (raw_vy != 0) {
    total_size += 1 + 8;
  }

  // double omega = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_omega = this->_internal_omega();
  uint64_t raw_omega;
  memcpy(&raw_omega, &tmp_omega, sizeof(tmp_omega));
  if (raw_omega != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtobufChassisSpeeds::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtobufChassisSpeeds::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtobufChassisSpeeds::GetClassData() const { return &_class_data_; }


void ProtobufChassisSpeeds::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtobufChassisSpeeds*>(&to_msg);
  auto& from = static_cast<const ProtobufChassisSpeeds&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wpi.proto.ProtobufChassisSpeeds)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_vx = from._internal_vx();
  uint64_t raw_vx;
  memcpy(&raw_vx, &tmp_vx, sizeof(tmp_vx));
  if (raw_vx != 0) {
    _this->_internal_set_vx(from._internal_vx());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_vy = from._internal_vy();
  uint64_t raw_vy;
  memcpy(&raw_vy, &tmp_vy, sizeof(tmp_vy));
  if (raw_vy != 0) {
    _this->_internal_set_vy(from._internal_vy());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_omega = from._internal_omega();
  uint64_t raw_omega;
  memcpy(&raw_omega, &tmp_omega, sizeof(tmp_omega));
  if (raw_omega != 0) {
    _this->_internal_set_omega(from._internal_omega());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtobufChassisSpeeds::CopyFrom(const ProtobufChassisSpeeds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wpi.proto.ProtobufChassisSpeeds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufChassisSpeeds::IsInitialized() const {
  return true;
}

void ProtobufChassisSpeeds::InternalSwap(ProtobufChassisSpeeds* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtobufChassisSpeeds, _impl_.omega_)
      + sizeof(ProtobufChassisSpeeds::_impl_.omega_)
      - PROTOBUF_FIELD_OFFSET(ProtobufChassisSpeeds, _impl_.vx_)>(
          reinterpret_cast<char*>(&_impl_.vx_),
          reinterpret_cast<char*>(&other->_impl_.vx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtobufChassisSpeeds::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kinematics_2eproto_getter, &descriptor_table_kinematics_2eproto_once,
      file_level_metadata_kinematics_2eproto[0]);
}

// ===================================================================

class ProtobufDifferentialDriveKinematics::_Internal {
 public:
};

ProtobufDifferentialDriveKinematics::ProtobufDifferentialDriveKinematics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wpi.proto.ProtobufDifferentialDriveKinematics)
}
ProtobufDifferentialDriveKinematics::ProtobufDifferentialDriveKinematics(const ProtobufDifferentialDriveKinematics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtobufDifferentialDriveKinematics* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.track_width_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.track_width_ = from._impl_.track_width_;
  // @@protoc_insertion_point(copy_constructor:wpi.proto.ProtobufDifferentialDriveKinematics)
}

inline void ProtobufDifferentialDriveKinematics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.track_width_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProtobufDifferentialDriveKinematics::~ProtobufDifferentialDriveKinematics() {
  // @@protoc_insertion_point(destructor:wpi.proto.ProtobufDifferentialDriveKinematics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtobufDifferentialDriveKinematics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProtobufDifferentialDriveKinematics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtobufDifferentialDriveKinematics::Clear() {
// @@protoc_insertion_point(message_clear_start:wpi.proto.ProtobufDifferentialDriveKinematics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.track_width_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtobufDifferentialDriveKinematics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double track_width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.track_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtobufDifferentialDriveKinematics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wpi.proto.ProtobufDifferentialDriveKinematics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double track_width = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_track_width = this->_internal_track_width();
  uint64_t raw_track_width;
  memcpy(&raw_track_width, &tmp_track_width, sizeof(tmp_track_width));
  if (raw_track_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_track_width(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wpi.proto.ProtobufDifferentialDriveKinematics)
  return target;
}

size_t ProtobufDifferentialDriveKinematics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wpi.proto.ProtobufDifferentialDriveKinematics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double track_width = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_track_width = this->_internal_track_width();
  uint64_t raw_track_width;
  memcpy(&raw_track_width, &tmp_track_width, sizeof(tmp_track_width));
  if (raw_track_width != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtobufDifferentialDriveKinematics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtobufDifferentialDriveKinematics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtobufDifferentialDriveKinematics::GetClassData() const { return &_class_data_; }


void ProtobufDifferentialDriveKinematics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtobufDifferentialDriveKinematics*>(&to_msg);
  auto& from = static_cast<const ProtobufDifferentialDriveKinematics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wpi.proto.ProtobufDifferentialDriveKinematics)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_track_width = from._internal_track_width();
  uint64_t raw_track_width;
  memcpy(&raw_track_width, &tmp_track_width, sizeof(tmp_track_width));
  if (raw_track_width != 0) {
    _this->_internal_set_track_width(from._internal_track_width());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtobufDifferentialDriveKinematics::CopyFrom(const ProtobufDifferentialDriveKinematics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wpi.proto.ProtobufDifferentialDriveKinematics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufDifferentialDriveKinematics::IsInitialized() const {
  return true;
}

void ProtobufDifferentialDriveKinematics::InternalSwap(ProtobufDifferentialDriveKinematics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.track_width_, other->_impl_.track_width_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtobufDifferentialDriveKinematics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kinematics_2eproto_getter, &descriptor_table_kinematics_2eproto_once,
      file_level_metadata_kinematics_2eproto[1]);
}

// ===================================================================

class ProtobufDifferentialDriveWheelSpeeds::_Internal {
 public:
};

ProtobufDifferentialDriveWheelSpeeds::ProtobufDifferentialDriveWheelSpeeds(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wpi.proto.ProtobufDifferentialDriveWheelSpeeds)
}
ProtobufDifferentialDriveWheelSpeeds::ProtobufDifferentialDriveWheelSpeeds(const ProtobufDifferentialDriveWheelSpeeds& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtobufDifferentialDriveWheelSpeeds* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.left_){}
    , decltype(_impl_.right_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.left_, &from._impl_.left_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.right_) -
    reinterpret_cast<char*>(&_impl_.left_)) + sizeof(_impl_.right_));
  // @@protoc_insertion_point(copy_constructor:wpi.proto.ProtobufDifferentialDriveWheelSpeeds)
}

inline void ProtobufDifferentialDriveWheelSpeeds::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.left_){0}
    , decltype(_impl_.right_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProtobufDifferentialDriveWheelSpeeds::~ProtobufDifferentialDriveWheelSpeeds() {
  // @@protoc_insertion_point(destructor:wpi.proto.ProtobufDifferentialDriveWheelSpeeds)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtobufDifferentialDriveWheelSpeeds::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProtobufDifferentialDriveWheelSpeeds::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtobufDifferentialDriveWheelSpeeds::Clear() {
// @@protoc_insertion_point(message_clear_start:wpi.proto.ProtobufDifferentialDriveWheelSpeeds)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.right_) -
      reinterpret_cast<char*>(&_impl_.left_)) + sizeof(_impl_.right_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtobufDifferentialDriveWheelSpeeds::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double right = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtobufDifferentialDriveWheelSpeeds::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wpi.proto.ProtobufDifferentialDriveWheelSpeeds)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double left = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_left = this->_internal_left();
  uint64_t raw_left;
  memcpy(&raw_left, &tmp_left, sizeof(tmp_left));
  if (raw_left != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_left(), target);
  }

  // double right = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_right = this->_internal_right();
  uint64_t raw_right;
  memcpy(&raw_right, &tmp_right, sizeof(tmp_right));
  if (raw_right != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_right(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wpi.proto.ProtobufDifferentialDriveWheelSpeeds)
  return target;
}

size_t ProtobufDifferentialDriveWheelSpeeds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wpi.proto.ProtobufDifferentialDriveWheelSpeeds)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double left = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_left = this->_internal_left();
  uint64_t raw_left;
  memcpy(&raw_left, &tmp_left, sizeof(tmp_left));
  if (raw_left != 0) {
    total_size += 1 + 8;
  }

  // double right = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_right = this->_internal_right();
  uint64_t raw_right;
  memcpy(&raw_right, &tmp_right, sizeof(tmp_right));
  if (raw_right != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtobufDifferentialDriveWheelSpeeds::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtobufDifferentialDriveWheelSpeeds::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtobufDifferentialDriveWheelSpeeds::GetClassData() const { return &_class_data_; }


void ProtobufDifferentialDriveWheelSpeeds::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtobufDifferentialDriveWheelSpeeds*>(&to_msg);
  auto& from = static_cast<const ProtobufDifferentialDriveWheelSpeeds&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wpi.proto.ProtobufDifferentialDriveWheelSpeeds)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_left = from._internal_left();
  uint64_t raw_left;
  memcpy(&raw_left, &tmp_left, sizeof(tmp_left));
  if (raw_left != 0) {
    _this->_internal_set_left(from._internal_left());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_right = from._internal_right();
  uint64_t raw_right;
  memcpy(&raw_right, &tmp_right, sizeof(tmp_right));
  if (raw_right != 0) {
    _this->_internal_set_right(from._internal_right());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtobufDifferentialDriveWheelSpeeds::CopyFrom(const ProtobufDifferentialDriveWheelSpeeds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wpi.proto.ProtobufDifferentialDriveWheelSpeeds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufDifferentialDriveWheelSpeeds::IsInitialized() const {
  return true;
}

void ProtobufDifferentialDriveWheelSpeeds::InternalSwap(ProtobufDifferentialDriveWheelSpeeds* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtobufDifferentialDriveWheelSpeeds, _impl_.right_)
      + sizeof(ProtobufDifferentialDriveWheelSpeeds::_impl_.right_)
      - PROTOBUF_FIELD_OFFSET(ProtobufDifferentialDriveWheelSpeeds, _impl_.left_)>(
          reinterpret_cast<char*>(&_impl_.left_),
          reinterpret_cast<char*>(&other->_impl_.left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtobufDifferentialDriveWheelSpeeds::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kinematics_2eproto_getter, &descriptor_table_kinematics_2eproto_once,
      file_level_metadata_kinematics_2eproto[2]);
}

// ===================================================================

class ProtobufMecanumDriveKinematics::_Internal {
 public:
  static const ::wpi::proto::ProtobufTranslation2d& front_left(const ProtobufMecanumDriveKinematics* msg);
  static const ::wpi::proto::ProtobufTranslation2d& front_right(const ProtobufMecanumDriveKinematics* msg);
  static const ::wpi::proto::ProtobufTranslation2d& rear_left(const ProtobufMecanumDriveKinematics* msg);
  static const ::wpi::proto::ProtobufTranslation2d& rear_right(const ProtobufMecanumDriveKinematics* msg);
};

const ::wpi::proto::ProtobufTranslation2d&
ProtobufMecanumDriveKinematics::_Internal::front_left(const ProtobufMecanumDriveKinematics* msg) {
  return *msg->_impl_.front_left_;
}
const ::wpi::proto::ProtobufTranslation2d&
ProtobufMecanumDriveKinematics::_Internal::front_right(const ProtobufMecanumDriveKinematics* msg) {
  return *msg->_impl_.front_right_;
}
const ::wpi::proto::ProtobufTranslation2d&
ProtobufMecanumDriveKinematics::_Internal::rear_left(const ProtobufMecanumDriveKinematics* msg) {
  return *msg->_impl_.rear_left_;
}
const ::wpi::proto::ProtobufTranslation2d&
ProtobufMecanumDriveKinematics::_Internal::rear_right(const ProtobufMecanumDriveKinematics* msg) {
  return *msg->_impl_.rear_right_;
}
void ProtobufMecanumDriveKinematics::clear_front_left() {
  if (GetArenaForAllocation() == nullptr && _impl_.front_left_ != nullptr) {
    delete _impl_.front_left_;
  }
  _impl_.front_left_ = nullptr;
}
void ProtobufMecanumDriveKinematics::clear_front_right() {
  if (GetArenaForAllocation() == nullptr && _impl_.front_right_ != nullptr) {
    delete _impl_.front_right_;
  }
  _impl_.front_right_ = nullptr;
}
void ProtobufMecanumDriveKinematics::clear_rear_left() {
  if (GetArenaForAllocation() == nullptr && _impl_.rear_left_ != nullptr) {
    delete _impl_.rear_left_;
  }
  _impl_.rear_left_ = nullptr;
}
void ProtobufMecanumDriveKinematics::clear_rear_right() {
  if (GetArenaForAllocation() == nullptr && _impl_.rear_right_ != nullptr) {
    delete _impl_.rear_right_;
  }
  _impl_.rear_right_ = nullptr;
}
ProtobufMecanumDriveKinematics::ProtobufMecanumDriveKinematics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wpi.proto.ProtobufMecanumDriveKinematics)
}
ProtobufMecanumDriveKinematics::ProtobufMecanumDriveKinematics(const ProtobufMecanumDriveKinematics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtobufMecanumDriveKinematics* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.front_left_){nullptr}
    , decltype(_impl_.front_right_){nullptr}
    , decltype(_impl_.rear_left_){nullptr}
    , decltype(_impl_.rear_right_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_front_left()) {
    _this->_impl_.front_left_ = new ::wpi::proto::ProtobufTranslation2d(*from._impl_.front_left_);
  }
  if (from._internal_has_front_right()) {
    _this->_impl_.front_right_ = new ::wpi::proto::ProtobufTranslation2d(*from._impl_.front_right_);
  }
  if (from._internal_has_rear_left()) {
    _this->_impl_.rear_left_ = new ::wpi::proto::ProtobufTranslation2d(*from._impl_.rear_left_);
  }
  if (from._internal_has_rear_right()) {
    _this->_impl_.rear_right_ = new ::wpi::proto::ProtobufTranslation2d(*from._impl_.rear_right_);
  }
  // @@protoc_insertion_point(copy_constructor:wpi.proto.ProtobufMecanumDriveKinematics)
}

inline void ProtobufMecanumDriveKinematics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.front_left_){nullptr}
    , decltype(_impl_.front_right_){nullptr}
    , decltype(_impl_.rear_left_){nullptr}
    , decltype(_impl_.rear_right_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProtobufMecanumDriveKinematics::~ProtobufMecanumDriveKinematics() {
  // @@protoc_insertion_point(destructor:wpi.proto.ProtobufMecanumDriveKinematics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtobufMecanumDriveKinematics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.front_left_;
  if (this != internal_default_instance()) delete _impl_.front_right_;
  if (this != internal_default_instance()) delete _impl_.rear_left_;
  if (this != internal_default_instance()) delete _impl_.rear_right_;
}

void ProtobufMecanumDriveKinematics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtobufMecanumDriveKinematics::Clear() {
// @@protoc_insertion_point(message_clear_start:wpi.proto.ProtobufMecanumDriveKinematics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.front_left_ != nullptr) {
    delete _impl_.front_left_;
  }
  _impl_.front_left_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.front_right_ != nullptr) {
    delete _impl_.front_right_;
  }
  _impl_.front_right_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rear_left_ != nullptr) {
    delete _impl_.rear_left_;
  }
  _impl_.rear_left_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rear_right_ != nullptr) {
    delete _impl_.rear_right_;
  }
  _impl_.rear_right_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtobufMecanumDriveKinematics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .wpi.proto.ProtobufTranslation2d front_left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_front_left(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .wpi.proto.ProtobufTranslation2d front_right = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_front_right(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .wpi.proto.ProtobufTranslation2d rear_left = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rear_left(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .wpi.proto.ProtobufTranslation2d rear_right = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rear_right(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtobufMecanumDriveKinematics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wpi.proto.ProtobufMecanumDriveKinematics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .wpi.proto.ProtobufTranslation2d front_left = 1;
  if (this->_internal_has_front_left()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::front_left(this),
        _Internal::front_left(this).GetCachedSize(), target, stream);
  }

  // .wpi.proto.ProtobufTranslation2d front_right = 2;
  if (this->_internal_has_front_right()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::front_right(this),
        _Internal::front_right(this).GetCachedSize(), target, stream);
  }

  // .wpi.proto.ProtobufTranslation2d rear_left = 3;
  if (this->_internal_has_rear_left()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::rear_left(this),
        _Internal::rear_left(this).GetCachedSize(), target, stream);
  }

  // .wpi.proto.ProtobufTranslation2d rear_right = 4;
  if (this->_internal_has_rear_right()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::rear_right(this),
        _Internal::rear_right(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wpi.proto.ProtobufMecanumDriveKinematics)
  return target;
}

size_t ProtobufMecanumDriveKinematics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wpi.proto.ProtobufMecanumDriveKinematics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .wpi.proto.ProtobufTranslation2d front_left = 1;
  if (this->_internal_has_front_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.front_left_);
  }

  // .wpi.proto.ProtobufTranslation2d front_right = 2;
  if (this->_internal_has_front_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.front_right_);
  }

  // .wpi.proto.ProtobufTranslation2d rear_left = 3;
  if (this->_internal_has_rear_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rear_left_);
  }

  // .wpi.proto.ProtobufTranslation2d rear_right = 4;
  if (this->_internal_has_rear_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rear_right_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtobufMecanumDriveKinematics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtobufMecanumDriveKinematics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtobufMecanumDriveKinematics::GetClassData() const { return &_class_data_; }


void ProtobufMecanumDriveKinematics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtobufMecanumDriveKinematics*>(&to_msg);
  auto& from = static_cast<const ProtobufMecanumDriveKinematics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wpi.proto.ProtobufMecanumDriveKinematics)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_front_left()) {
    _this->_internal_mutable_front_left()->::wpi::proto::ProtobufTranslation2d::MergeFrom(
        from._internal_front_left());
  }
  if (from._internal_has_front_right()) {
    _this->_internal_mutable_front_right()->::wpi::proto::ProtobufTranslation2d::MergeFrom(
        from._internal_front_right());
  }
  if (from._internal_has_rear_left()) {
    _this->_internal_mutable_rear_left()->::wpi::proto::ProtobufTranslation2d::MergeFrom(
        from._internal_rear_left());
  }
  if (from._internal_has_rear_right()) {
    _this->_internal_mutable_rear_right()->::wpi::proto::ProtobufTranslation2d::MergeFrom(
        from._internal_rear_right());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtobufMecanumDriveKinematics::CopyFrom(const ProtobufMecanumDriveKinematics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wpi.proto.ProtobufMecanumDriveKinematics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufMecanumDriveKinematics::IsInitialized() const {
  return true;
}

void ProtobufMecanumDriveKinematics::InternalSwap(ProtobufMecanumDriveKinematics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtobufMecanumDriveKinematics, _impl_.rear_right_)
      + sizeof(ProtobufMecanumDriveKinematics::_impl_.rear_right_)
      - PROTOBUF_FIELD_OFFSET(ProtobufMecanumDriveKinematics, _impl_.front_left_)>(
          reinterpret_cast<char*>(&_impl_.front_left_),
          reinterpret_cast<char*>(&other->_impl_.front_left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtobufMecanumDriveKinematics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kinematics_2eproto_getter, &descriptor_table_kinematics_2eproto_once,
      file_level_metadata_kinematics_2eproto[3]);
}

// ===================================================================

class ProtobufMecanumDriveMotorVoltages::_Internal {
 public:
};

ProtobufMecanumDriveMotorVoltages::ProtobufMecanumDriveMotorVoltages(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wpi.proto.ProtobufMecanumDriveMotorVoltages)
}
ProtobufMecanumDriveMotorVoltages::ProtobufMecanumDriveMotorVoltages(const ProtobufMecanumDriveMotorVoltages& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtobufMecanumDriveMotorVoltages* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.front_left_){}
    , decltype(_impl_.front_right_){}
    , decltype(_impl_.rear_left_){}
    , decltype(_impl_.rear_right_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.front_left_, &from._impl_.front_left_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rear_right_) -
    reinterpret_cast<char*>(&_impl_.front_left_)) + sizeof(_impl_.rear_right_));
  // @@protoc_insertion_point(copy_constructor:wpi.proto.ProtobufMecanumDriveMotorVoltages)
}

inline void ProtobufMecanumDriveMotorVoltages::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.front_left_){0}
    , decltype(_impl_.front_right_){0}
    , decltype(_impl_.rear_left_){0}
    , decltype(_impl_.rear_right_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProtobufMecanumDriveMotorVoltages::~ProtobufMecanumDriveMotorVoltages() {
  // @@protoc_insertion_point(destructor:wpi.proto.ProtobufMecanumDriveMotorVoltages)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtobufMecanumDriveMotorVoltages::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProtobufMecanumDriveMotorVoltages::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtobufMecanumDriveMotorVoltages::Clear() {
// @@protoc_insertion_point(message_clear_start:wpi.proto.ProtobufMecanumDriveMotorVoltages)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.front_left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rear_right_) -
      reinterpret_cast<char*>(&_impl_.front_left_)) + sizeof(_impl_.rear_right_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtobufMecanumDriveMotorVoltages::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double front_left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.front_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double front_right = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.front_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double rear_left = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.rear_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double rear_right = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.rear_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtobufMecanumDriveMotorVoltages::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wpi.proto.ProtobufMecanumDriveMotorVoltages)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double front_left = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_front_left = this->_internal_front_left();
  uint64_t raw_front_left;
  memcpy(&raw_front_left, &tmp_front_left, sizeof(tmp_front_left));
  if (raw_front_left != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_front_left(), target);
  }

  // double front_right = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_front_right = this->_internal_front_right();
  uint64_t raw_front_right;
  memcpy(&raw_front_right, &tmp_front_right, sizeof(tmp_front_right));
  if (raw_front_right != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_front_right(), target);
  }

  // double rear_left = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rear_left = this->_internal_rear_left();
  uint64_t raw_rear_left;
  memcpy(&raw_rear_left, &tmp_rear_left, sizeof(tmp_rear_left));
  if (raw_rear_left != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_rear_left(), target);
  }

  // double rear_right = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rear_right = this->_internal_rear_right();
  uint64_t raw_rear_right;
  memcpy(&raw_rear_right, &tmp_rear_right, sizeof(tmp_rear_right));
  if (raw_rear_right != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_rear_right(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wpi.proto.ProtobufMecanumDriveMotorVoltages)
  return target;
}

size_t ProtobufMecanumDriveMotorVoltages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wpi.proto.ProtobufMecanumDriveMotorVoltages)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double front_left = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_front_left = this->_internal_front_left();
  uint64_t raw_front_left;
  memcpy(&raw_front_left, &tmp_front_left, sizeof(tmp_front_left));
  if (raw_front_left != 0) {
    total_size += 1 + 8;
  }

  // double front_right = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_front_right = this->_internal_front_right();
  uint64_t raw_front_right;
  memcpy(&raw_front_right, &tmp_front_right, sizeof(tmp_front_right));
  if (raw_front_right != 0) {
    total_size += 1 + 8;
  }

  // double rear_left = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rear_left = this->_internal_rear_left();
  uint64_t raw_rear_left;
  memcpy(&raw_rear_left, &tmp_rear_left, sizeof(tmp_rear_left));
  if (raw_rear_left != 0) {
    total_size += 1 + 8;
  }

  // double rear_right = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rear_right = this->_internal_rear_right();
  uint64_t raw_rear_right;
  memcpy(&raw_rear_right, &tmp_rear_right, sizeof(tmp_rear_right));
  if (raw_rear_right != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtobufMecanumDriveMotorVoltages::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtobufMecanumDriveMotorVoltages::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtobufMecanumDriveMotorVoltages::GetClassData() const { return &_class_data_; }


void ProtobufMecanumDriveMotorVoltages::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtobufMecanumDriveMotorVoltages*>(&to_msg);
  auto& from = static_cast<const ProtobufMecanumDriveMotorVoltages&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wpi.proto.ProtobufMecanumDriveMotorVoltages)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_front_left = from._internal_front_left();
  uint64_t raw_front_left;
  memcpy(&raw_front_left, &tmp_front_left, sizeof(tmp_front_left));
  if (raw_front_left != 0) {
    _this->_internal_set_front_left(from._internal_front_left());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_front_right = from._internal_front_right();
  uint64_t raw_front_right;
  memcpy(&raw_front_right, &tmp_front_right, sizeof(tmp_front_right));
  if (raw_front_right != 0) {
    _this->_internal_set_front_right(from._internal_front_right());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rear_left = from._internal_rear_left();
  uint64_t raw_rear_left;
  memcpy(&raw_rear_left, &tmp_rear_left, sizeof(tmp_rear_left));
  if (raw_rear_left != 0) {
    _this->_internal_set_rear_left(from._internal_rear_left());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rear_right = from._internal_rear_right();
  uint64_t raw_rear_right;
  memcpy(&raw_rear_right, &tmp_rear_right, sizeof(tmp_rear_right));
  if (raw_rear_right != 0) {
    _this->_internal_set_rear_right(from._internal_rear_right());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtobufMecanumDriveMotorVoltages::CopyFrom(const ProtobufMecanumDriveMotorVoltages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wpi.proto.ProtobufMecanumDriveMotorVoltages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufMecanumDriveMotorVoltages::IsInitialized() const {
  return true;
}

void ProtobufMecanumDriveMotorVoltages::InternalSwap(ProtobufMecanumDriveMotorVoltages* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtobufMecanumDriveMotorVoltages, _impl_.rear_right_)
      + sizeof(ProtobufMecanumDriveMotorVoltages::_impl_.rear_right_)
      - PROTOBUF_FIELD_OFFSET(ProtobufMecanumDriveMotorVoltages, _impl_.front_left_)>(
          reinterpret_cast<char*>(&_impl_.front_left_),
          reinterpret_cast<char*>(&other->_impl_.front_left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtobufMecanumDriveMotorVoltages::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kinematics_2eproto_getter, &descriptor_table_kinematics_2eproto_once,
      file_level_metadata_kinematics_2eproto[4]);
}

// ===================================================================

class ProtobufMecanumDriveWheelPositions::_Internal {
 public:
};

ProtobufMecanumDriveWheelPositions::ProtobufMecanumDriveWheelPositions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wpi.proto.ProtobufMecanumDriveWheelPositions)
}
ProtobufMecanumDriveWheelPositions::ProtobufMecanumDriveWheelPositions(const ProtobufMecanumDriveWheelPositions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtobufMecanumDriveWheelPositions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.front_left_){}
    , decltype(_impl_.front_right_){}
    , decltype(_impl_.rear_left_){}
    , decltype(_impl_.rear_right_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.front_left_, &from._impl_.front_left_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rear_right_) -
    reinterpret_cast<char*>(&_impl_.front_left_)) + sizeof(_impl_.rear_right_));
  // @@protoc_insertion_point(copy_constructor:wpi.proto.ProtobufMecanumDriveWheelPositions)
}

inline void ProtobufMecanumDriveWheelPositions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.front_left_){0}
    , decltype(_impl_.front_right_){0}
    , decltype(_impl_.rear_left_){0}
    , decltype(_impl_.rear_right_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProtobufMecanumDriveWheelPositions::~ProtobufMecanumDriveWheelPositions() {
  // @@protoc_insertion_point(destructor:wpi.proto.ProtobufMecanumDriveWheelPositions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtobufMecanumDriveWheelPositions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProtobufMecanumDriveWheelPositions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtobufMecanumDriveWheelPositions::Clear() {
// @@protoc_insertion_point(message_clear_start:wpi.proto.ProtobufMecanumDriveWheelPositions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.front_left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rear_right_) -
      reinterpret_cast<char*>(&_impl_.front_left_)) + sizeof(_impl_.rear_right_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtobufMecanumDriveWheelPositions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double front_left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.front_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double front_right = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.front_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double rear_left = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.rear_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double rear_right = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.rear_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtobufMecanumDriveWheelPositions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wpi.proto.ProtobufMecanumDriveWheelPositions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double front_left = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_front_left = this->_internal_front_left();
  uint64_t raw_front_left;
  memcpy(&raw_front_left, &tmp_front_left, sizeof(tmp_front_left));
  if (raw_front_left != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_front_left(), target);
  }

  // double front_right = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_front_right = this->_internal_front_right();
  uint64_t raw_front_right;
  memcpy(&raw_front_right, &tmp_front_right, sizeof(tmp_front_right));
  if (raw_front_right != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_front_right(), target);
  }

  // double rear_left = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rear_left = this->_internal_rear_left();
  uint64_t raw_rear_left;
  memcpy(&raw_rear_left, &tmp_rear_left, sizeof(tmp_rear_left));
  if (raw_rear_left != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_rear_left(), target);
  }

  // double rear_right = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rear_right = this->_internal_rear_right();
  uint64_t raw_rear_right;
  memcpy(&raw_rear_right, &tmp_rear_right, sizeof(tmp_rear_right));
  if (raw_rear_right != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_rear_right(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wpi.proto.ProtobufMecanumDriveWheelPositions)
  return target;
}

size_t ProtobufMecanumDriveWheelPositions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wpi.proto.ProtobufMecanumDriveWheelPositions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double front_left = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_front_left = this->_internal_front_left();
  uint64_t raw_front_left;
  memcpy(&raw_front_left, &tmp_front_left, sizeof(tmp_front_left));
  if (raw_front_left != 0) {
    total_size += 1 + 8;
  }

  // double front_right = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_front_right = this->_internal_front_right();
  uint64_t raw_front_right;
  memcpy(&raw_front_right, &tmp_front_right, sizeof(tmp_front_right));
  if (raw_front_right != 0) {
    total_size += 1 + 8;
  }

  // double rear_left = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rear_left = this->_internal_rear_left();
  uint64_t raw_rear_left;
  memcpy(&raw_rear_left, &tmp_rear_left, sizeof(tmp_rear_left));
  if (raw_rear_left != 0) {
    total_size += 1 + 8;
  }

  // double rear_right = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rear_right = this->_internal_rear_right();
  uint64_t raw_rear_right;
  memcpy(&raw_rear_right, &tmp_rear_right, sizeof(tmp_rear_right));
  if (raw_rear_right != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtobufMecanumDriveWheelPositions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtobufMecanumDriveWheelPositions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtobufMecanumDriveWheelPositions::GetClassData() const { return &_class_data_; }


void ProtobufMecanumDriveWheelPositions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtobufMecanumDriveWheelPositions*>(&to_msg);
  auto& from = static_cast<const ProtobufMecanumDriveWheelPositions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wpi.proto.ProtobufMecanumDriveWheelPositions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_front_left = from._internal_front_left();
  uint64_t raw_front_left;
  memcpy(&raw_front_left, &tmp_front_left, sizeof(tmp_front_left));
  if (raw_front_left != 0) {
    _this->_internal_set_front_left(from._internal_front_left());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_front_right = from._internal_front_right();
  uint64_t raw_front_right;
  memcpy(&raw_front_right, &tmp_front_right, sizeof(tmp_front_right));
  if (raw_front_right != 0) {
    _this->_internal_set_front_right(from._internal_front_right());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rear_left = from._internal_rear_left();
  uint64_t raw_rear_left;
  memcpy(&raw_rear_left, &tmp_rear_left, sizeof(tmp_rear_left));
  if (raw_rear_left != 0) {
    _this->_internal_set_rear_left(from._internal_rear_left());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rear_right = from._internal_rear_right();
  uint64_t raw_rear_right;
  memcpy(&raw_rear_right, &tmp_rear_right, sizeof(tmp_rear_right));
  if (raw_rear_right != 0) {
    _this->_internal_set_rear_right(from._internal_rear_right());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtobufMecanumDriveWheelPositions::CopyFrom(const ProtobufMecanumDriveWheelPositions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wpi.proto.ProtobufMecanumDriveWheelPositions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufMecanumDriveWheelPositions::IsInitialized() const {
  return true;
}

void ProtobufMecanumDriveWheelPositions::InternalSwap(ProtobufMecanumDriveWheelPositions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtobufMecanumDriveWheelPositions, _impl_.rear_right_)
      + sizeof(ProtobufMecanumDriveWheelPositions::_impl_.rear_right_)
      - PROTOBUF_FIELD_OFFSET(ProtobufMecanumDriveWheelPositions, _impl_.front_left_)>(
          reinterpret_cast<char*>(&_impl_.front_left_),
          reinterpret_cast<char*>(&other->_impl_.front_left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtobufMecanumDriveWheelPositions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kinematics_2eproto_getter, &descriptor_table_kinematics_2eproto_once,
      file_level_metadata_kinematics_2eproto[5]);
}

// ===================================================================

class ProtobufMecanumDriveWheelSpeeds::_Internal {
 public:
};

ProtobufMecanumDriveWheelSpeeds::ProtobufMecanumDriveWheelSpeeds(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wpi.proto.ProtobufMecanumDriveWheelSpeeds)
}
ProtobufMecanumDriveWheelSpeeds::ProtobufMecanumDriveWheelSpeeds(const ProtobufMecanumDriveWheelSpeeds& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtobufMecanumDriveWheelSpeeds* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.front_left_){}
    , decltype(_impl_.front_right_){}
    , decltype(_impl_.rear_left_){}
    , decltype(_impl_.rear_right_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.front_left_, &from._impl_.front_left_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rear_right_) -
    reinterpret_cast<char*>(&_impl_.front_left_)) + sizeof(_impl_.rear_right_));
  // @@protoc_insertion_point(copy_constructor:wpi.proto.ProtobufMecanumDriveWheelSpeeds)
}

inline void ProtobufMecanumDriveWheelSpeeds::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.front_left_){0}
    , decltype(_impl_.front_right_){0}
    , decltype(_impl_.rear_left_){0}
    , decltype(_impl_.rear_right_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProtobufMecanumDriveWheelSpeeds::~ProtobufMecanumDriveWheelSpeeds() {
  // @@protoc_insertion_point(destructor:wpi.proto.ProtobufMecanumDriveWheelSpeeds)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtobufMecanumDriveWheelSpeeds::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProtobufMecanumDriveWheelSpeeds::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtobufMecanumDriveWheelSpeeds::Clear() {
// @@protoc_insertion_point(message_clear_start:wpi.proto.ProtobufMecanumDriveWheelSpeeds)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.front_left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rear_right_) -
      reinterpret_cast<char*>(&_impl_.front_left_)) + sizeof(_impl_.rear_right_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtobufMecanumDriveWheelSpeeds::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double front_left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.front_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double front_right = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.front_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double rear_left = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.rear_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double rear_right = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.rear_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtobufMecanumDriveWheelSpeeds::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wpi.proto.ProtobufMecanumDriveWheelSpeeds)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double front_left = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_front_left = this->_internal_front_left();
  uint64_t raw_front_left;
  memcpy(&raw_front_left, &tmp_front_left, sizeof(tmp_front_left));
  if (raw_front_left != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_front_left(), target);
  }

  // double front_right = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_front_right = this->_internal_front_right();
  uint64_t raw_front_right;
  memcpy(&raw_front_right, &tmp_front_right, sizeof(tmp_front_right));
  if (raw_front_right != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_front_right(), target);
  }

  // double rear_left = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rear_left = this->_internal_rear_left();
  uint64_t raw_rear_left;
  memcpy(&raw_rear_left, &tmp_rear_left, sizeof(tmp_rear_left));
  if (raw_rear_left != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_rear_left(), target);
  }

  // double rear_right = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rear_right = this->_internal_rear_right();
  uint64_t raw_rear_right;
  memcpy(&raw_rear_right, &tmp_rear_right, sizeof(tmp_rear_right));
  if (raw_rear_right != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_rear_right(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wpi.proto.ProtobufMecanumDriveWheelSpeeds)
  return target;
}

size_t ProtobufMecanumDriveWheelSpeeds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wpi.proto.ProtobufMecanumDriveWheelSpeeds)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double front_left = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_front_left = this->_internal_front_left();
  uint64_t raw_front_left;
  memcpy(&raw_front_left, &tmp_front_left, sizeof(tmp_front_left));
  if (raw_front_left != 0) {
    total_size += 1 + 8;
  }

  // double front_right = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_front_right = this->_internal_front_right();
  uint64_t raw_front_right;
  memcpy(&raw_front_right, &tmp_front_right, sizeof(tmp_front_right));
  if (raw_front_right != 0) {
    total_size += 1 + 8;
  }

  // double rear_left = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rear_left = this->_internal_rear_left();
  uint64_t raw_rear_left;
  memcpy(&raw_rear_left, &tmp_rear_left, sizeof(tmp_rear_left));
  if (raw_rear_left != 0) {
    total_size += 1 + 8;
  }

  // double rear_right = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rear_right = this->_internal_rear_right();
  uint64_t raw_rear_right;
  memcpy(&raw_rear_right, &tmp_rear_right, sizeof(tmp_rear_right));
  if (raw_rear_right != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtobufMecanumDriveWheelSpeeds::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtobufMecanumDriveWheelSpeeds::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtobufMecanumDriveWheelSpeeds::GetClassData() const { return &_class_data_; }


void ProtobufMecanumDriveWheelSpeeds::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtobufMecanumDriveWheelSpeeds*>(&to_msg);
  auto& from = static_cast<const ProtobufMecanumDriveWheelSpeeds&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wpi.proto.ProtobufMecanumDriveWheelSpeeds)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_front_left = from._internal_front_left();
  uint64_t raw_front_left;
  memcpy(&raw_front_left, &tmp_front_left, sizeof(tmp_front_left));
  if (raw_front_left != 0) {
    _this->_internal_set_front_left(from._internal_front_left());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_front_right = from._internal_front_right();
  uint64_t raw_front_right;
  memcpy(&raw_front_right, &tmp_front_right, sizeof(tmp_front_right));
  if (raw_front_right != 0) {
    _this->_internal_set_front_right(from._internal_front_right());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rear_left = from._internal_rear_left();
  uint64_t raw_rear_left;
  memcpy(&raw_rear_left, &tmp_rear_left, sizeof(tmp_rear_left));
  if (raw_rear_left != 0) {
    _this->_internal_set_rear_left(from._internal_rear_left());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rear_right = from._internal_rear_right();
  uint64_t raw_rear_right;
  memcpy(&raw_rear_right, &tmp_rear_right, sizeof(tmp_rear_right));
  if (raw_rear_right != 0) {
    _this->_internal_set_rear_right(from._internal_rear_right());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtobufMecanumDriveWheelSpeeds::CopyFrom(const ProtobufMecanumDriveWheelSpeeds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wpi.proto.ProtobufMecanumDriveWheelSpeeds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufMecanumDriveWheelSpeeds::IsInitialized() const {
  return true;
}

void ProtobufMecanumDriveWheelSpeeds::InternalSwap(ProtobufMecanumDriveWheelSpeeds* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtobufMecanumDriveWheelSpeeds, _impl_.rear_right_)
      + sizeof(ProtobufMecanumDriveWheelSpeeds::_impl_.rear_right_)
      - PROTOBUF_FIELD_OFFSET(ProtobufMecanumDriveWheelSpeeds, _impl_.front_left_)>(
          reinterpret_cast<char*>(&_impl_.front_left_),
          reinterpret_cast<char*>(&other->_impl_.front_left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtobufMecanumDriveWheelSpeeds::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kinematics_2eproto_getter, &descriptor_table_kinematics_2eproto_once,
      file_level_metadata_kinematics_2eproto[6]);
}

// ===================================================================

class ProtobufSwerveDriveKinematics::_Internal {
 public:
};

void ProtobufSwerveDriveKinematics::clear_modules() {
  _impl_.modules_.Clear();
}
ProtobufSwerveDriveKinematics::ProtobufSwerveDriveKinematics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wpi.proto.ProtobufSwerveDriveKinematics)
}
ProtobufSwerveDriveKinematics::ProtobufSwerveDriveKinematics(const ProtobufSwerveDriveKinematics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtobufSwerveDriveKinematics* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.modules_){from._impl_.modules_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:wpi.proto.ProtobufSwerveDriveKinematics)
}

inline void ProtobufSwerveDriveKinematics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.modules_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProtobufSwerveDriveKinematics::~ProtobufSwerveDriveKinematics() {
  // @@protoc_insertion_point(destructor:wpi.proto.ProtobufSwerveDriveKinematics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtobufSwerveDriveKinematics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.modules_.~RepeatedPtrField();
}

void ProtobufSwerveDriveKinematics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtobufSwerveDriveKinematics::Clear() {
// @@protoc_insertion_point(message_clear_start:wpi.proto.ProtobufSwerveDriveKinematics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.modules_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtobufSwerveDriveKinematics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .wpi.proto.ProtobufTranslation2d modules = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_modules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtobufSwerveDriveKinematics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wpi.proto.ProtobufSwerveDriveKinematics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .wpi.proto.ProtobufTranslation2d modules = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_modules_size()); i < n; i++) {
    const auto& repfield = this->_internal_modules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wpi.proto.ProtobufSwerveDriveKinematics)
  return target;
}

size_t ProtobufSwerveDriveKinematics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wpi.proto.ProtobufSwerveDriveKinematics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .wpi.proto.ProtobufTranslation2d modules = 1;
  total_size += 1UL * this->_internal_modules_size();
  for (const auto& msg : this->_impl_.modules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtobufSwerveDriveKinematics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtobufSwerveDriveKinematics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtobufSwerveDriveKinematics::GetClassData() const { return &_class_data_; }


void ProtobufSwerveDriveKinematics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtobufSwerveDriveKinematics*>(&to_msg);
  auto& from = static_cast<const ProtobufSwerveDriveKinematics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wpi.proto.ProtobufSwerveDriveKinematics)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.modules_.MergeFrom(from._impl_.modules_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtobufSwerveDriveKinematics::CopyFrom(const ProtobufSwerveDriveKinematics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wpi.proto.ProtobufSwerveDriveKinematics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufSwerveDriveKinematics::IsInitialized() const {
  return true;
}

void ProtobufSwerveDriveKinematics::InternalSwap(ProtobufSwerveDriveKinematics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.modules_.InternalSwap(&other->_impl_.modules_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtobufSwerveDriveKinematics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kinematics_2eproto_getter, &descriptor_table_kinematics_2eproto_once,
      file_level_metadata_kinematics_2eproto[7]);
}

// ===================================================================

class ProtobufSwerveModulePosition::_Internal {
 public:
  static const ::wpi::proto::ProtobufRotation2d& angle(const ProtobufSwerveModulePosition* msg);
};

const ::wpi::proto::ProtobufRotation2d&
ProtobufSwerveModulePosition::_Internal::angle(const ProtobufSwerveModulePosition* msg) {
  return *msg->_impl_.angle_;
}
void ProtobufSwerveModulePosition::clear_angle() {
  if (GetArenaForAllocation() == nullptr && _impl_.angle_ != nullptr) {
    delete _impl_.angle_;
  }
  _impl_.angle_ = nullptr;
}
ProtobufSwerveModulePosition::ProtobufSwerveModulePosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wpi.proto.ProtobufSwerveModulePosition)
}
ProtobufSwerveModulePosition::ProtobufSwerveModulePosition(const ProtobufSwerveModulePosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtobufSwerveModulePosition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.angle_){nullptr}
    , decltype(_impl_.distance_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_angle()) {
    _this->_impl_.angle_ = new ::wpi::proto::ProtobufRotation2d(*from._impl_.angle_);
  }
  _this->_impl_.distance_ = from._impl_.distance_;
  // @@protoc_insertion_point(copy_constructor:wpi.proto.ProtobufSwerveModulePosition)
}

inline void ProtobufSwerveModulePosition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.angle_){nullptr}
    , decltype(_impl_.distance_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProtobufSwerveModulePosition::~ProtobufSwerveModulePosition() {
  // @@protoc_insertion_point(destructor:wpi.proto.ProtobufSwerveModulePosition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtobufSwerveModulePosition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.angle_;
}

void ProtobufSwerveModulePosition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtobufSwerveModulePosition::Clear() {
// @@protoc_insertion_point(message_clear_start:wpi.proto.ProtobufSwerveModulePosition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.angle_ != nullptr) {
    delete _impl_.angle_;
  }
  _impl_.angle_ = nullptr;
  _impl_.distance_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtobufSwerveModulePosition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .wpi.proto.ProtobufRotation2d angle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_angle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtobufSwerveModulePosition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wpi.proto.ProtobufSwerveModulePosition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double distance = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_distance = this->_internal_distance();
  uint64_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_distance(), target);
  }

  // .wpi.proto.ProtobufRotation2d angle = 2;
  if (this->_internal_has_angle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::angle(this),
        _Internal::angle(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wpi.proto.ProtobufSwerveModulePosition)
  return target;
}

size_t ProtobufSwerveModulePosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wpi.proto.ProtobufSwerveModulePosition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .wpi.proto.ProtobufRotation2d angle = 2;
  if (this->_internal_has_angle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.angle_);
  }

  // double distance = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_distance = this->_internal_distance();
  uint64_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtobufSwerveModulePosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtobufSwerveModulePosition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtobufSwerveModulePosition::GetClassData() const { return &_class_data_; }


void ProtobufSwerveModulePosition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtobufSwerveModulePosition*>(&to_msg);
  auto& from = static_cast<const ProtobufSwerveModulePosition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wpi.proto.ProtobufSwerveModulePosition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_angle()) {
    _this->_internal_mutable_angle()->::wpi::proto::ProtobufRotation2d::MergeFrom(
        from._internal_angle());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_distance = from._internal_distance();
  uint64_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    _this->_internal_set_distance(from._internal_distance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtobufSwerveModulePosition::CopyFrom(const ProtobufSwerveModulePosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wpi.proto.ProtobufSwerveModulePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufSwerveModulePosition::IsInitialized() const {
  return true;
}

void ProtobufSwerveModulePosition::InternalSwap(ProtobufSwerveModulePosition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtobufSwerveModulePosition, _impl_.distance_)
      + sizeof(ProtobufSwerveModulePosition::_impl_.distance_)
      - PROTOBUF_FIELD_OFFSET(ProtobufSwerveModulePosition, _impl_.angle_)>(
          reinterpret_cast<char*>(&_impl_.angle_),
          reinterpret_cast<char*>(&other->_impl_.angle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtobufSwerveModulePosition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kinematics_2eproto_getter, &descriptor_table_kinematics_2eproto_once,
      file_level_metadata_kinematics_2eproto[8]);
}

// ===================================================================

class ProtobufSwerveModuleState::_Internal {
 public:
  static const ::wpi::proto::ProtobufRotation2d& angle(const ProtobufSwerveModuleState* msg);
};

const ::wpi::proto::ProtobufRotation2d&
ProtobufSwerveModuleState::_Internal::angle(const ProtobufSwerveModuleState* msg) {
  return *msg->_impl_.angle_;
}
void ProtobufSwerveModuleState::clear_angle() {
  if (GetArenaForAllocation() == nullptr && _impl_.angle_ != nullptr) {
    delete _impl_.angle_;
  }
  _impl_.angle_ = nullptr;
}
ProtobufSwerveModuleState::ProtobufSwerveModuleState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wpi.proto.ProtobufSwerveModuleState)
}
ProtobufSwerveModuleState::ProtobufSwerveModuleState(const ProtobufSwerveModuleState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtobufSwerveModuleState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.angle_){nullptr}
    , decltype(_impl_.speed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_angle()) {
    _this->_impl_.angle_ = new ::wpi::proto::ProtobufRotation2d(*from._impl_.angle_);
  }
  _this->_impl_.speed_ = from._impl_.speed_;
  // @@protoc_insertion_point(copy_constructor:wpi.proto.ProtobufSwerveModuleState)
}

inline void ProtobufSwerveModuleState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.angle_){nullptr}
    , decltype(_impl_.speed_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProtobufSwerveModuleState::~ProtobufSwerveModuleState() {
  // @@protoc_insertion_point(destructor:wpi.proto.ProtobufSwerveModuleState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtobufSwerveModuleState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.angle_;
}

void ProtobufSwerveModuleState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtobufSwerveModuleState::Clear() {
// @@protoc_insertion_point(message_clear_start:wpi.proto.ProtobufSwerveModuleState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.angle_ != nullptr) {
    delete _impl_.angle_;
  }
  _impl_.angle_ = nullptr;
  _impl_.speed_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtobufSwerveModuleState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .wpi.proto.ProtobufRotation2d angle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_angle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtobufSwerveModuleState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wpi.proto.ProtobufSwerveModuleState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double speed = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed = this->_internal_speed();
  uint64_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_speed(), target);
  }

  // .wpi.proto.ProtobufRotation2d angle = 2;
  if (this->_internal_has_angle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::angle(this),
        _Internal::angle(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wpi.proto.ProtobufSwerveModuleState)
  return target;
}

size_t ProtobufSwerveModuleState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wpi.proto.ProtobufSwerveModuleState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .wpi.proto.ProtobufRotation2d angle = 2;
  if (this->_internal_has_angle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.angle_);
  }

  // double speed = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed = this->_internal_speed();
  uint64_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtobufSwerveModuleState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtobufSwerveModuleState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtobufSwerveModuleState::GetClassData() const { return &_class_data_; }


void ProtobufSwerveModuleState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtobufSwerveModuleState*>(&to_msg);
  auto& from = static_cast<const ProtobufSwerveModuleState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wpi.proto.ProtobufSwerveModuleState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_angle()) {
    _this->_internal_mutable_angle()->::wpi::proto::ProtobufRotation2d::MergeFrom(
        from._internal_angle());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed = from._internal_speed();
  uint64_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtobufSwerveModuleState::CopyFrom(const ProtobufSwerveModuleState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wpi.proto.ProtobufSwerveModuleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufSwerveModuleState::IsInitialized() const {
  return true;
}

void ProtobufSwerveModuleState::InternalSwap(ProtobufSwerveModuleState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtobufSwerveModuleState, _impl_.speed_)
      + sizeof(ProtobufSwerveModuleState::_impl_.speed_)
      - PROTOBUF_FIELD_OFFSET(ProtobufSwerveModuleState, _impl_.angle_)>(
          reinterpret_cast<char*>(&_impl_.angle_),
          reinterpret_cast<char*>(&other->_impl_.angle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtobufSwerveModuleState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kinematics_2eproto_getter, &descriptor_table_kinematics_2eproto_once,
      file_level_metadata_kinematics_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace wpi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::wpi::proto::ProtobufChassisSpeeds*
Arena::CreateMaybeMessage< ::wpi::proto::ProtobufChassisSpeeds >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wpi::proto::ProtobufChassisSpeeds >(arena);
}
template<> PROTOBUF_NOINLINE ::wpi::proto::ProtobufDifferentialDriveKinematics*
Arena::CreateMaybeMessage< ::wpi::proto::ProtobufDifferentialDriveKinematics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wpi::proto::ProtobufDifferentialDriveKinematics >(arena);
}
template<> PROTOBUF_NOINLINE ::wpi::proto::ProtobufDifferentialDriveWheelSpeeds*
Arena::CreateMaybeMessage< ::wpi::proto::ProtobufDifferentialDriveWheelSpeeds >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wpi::proto::ProtobufDifferentialDriveWheelSpeeds >(arena);
}
template<> PROTOBUF_NOINLINE ::wpi::proto::ProtobufMecanumDriveKinematics*
Arena::CreateMaybeMessage< ::wpi::proto::ProtobufMecanumDriveKinematics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wpi::proto::ProtobufMecanumDriveKinematics >(arena);
}
template<> PROTOBUF_NOINLINE ::wpi::proto::ProtobufMecanumDriveMotorVoltages*
Arena::CreateMaybeMessage< ::wpi::proto::ProtobufMecanumDriveMotorVoltages >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wpi::proto::ProtobufMecanumDriveMotorVoltages >(arena);
}
template<> PROTOBUF_NOINLINE ::wpi::proto::ProtobufMecanumDriveWheelPositions*
Arena::CreateMaybeMessage< ::wpi::proto::ProtobufMecanumDriveWheelPositions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wpi::proto::ProtobufMecanumDriveWheelPositions >(arena);
}
template<> PROTOBUF_NOINLINE ::wpi::proto::ProtobufMecanumDriveWheelSpeeds*
Arena::CreateMaybeMessage< ::wpi::proto::ProtobufMecanumDriveWheelSpeeds >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wpi::proto::ProtobufMecanumDriveWheelSpeeds >(arena);
}
template<> PROTOBUF_NOINLINE ::wpi::proto::ProtobufSwerveDriveKinematics*
Arena::CreateMaybeMessage< ::wpi::proto::ProtobufSwerveDriveKinematics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wpi::proto::ProtobufSwerveDriveKinematics >(arena);
}
template<> PROTOBUF_NOINLINE ::wpi::proto::ProtobufSwerveModulePosition*
Arena::CreateMaybeMessage< ::wpi::proto::ProtobufSwerveModulePosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wpi::proto::ProtobufSwerveModulePosition >(arena);
}
template<> PROTOBUF_NOINLINE ::wpi::proto::ProtobufSwerveModuleState*
Arena::CreateMaybeMessage< ::wpi::proto::ProtobufSwerveModuleState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wpi::proto::ProtobufSwerveModuleState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

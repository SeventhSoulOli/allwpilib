// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trajectory.proto

#include "trajectory.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace wpi {
namespace proto {
PROTOBUF_CONSTEXPR ProtobufTrajectoryState::ProtobufTrajectoryState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pose_)*/nullptr
  , /*decltype(_impl_.time_)*/0
  , /*decltype(_impl_.velocity_)*/0
  , /*decltype(_impl_.acceleration_)*/0
  , /*decltype(_impl_.curvature_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtobufTrajectoryStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtobufTrajectoryStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtobufTrajectoryStateDefaultTypeInternal() {}
  union {
    ProtobufTrajectoryState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtobufTrajectoryStateDefaultTypeInternal _ProtobufTrajectoryState_default_instance_;
PROTOBUF_CONSTEXPR ProtobufTrajectory::ProtobufTrajectory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.states_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProtobufTrajectoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtobufTrajectoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtobufTrajectoryDefaultTypeInternal() {}
  union {
    ProtobufTrajectory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtobufTrajectoryDefaultTypeInternal _ProtobufTrajectory_default_instance_;
}  // namespace proto
}  // namespace wpi
static ::_pb::Metadata file_level_metadata_trajectory_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_trajectory_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_trajectory_2eproto = nullptr;

const uint32_t TableStruct_trajectory_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufTrajectoryState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufTrajectoryState, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufTrajectoryState, _impl_.velocity_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufTrajectoryState, _impl_.acceleration_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufTrajectoryState, _impl_.pose_),
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufTrajectoryState, _impl_.curvature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufTrajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::wpi::proto::ProtobufTrajectory, _impl_.states_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::wpi::proto::ProtobufTrajectoryState)},
  { 11, -1, -1, sizeof(::wpi::proto::ProtobufTrajectory)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::wpi::proto::_ProtobufTrajectoryState_default_instance_._instance,
  &::wpi::proto::_ProtobufTrajectory_default_instance_._instance,
};

const char descriptor_table_protodef_trajectory_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020trajectory.proto\022\twpi.proto\032\020geometry2"
  "d.proto\"\213\001\n\027ProtobufTrajectoryState\022\014\n\004t"
  "ime\030\001 \001(\001\022\020\n\010velocity\030\002 \001(\001\022\024\n\014accelerat"
  "ion\030\003 \001(\001\022\'\n\004pose\030\004 \001(\0132\031.wpi.proto.Prot"
  "obufPose2d\022\021\n\tcurvature\030\005 \001(\001\"H\n\022Protobu"
  "fTrajectory\0222\n\006states\030\002 \003(\0132\".wpi.proto."
  "ProtobufTrajectoryStateB\032\n\030edu.wpi.first"
  ".math.protob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_trajectory_2eproto_deps[1] = {
  &::descriptor_table_geometry2d_2eproto,
};
static ::_pbi::once_flag descriptor_table_trajectory_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_trajectory_2eproto = {
    false, false, 299, descriptor_table_protodef_trajectory_2eproto,
    "trajectory.proto",
    &descriptor_table_trajectory_2eproto_once, descriptor_table_trajectory_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_trajectory_2eproto::offsets,
    file_level_metadata_trajectory_2eproto, file_level_enum_descriptors_trajectory_2eproto,
    file_level_service_descriptors_trajectory_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_trajectory_2eproto_getter() {
  return &descriptor_table_trajectory_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_trajectory_2eproto(&descriptor_table_trajectory_2eproto);
namespace wpi {
namespace proto {

// ===================================================================

class ProtobufTrajectoryState::_Internal {
 public:
  static const ::wpi::proto::ProtobufPose2d& pose(const ProtobufTrajectoryState* msg);
};

const ::wpi::proto::ProtobufPose2d&
ProtobufTrajectoryState::_Internal::pose(const ProtobufTrajectoryState* msg) {
  return *msg->_impl_.pose_;
}
void ProtobufTrajectoryState::clear_pose() {
  if (GetArenaForAllocation() == nullptr && _impl_.pose_ != nullptr) {
    delete _impl_.pose_;
  }
  _impl_.pose_ = nullptr;
}
ProtobufTrajectoryState::ProtobufTrajectoryState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wpi.proto.ProtobufTrajectoryState)
}
ProtobufTrajectoryState::ProtobufTrajectoryState(const ProtobufTrajectoryState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtobufTrajectoryState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pose_){nullptr}
    , decltype(_impl_.time_){}
    , decltype(_impl_.velocity_){}
    , decltype(_impl_.acceleration_){}
    , decltype(_impl_.curvature_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pose()) {
    _this->_impl_.pose_ = new ::wpi::proto::ProtobufPose2d(*from._impl_.pose_);
  }
  ::memcpy(&_impl_.time_, &from._impl_.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.curvature_) -
    reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.curvature_));
  // @@protoc_insertion_point(copy_constructor:wpi.proto.ProtobufTrajectoryState)
}

inline void ProtobufTrajectoryState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pose_){nullptr}
    , decltype(_impl_.time_){0}
    , decltype(_impl_.velocity_){0}
    , decltype(_impl_.acceleration_){0}
    , decltype(_impl_.curvature_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProtobufTrajectoryState::~ProtobufTrajectoryState() {
  // @@protoc_insertion_point(destructor:wpi.proto.ProtobufTrajectoryState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtobufTrajectoryState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pose_;
}

void ProtobufTrajectoryState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtobufTrajectoryState::Clear() {
// @@protoc_insertion_point(message_clear_start:wpi.proto.ProtobufTrajectoryState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pose_ != nullptr) {
    delete _impl_.pose_;
  }
  _impl_.pose_ = nullptr;
  ::memset(&_impl_.time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.curvature_) -
      reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.curvature_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtobufTrajectoryState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double velocity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double acceleration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .wpi.proto.ProtobufPose2d pose = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double curvature = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.curvature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtobufTrajectoryState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wpi.proto.ProtobufTrajectoryState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double time = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time = this->_internal_time();
  uint64_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_time(), target);
  }

  // double velocity = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_velocity = this->_internal_velocity();
  uint64_t raw_velocity;
  memcpy(&raw_velocity, &tmp_velocity, sizeof(tmp_velocity));
  if (raw_velocity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_velocity(), target);
  }

  // double acceleration = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration = this->_internal_acceleration();
  uint64_t raw_acceleration;
  memcpy(&raw_acceleration, &tmp_acceleration, sizeof(tmp_acceleration));
  if (raw_acceleration != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_acceleration(), target);
  }

  // .wpi.proto.ProtobufPose2d pose = 4;
  if (this->_internal_has_pose()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::pose(this),
        _Internal::pose(this).GetCachedSize(), target, stream);
  }

  // double curvature = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_curvature = this->_internal_curvature();
  uint64_t raw_curvature;
  memcpy(&raw_curvature, &tmp_curvature, sizeof(tmp_curvature));
  if (raw_curvature != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_curvature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wpi.proto.ProtobufTrajectoryState)
  return target;
}

size_t ProtobufTrajectoryState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wpi.proto.ProtobufTrajectoryState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .wpi.proto.ProtobufPose2d pose = 4;
  if (this->_internal_has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pose_);
  }

  // double time = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time = this->_internal_time();
  uint64_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    total_size += 1 + 8;
  }

  // double velocity = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_velocity = this->_internal_velocity();
  uint64_t raw_velocity;
  memcpy(&raw_velocity, &tmp_velocity, sizeof(tmp_velocity));
  if (raw_velocity != 0) {
    total_size += 1 + 8;
  }

  // double acceleration = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration = this->_internal_acceleration();
  uint64_t raw_acceleration;
  memcpy(&raw_acceleration, &tmp_acceleration, sizeof(tmp_acceleration));
  if (raw_acceleration != 0) {
    total_size += 1 + 8;
  }

  // double curvature = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_curvature = this->_internal_curvature();
  uint64_t raw_curvature;
  memcpy(&raw_curvature, &tmp_curvature, sizeof(tmp_curvature));
  if (raw_curvature != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtobufTrajectoryState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtobufTrajectoryState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtobufTrajectoryState::GetClassData() const { return &_class_data_; }


void ProtobufTrajectoryState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtobufTrajectoryState*>(&to_msg);
  auto& from = static_cast<const ProtobufTrajectoryState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wpi.proto.ProtobufTrajectoryState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pose()) {
    _this->_internal_mutable_pose()->::wpi::proto::ProtobufPose2d::MergeFrom(
        from._internal_pose());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time = from._internal_time();
  uint64_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_velocity = from._internal_velocity();
  uint64_t raw_velocity;
  memcpy(&raw_velocity, &tmp_velocity, sizeof(tmp_velocity));
  if (raw_velocity != 0) {
    _this->_internal_set_velocity(from._internal_velocity());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration = from._internal_acceleration();
  uint64_t raw_acceleration;
  memcpy(&raw_acceleration, &tmp_acceleration, sizeof(tmp_acceleration));
  if (raw_acceleration != 0) {
    _this->_internal_set_acceleration(from._internal_acceleration());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_curvature = from._internal_curvature();
  uint64_t raw_curvature;
  memcpy(&raw_curvature, &tmp_curvature, sizeof(tmp_curvature));
  if (raw_curvature != 0) {
    _this->_internal_set_curvature(from._internal_curvature());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtobufTrajectoryState::CopyFrom(const ProtobufTrajectoryState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wpi.proto.ProtobufTrajectoryState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufTrajectoryState::IsInitialized() const {
  return true;
}

void ProtobufTrajectoryState::InternalSwap(ProtobufTrajectoryState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtobufTrajectoryState, _impl_.curvature_)
      + sizeof(ProtobufTrajectoryState::_impl_.curvature_)
      - PROTOBUF_FIELD_OFFSET(ProtobufTrajectoryState, _impl_.pose_)>(
          reinterpret_cast<char*>(&_impl_.pose_),
          reinterpret_cast<char*>(&other->_impl_.pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtobufTrajectoryState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trajectory_2eproto_getter, &descriptor_table_trajectory_2eproto_once,
      file_level_metadata_trajectory_2eproto[0]);
}

// ===================================================================

class ProtobufTrajectory::_Internal {
 public:
};

ProtobufTrajectory::ProtobufTrajectory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:wpi.proto.ProtobufTrajectory)
}
ProtobufTrajectory::ProtobufTrajectory(const ProtobufTrajectory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtobufTrajectory* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.states_){from._impl_.states_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:wpi.proto.ProtobufTrajectory)
}

inline void ProtobufTrajectory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.states_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProtobufTrajectory::~ProtobufTrajectory() {
  // @@protoc_insertion_point(destructor:wpi.proto.ProtobufTrajectory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtobufTrajectory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.states_.~RepeatedPtrField();
}

void ProtobufTrajectory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtobufTrajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:wpi.proto.ProtobufTrajectory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.states_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtobufTrajectory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .wpi.proto.ProtobufTrajectoryState states = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtobufTrajectory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wpi.proto.ProtobufTrajectory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .wpi.proto.ProtobufTrajectoryState states = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_states_size()); i < n; i++) {
    const auto& repfield = this->_internal_states(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wpi.proto.ProtobufTrajectory)
  return target;
}

size_t ProtobufTrajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wpi.proto.ProtobufTrajectory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .wpi.proto.ProtobufTrajectoryState states = 2;
  total_size += 1UL * this->_internal_states_size();
  for (const auto& msg : this->_impl_.states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtobufTrajectory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtobufTrajectory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtobufTrajectory::GetClassData() const { return &_class_data_; }


void ProtobufTrajectory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtobufTrajectory*>(&to_msg);
  auto& from = static_cast<const ProtobufTrajectory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wpi.proto.ProtobufTrajectory)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.states_.MergeFrom(from._impl_.states_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtobufTrajectory::CopyFrom(const ProtobufTrajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wpi.proto.ProtobufTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtobufTrajectory::IsInitialized() const {
  return true;
}

void ProtobufTrajectory::InternalSwap(ProtobufTrajectory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.states_.InternalSwap(&other->_impl_.states_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtobufTrajectory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_trajectory_2eproto_getter, &descriptor_table_trajectory_2eproto_once,
      file_level_metadata_trajectory_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace wpi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::wpi::proto::ProtobufTrajectoryState*
Arena::CreateMaybeMessage< ::wpi::proto::ProtobufTrajectoryState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wpi::proto::ProtobufTrajectoryState >(arena);
}
template<> PROTOBUF_NOINLINE ::wpi::proto::ProtobufTrajectory*
Arena::CreateMaybeMessage< ::wpi::proto::ProtobufTrajectory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wpi::proto::ProtobufTrajectory >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

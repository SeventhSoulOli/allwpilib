[
  {
    "name": "Getting Started",
    "description": "An example program which demonstrates the simplest autonomous and teleoperated routines.",
    "tags": [
      "Basic Robot"
    ],
    "foldername": "gettingstarted",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "Tank Drive",
    "description": "Demonstrate the use of the DifferentialDrive class doing teleop driving with tank steering",
    "tags": [
      "Basic Robot",
      "Differential Drive",
      "Joystick"
    ],
    "foldername": "tankdrive",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "Arcade Drive",
    "description": "Demonstrates the use of the DifferentialDrive class to drive a robot with Arcade Drive.",
    "tags": [
      "Basic Robot",
      "Differential Drive",
      "Joystick"
    ],
    "foldername": "arcadedrive",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "Mecanum Drive",
    "description": "Demonstrate the use of the MecanumDrive class doing teleop driving with Mecanum steering",
    "tags": [
      "Basic Robot",
      "Mecanum Drive",
      "Joystick"
    ],
    "foldername": "mecanumdrive",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "PDP CAN Monitoring",
    "description": "Demonstrate using CAN to monitor the voltage, current, and temperature in the Power Distribution Panel.",
    "tags": [
      "Hardware",
      "PDP",
      "SmartDashboard"
    ],
    "foldername": "canpdp",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "Solenoids",
    "description": "Demonstrate controlling a single and double solenoid from Joystick buttons.",
    "tags": [
      "Hardware",
      "Joystick",
      "Pneumatics"
    ],
    "foldername": "solenoid",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "Encoder",
    "description": "Demonstrate displaying the value of a quadrature encoder on the SmartDashboard.",
    "tags": [
      "Hardware",
      "Encoder",
      "SmartDashboard"
    ],
    "foldername": "encoder",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "EventLoop",
    "description": "Demonstrate managing a ball system using EventLoop and BooleanEvent.",
    "tags": [
      "Basic Robot",
      "Flywheel",
      "EventLoop"
    ],
    "foldername": "eventloop",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "Relay",
    "description": "Demonstrate controlling a Relay from Joystick buttons.",
    "tags": [
      "Hardware",
      "Relay",
      "Joystick"
    ],
    "foldername": "relay",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "Ultrasonic",
    "description": "Demonstrate using the Ultrasonic class with a ping-response ultrasonic sensor.",
    "tags": [
      "Hardware",
      "Ultrasonic",
      "SmartDashboard",
      "Shuffleboard"
    ],
    "foldername": "ultrasonic",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "Ultrasonic PID",
    "description": "Demonstrate maintaining a set distance using an ultrasonic sensor and PID Control.",
    "tags": [
      "Basic Robot",
      "Ultrasonic",
      "PID",
      "Differential Drive"
    ],
    "foldername": "ultrasonicpid",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "Potentiometer PID",
    "description": "An example to demonstrate the use of a potentiometer and PID control to maintain elevator position setpoints.",
    "tags": [
      "Basic Robot",
      "Analog",
      "Elevator",
      "PID",
      "Joystick"
    ],
    "foldername": "potentiometerpid",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "Elevator with trapezoid profiled PID",
    "description": "Demonstrate the use of trapezoid profiles with a smart motor controller's PID to reach elevator position setpoints.",
    "tags": [
      "Basic Robot",
      "Elevator",
      "Trapezoid Profile",
      "Smart Motor Controller",
      "Joystick"
    ],
    "foldername": "elevatortrapezoidprofile",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "Elevator with profiled PID controller",
    "description": "An example to demonstrate the use of an encoder and trapezoid profiled PID control to reach elevator position setpoints.",
    "tags": [
      "Basic Robot",
      "Elevator",
      "Profiled PID",
      "Joystick"
    ],
    "foldername": "elevatorprofiledpid",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "Gyro",
    "description": "An example program showing how to drive straight using a gyro sensor.",
    "tags": [
      "Basic Robot",
      "Differential Drive",
      "PID",
      "Gyro",
      "Analog",
      "Joystick"
    ],
    "foldername": "gyro",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "Gyro Mecanum",
    "description": "An example program showing how to perform mecanum drive with field oriented controls.",
    "tags": [
      "Basic Robot",
      "Mecanum Drive",
      "Gyro",
      "Analog",
      "Joystick"
    ],
    "foldername": "gyromecanum",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "HID Rumble",
    "description": "An example program showing how to make human interface devices rumble.",
    "tags": [
      "Hardware",
      "XboxController"
    ],
    "foldername": "hidrumble",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "Mechanism2d",
    "description": "An example usage of Mechanism2d to display mechanism states on a dashboard.",
    "tags": [
      "Basic Robot",
      "Elevator",
      "Arm",
      "Analog",
      "Joystick",
      "SmartDashboard",
      "Mechanism2d"
    ],
    "foldername": "mechanism2d",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "Motor Control",
    "description": "Demonstrate controlling a single motor with a Joystick and displaying the net movement of the motor using an encoder.",
    "tags": [
      "Basic Robot",
      "Encoder",
      "SmartDashboard",
      "Joystick"
    ],
    "foldername": "motorcontrol",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "GearsBot",
    "description": "A fully functional example CommandBased program for WPIs GearsBot robot, ported to the new CommandBased library. This code can run on your computer if it supports simulation.",
    "tags": [
      "Complete Robot",
      "Command-based",
      "Differential Drive",
      "Elevator",
      "Arm",
      "Analog",
      "Digital Input",
      "SmartDashboard",
      "XboxController"
    ],
    "foldername": "gearsbot",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "Simple Vision",
    "description": "Demonstrate the use of the CameraServer class to stream from a USB Webcam without processing the images.",
    "tags": [
      "Vision"
    ],
    "foldername": "quickvision",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "Intermediate Vision",
    "description": "An example program that acquires images from an attached USB camera and adds some annotation to the image as you might do for showing operators the result of some image recognition, and sends it to the dashboard for display.",
    "tags": [
      "Vision"
    ],
    "foldername": "intermediatevision",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "Axis Camera Sample",
    "description": "An example program that acquires images from an Axis network camera and adds some annotation to the image as you might do for showing operators the result of some image recognition, and sends it to the dashboard for display. This demonstrates the use of the AxisCamera class.",
    "tags": [
      "Vision"
    ],
    "foldername": "axiscamera",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "AprilTags Vision",
    "description": "on-roboRIO detection of AprilTags using an attached USB camera.",
    "tags": [
      "Vision",
      "AprilTags"
    ],
    "foldername": "apriltagsvision",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "Shuffleboard Sample",
    "description": "An example program that adds data to various Shuffleboard tabs that demonstrates the Shuffleboard API",
    "tags": [
      "Basic Robot",
      "Differential Drive",
      "Elevator",
      "Analog",
      "Encoder",
      "Shuffleboard"
    ],
    "foldername": "shuffleboard",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "'Traditional' Hatchbot",
    "description": "A fully-functional command-based hatchbot for the 2019 game using the new command framework.  Written in the 'traditional' style, i.e. commands are given their own classes.",
    "tags": [
      "Complete Robot",
      "Command-based",
      "Differential Drive",
      "Encoder",
      "Pneumatics",
      "Shuffleboard",
      "Sendable",
      "DataLog",
      "XboxController"
    ],
    "foldername": "hatchbottraditional",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "'Inlined' Hatchbot",
    "description": "A fully-functional command-based hatchbot for the 2019 game using the new command framework.  Written in the 'inlined' style, i.e. many commands are defined inline with lambdas.",
    "tags": [
      "Complete Robot",
      "Command-based",
      "Differential Drive",
      "Encoder",
      "Pneumatics",
      "Shuffleboard",
      "Sendable",
      "DataLog",
      "PS4Controller"
    ],
    "foldername": "hatchbotinlined",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "Rapid React Command Bot",
    "description": "A fully-functional command-based fender bot for the 2022 game using the new command framework.",
    "tags": [
      "Complete Robot",
      "Command-based",
      "Differential Drive",
      "Intake",
      "Flywheel",
      "Encoder",
      "Pneumatics",
      "Digital Input",
      "PID",
      "XboxController"
    ],
    "foldername": "rapidreactcommandbot",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "Select Command Example",
    "description": "An example showing how to use the SelectCommand class from the new command framework.",
    "tags": [
      "Command-based"
    ],
    "foldername": "selectcommand",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "Frisbeebot",
    "description": "An example robot project for a simple frisbee shooter for the 2013 FRC game, Ultimate Ascent, demonstrating use of PID functionality in the command framework",
    "tags": [
      "Complete Robot",
      "Command-based",
      "Differential Drive",
      "Flywheel",
      "Encoder",
      "XboxController",
      "PID"
    ],
    "foldername": "frisbeebot",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "Gyro Drive Commands",
    "description": "An example command-based robot project demonstrating simple PID functionality utilizing a gyroscope to keep a robot driving straight and to turn to specified angles.",
    "tags": [
      "Command-based",
      "Differential Drive",
      "Encoder",
      "PS4Controller",
      "PID",
      "Profiled PID",
      "Gyro"
    ],
    "foldername": "gyrodrivecommands",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "SwerveBot",
    "description": "An example program for a swerve drive that uses swerve drive kinematics and odometry.",
    "tags": [
      "Swerve Drive",
      "Odometry",
      "XboxController",
      "Gyro",
      "Encoder"
    ],
    "foldername": "swervebot",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "MecanumBot",
    "description": "An example program for a mecanum drive that uses mecanum drive kinematics and odometry.",
    "tags": [
      "Mecanum Drive",
      "Odometry",
      "Encoder",
      "Gyro",
      "XboxController"
    ],
    "foldername": "mecanumbot",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "DifferentialDriveBot",
    "description": "An example program for a differential drive that uses differential drive kinematics and odometry.",
    "tags": [
      "Differential Drive",
      "Odometry",
      "Encoder",
      "Gyro",
      "XboxController"
    ],
    "foldername": "differentialdrivebot",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "RamseteCommand",
    "description": "An example command-based robot demonstrating the use of a RamseteCommand to follow a pregenerated trajectory.",
    "tags": [
      "Differential Drive",
      "Command-based",
      "Ramsete",
      "Trajectory",
      "Path Following",
      "Odometry",
      "Encoder",
      "Gyro",
      "XboxController"
    ],
    "foldername": "ramsetecommand",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "Arcade Drive Xbox Controller",
    "description": "Demonstrates the use of the DifferentialDrive class to drive a robot with Arcade Drive and an Xbox Controller",
    "tags": [
      "Basic Robot",
      "Differential Drive",
      "XboxController"
    ],
    "foldername": "arcadedrivexboxcontroller",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "Tank Drive Xbox Controller",
    "description": "Demonstrates the use of the DifferentialDrive class to drive a robot with Tank Drive and an Xbox Controller",
    "tags": [
      "Basic Robot",
      "Differential Drive",
      "XboxController"
    ],
    "foldername": "tankdrivexboxcontroller",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "Duty Cycle Encoder",
    "description": "Demonstrates the use of the Duty Cycle Encoder class",
    "tags": [
      "Hardware",
      "Duty Cycle",
      "Encoder",
      "SmartDashboard"
    ],
    "foldername": "dutycycleencoder",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "Duty Cycle Input",
    "description": "Demonstrates the use of the Duty Cycle class",
    "tags": [
      "Hardware",
      "Duty Cycle",
      "SmartDashboard"
    ],
    "foldername": "dutycycleinput",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "Addressable LED",
    "description": "Demonstrates the use of the Addressable LED class",
    "tags": [
      "Hardware",
      "Basic Robot",
      "AddressableLEDs"
    ],
    "foldername": "addressableled",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "DMA",
    "description": "Demonstrates the use of the DMA class",
    "tags": [
      "Hardware",
      "DMA",
      "SmartDashboard"
    ],
    "foldername": "dma",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "ArmBot",
    "description": "An example command-based robot demonstrating the use of a ProfiledPIDSubsystem to control an arm.",
    "tags": [
      "Command-based",
      "Arm",
      "Encoder",
      "Profiled PID",
      "XboxController",
      "Differential Drive"
    ],
    "foldername": "armbot",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "ArmBotOffboard",
    "description": "An example command-based robot demonstrating the use of a TrapezoidProfileSubsystem to control an arm with an offboard PID.",
    "tags": [
      "Command-based",
      "Arm",
      "Smart Motor Controller",
      "Trapezoid Profile",
      "XboxController",
      "Differential Drive"
    ],
    "foldername": "armbotoffboard",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "DriveDistanceOffboard",
    "description": "An example command-based robot demonstrating the use of a TrapezoidProfileCommand to drive a robot a set distance with offboard PID on the drive.",
    "tags": [
      "Command-based",
      "Differential Drive",
      "Trapezoid Profile",
      "Smart Motor Controller",
      "XboxController"
    ],
    "foldername": "drivedistanceoffboard",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "MecanumControllerCommand",
    "description": "An example command-based robot demonstrating the use of a MecanumControllerCommand to follow a pregenerated trajectory.",
    "tags": [
      "Command-based",
      "Mecanum Drive",
      "Gyro",
      "Encoder",
      "Odometry",
      "Trajectory",
      "Path Following",
      "XboxController"
    ],
    "foldername": "mecanumcontrollercommand",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "SwerveControllerCommand",
    "description": "An example command-based robot demonstrating the use of a SwerveControllerCommand to follow a pregenerated trajectory.",
    "tags": [
      "Command-based",
      "Swerve Drive",
      "Gyro",
      "Encoder",
      "Odometry",
      "Trajectory",
      "Path Following",
      "XboxController"
    ],
    "foldername": "swervecontrollercommand",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "RamseteController",
    "description": "An example robot demonstrating the use of RamseteController.",
    "tags": [
      "Basic Robot",
      "Differential Drive",
      "Ramsete",
      "PID",
      "Odometry",
      "Path Following",
      "Trajectory",
      "XboxController"
    ],
    "foldername": "ramsetecontroller",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "StateSpaceFlywheel",
    "description": "An example state-space controller for a flywheel.",
    "tags": [
      "Basic Robot",
      "Flywheel",
      "State-Space",
      "LQR",
      "Encoder",
      "Joystick"
    ],
    "foldername": "statespaceflywheel",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "StateSpaceFlywheelSysId",
    "description": "An example state-space controller for controlling a flywheel with System Identification.",
    "tags": [
      "Basic Robot",
      "Flywheel",
      "SysId",
      "State-Space",
      "LQR",
      "Encoder",
      "Joystick"
    ],
    "foldername": "statespaceflywheelsysid",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "StateSpaceElevator",
    "description": "An example state-space controller for controlling an elevator.",
    "tags": [
      "Basic Robot",
      "Elevator",
      "State-Space",
      "LQR",
      "Encoder",
      "Joystick"
    ],
    "foldername": "statespaceelevator",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "StateSpaceArm",
    "description": "An example state-space controller for controlling an arm.",
    "tags": [
      "Basic Robot",
      "Arm",
      "State-Space",
      "LQR",
      "Encoder",
      "Joystick"
    ],
    "foldername": "statespacearm",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "SimpleDifferentialDriveSimulation",
    "description": "An example of a minimal drivetrain simulation project without the command-based library.",
    "tags": [
      "Differential Drive",
      "State-Space",
      "Ramsete",
      "Path Following",
      "Trajectory",
      "Encoder",
      "XboxController",
      "Simulation"
    ],
    "foldername": "simpledifferentialdrivesimulation",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "StateSpaceDriveSimulation",
    "description": "An example of drivetrain simulation in combination with a RAMSETE path following controller and the Field2d class.",
    "tags": [
      "Command-based",
      "Differential Drive",
      "State-Space",
      "XboxController",
      "Simulation"
    ],
    "foldername": "statespacedifferentialdrivesimulation",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "ElevatorSimulation",
    "description": "Demonstrates the use of physics simulation with a simple elevator.",
    "tags": [
      "Basic Robot",
      "Elevator",
      "State-Space",
      "Simulation",
      "Mechanism2d"
    ],
    "foldername": "elevatorsimulation",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "ArmSimulation",
    "description": "Demonstrates the use of physics simulation with a simple single-jointedarm.",
    "tags": [
      "Basic Robot",
      "Arm",
      "State-Space",
      "Simulation",
      "Mechanism2d",
      "Preferences"
    ],
    "foldername": "armsimulation",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "UnitTesting",
    "description": "Demonstrates basic unit testing for a robot project.",
    "tags": [
      "Intake",
      "Pneumatics"
    ],
    "foldername": "unittest",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "DifferentialDrivePoseEstimator",
    "description": "Demonstrates the use of the DifferentialDrivePoseEstimator as a replacement for differential drive odometry.",
    "tags": [
      "Differential Drive",
      "State-Space",
      "Pose Estimator",
      "Vision",
      "PID",
      "XboxController"
    ],
    "foldername": "differentialdriveposeestimator",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "MecanumDrivePoseEstimator",
    "description": "Demonstrates the use of the MecanumDrivePoseEstimator as a replacement for mecanum drive odometry.",
    "tags": [
      "Mecanum Drive",
      "State-Space",
      "Pose Estimator",
      "Vision",
      "PID",
      "XboxController"
    ],
    "foldername": "mecanumdriveposeestimator",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "SwerveDrivePoseEstimator",
    "description": "Demonstrates the use of the SwerveDrivePoseEstimator as a replacement for swerve drive odometry.",
    "tags": [
      "Swerve Drive",
      "State-Space",
      "Pose Estimator",
      "Vision",
      "PID",
      "XboxController"
    ],
    "foldername": "swervedriveposeestimator",
    "gradlebase": "java",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "RomiReference",
    "description": "An example command-based robot program that can be used with the Romi reference robot design.",
    "tags": [
      "Romi",
      "Command-based",
      "Differential Drive",
      "Digital Input",
      "Joystick"
    ],
    "foldername": "romireference",
    "gradlebase": "javaromi",
    "mainclass": "Main",
    "commandversion": 2
  },
  {
    "name": "Digital Communication Sample",
    "description": "An example program that communicates with external devices (such as an Arduino) using the roboRIO's DIO",
    "tags": [
      "Hardware",
      "Digital Output"
    ],
    "foldername": "digitalcommunication",
    "gradlebase": "java",
    "commandversion": 2,
    "mainclass": "Main"
  },
  {
    "name": "I2C Communication Sample",
    "description": "An example program that communicates with external devices (such as an Arduino) using the roboRIO's I2C port",
    "tags": [
      "Hardware",
      "I2C"
    ],
    "foldername": "i2ccommunication",
    "gradlebase": "java",
    "commandversion": 2,
    "mainclass": "Main"
  }
]

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Thad House <thadhouse1@gmail.com>
Date: Wed, 30 Oct 2024 20:15:43 -0700
Subject: [PATCH 5/5] Generate file descriptor protos

---
 generator/nanopb_generator.py | 25 +++++++++++++++++++++++++
 pb.h                          |  8 ++++++++
 2 files changed, 33 insertions(+)

diff --git a/generator/nanopb_generator.py b/generator/nanopb_generator.py
index c7a0d0f1f2fb3f5da9a59373ace20c87bad35441..eada6191b12671aeaabced3a75072a69c449af1b 100755
--- a/generator/nanopb_generator.py
+++ b/generator/nanopb_generator.py
@@ -2046,6 +2046,8 @@ class ProtoFile:
             # no %s specified - use whatever was passed in as options.libformat
             yield options.libformat
         yield '\n'
+        yield "#include <span>\n"
+        yield "#include <string_view>\n"
 
         for incfile in self.file_options.include:
             # allow including system headers
@@ -2128,6 +2130,8 @@ class ProtoFile:
                 yield msg.fields_declaration(self.dependencies) + '\n'
             for msg in self.messages:
                 yield 'const pb_msgdesc_t *get_%s_msg(void);\n' % Globals.naming_style.type_name(msg.name)
+                yield 'std::span<const uint8_t> get_%s_file_descriptor(void);\n' % Globals.naming_style.type_name(msg.name)
+                yield 'std::string_view get_%s_name(void);\n' % Globals.naming_style.type_name(msg.name)
             yield '\n'
 
             yield '/* Maximum encoded size of messages (where known) */\n'
@@ -2252,6 +2256,23 @@ class ProtoFile:
         yield '#endif\n'
         yield '\n'
 
+        yield "#include <span>\n"
+        yield "#include <string_view>\n"
+
+        yield "static const uint8_t file_descriptor[] {\n"
+
+        line_count = 0
+
+        for b in self.fdesc.SerializeToString():
+            yield '0x' + format(b, '02x') + ','
+            line_count += 1
+            if line_count == 10:
+                yield '\n'
+                line_count = 0
+        yield '\n'
+
+        yield "};\n"
+
         # Check if any messages exceed the 64 kB limit of 16-bit pb_size_t
         exceeds_64kB = []
         for msg in self.messages:
@@ -2268,7 +2289,11 @@ class ProtoFile:
 
         # Generate the message field definitions (PB_BIND() call)
         for msg in self.messages:
+            yield 'static const char %s_name[] = "%s";\n' % (msg.name, msg.name)
+            yield 'std::string_view get_%s_name(void) { return %s_name; }\n' % (msg.name, msg.name)
+            yield 'std::span<const uint8_t> get_%s_file_descriptor(void) { return file_descriptor; }\n' % msg.name
             yield msg.fields_definition(self.dependencies) + '\n\n'
+            
 
         # Generate pb_extension_type_t definitions if extensions are used in proto file
         for ext in self.extensions:
diff --git a/pb.h b/pb.h
index 476a124a5874bd71ea4cabc8a0e1fea86216bde0..95549b7ba1066b1775e08445ad4b62f831cd128e 100644
--- a/pb.h
+++ b/pb.h
@@ -89,6 +89,9 @@
 #include <string.h>
 #include <limits.h>
 
+#include <span>
+#include <string_view>
+
 #ifdef PB_ENABLE_MALLOC
 #include <stdlib.h>
 #endif
@@ -329,6 +332,9 @@ struct pb_msgdesc_s {
     pb_size_t field_count;
     pb_size_t required_field_count;
     pb_size_t largest_tag;
+
+    std::span<const uint8_t> file_descriptor;
+    std::string_view proto_name;
 };
 
 /* Iterator for message descriptor */
@@ -520,6 +526,8 @@ struct pb_extension_s {
        0 msgname ## _FIELDLIST(PB_GEN_FIELD_COUNT, structname), \
        0 msgname ## _FIELDLIST(PB_GEN_REQ_FIELD_COUNT, structname), \
        0 msgname ## _FIELDLIST(PB_GEN_LARGEST_TAG, structname), \
+       get_ ## structname ## _file_descriptor(), \
+       get_ ## structname ## _name(),  \
     }; \
     const pb_msgdesc_t* get_ ## structname ## _msg(void) { return &(structname ## _msg); } \
     msgname ## _FIELDLIST(PB_GEN_FIELD_INFO_ASSERT_ ## width, structname)

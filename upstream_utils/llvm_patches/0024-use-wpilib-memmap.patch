From f5a638ab093513b6bffd4054d77795eb206e11a2 Mon Sep 17 00:00:00 2001
From: PJ Reiniger <pj.reiniger@gmail.com>
Date: Tue, 3 May 2022 23:13:45 -0400
Subject: [PATCH 24/37] use wpilib memmap

---
 llvm/include/llvm/Support/MemoryBuffer.h |  16 ----
 llvm/lib/Support/MemoryBuffer.cpp        | 101 +++--------------------
 2 files changed, 10 insertions(+), 107 deletions(-)

diff --git a/llvm/include/llvm/Support/MemoryBuffer.h b/llvm/include/llvm/Support/MemoryBuffer.h
index a2030c23839b..6d7d75bcf96f 100644
--- a/llvm/include/llvm/Support/MemoryBuffer.h
+++ b/llvm/include/llvm/Support/MemoryBuffer.h
@@ -132,15 +132,6 @@ public:
   static std::unique_ptr<MemoryBuffer>
   getMemBufferCopy(span<const uint8_t> InputData, const std::string_view &BufferName = "");
 
-  /// Read all of stdin into a file buffer, and return it.
-  static ErrorOr<std::unique_ptr<MemoryBuffer>> getSTDIN();
-
-  /// Open the specified file as a MemoryBuffer, or open stdin if the Filename
-  /// is "-".
-  static ErrorOr<std::unique_ptr<MemoryBuffer>>
-  getFileOrSTDIN(const std::string_view &Filename, int64_t FileSize = -1,
-                 bool RequiresNullTerminator = true);
-
   /// Map a subrange of the specified file as a MemoryBuffer.
   static ErrorOr<std::unique_ptr<MemoryBuffer>>
   getFileSlice(const std::string_view &Filename, uint64_t MapSize, uint64_t Offset,
@@ -214,12 +205,10 @@ private:
   //   WritableMemoryBuffer::getXXX()
   // and be surprised that they got a read-only Buffer.
   using MemoryBuffer::getFileAsStream;
-  using MemoryBuffer::getFileOrSTDIN;
   using MemoryBuffer::getMemBuffer;
   using MemoryBuffer::getMemBufferCopy;
   using MemoryBuffer::getOpenFile;
   using MemoryBuffer::getOpenFileSlice;
-  using MemoryBuffer::getSTDIN;
 };
 
 /// This class is an extension of MemoryBuffer, which allows write access to
@@ -259,12 +248,10 @@ private:
   //   WritableMemoryBuffer::getXXX()
   // and be surprised that they got a read-only Buffer.
   using MemoryBuffer::getFileAsStream;
-  using MemoryBuffer::getFileOrSTDIN;
   using MemoryBuffer::getMemBuffer;
   using MemoryBuffer::getMemBufferCopy;
   using MemoryBuffer::getOpenFile;
   using MemoryBuffer::getOpenFileSlice;
-  using MemoryBuffer::getSTDIN;
 };
 
 class MemoryBufferRef {
@@ -287,9 +274,6 @@ public:
   size_t getBufferSize() const { return Buffer.size(); }
 };
 
-// Create wrappers for C Binding types (see CBindingWrapping.h).
-DEFINE_SIMPLE_CONVERSION_FUNCTIONS(MemoryBuffer, LLVMMemoryBufferRef)
-
 } // end namespace llvm
 
 #endif // LLVM_SUPPORT_MEMORYBUFFER_H
diff --git a/llvm/lib/Support/MemoryBuffer.cpp b/llvm/lib/Support/MemoryBuffer.cpp
index cbd1cf047815..df18f4a282ab 100644
--- a/llvm/lib/Support/MemoryBuffer.cpp
+++ b/llvm/lib/Support/MemoryBuffer.cpp
@@ -150,17 +150,6 @@ MemoryBuffer::getMemBufferCopy(span<const uint8_t> InputData, std::string_view B
   return nullptr;
 }
 
-ErrorOr<std::unique_ptr<MemoryBuffer>>
-MemoryBuffer::getFileOrSTDIN(std::string_view Filename, int64_t FileSize,
-                             bool RequiresNullTerminator) {
-  SmallString<256> NameBuf;
-  std::string_view NameRef = Filename.tostd::string_view(NameBuf);
-
-  if (NameRef == "-")
-    return getSTDIN();
-  return getFile(Filename, FileSize, RequiresNullTerminator);
-}
-
 ErrorOr<std::unique_ptr<MemoryBuffer>>
 MemoryBuffer::getFileSlice(std::string_view FilePath, uint64_t MapSize,
                            uint64_t Offset, bool IsVolatile) {
@@ -175,27 +164,24 @@ MemoryBuffer::getFileSlice(std::string_view FilePath, uint64_t MapSize,
 namespace {
 
 template <typename MB>
-constexpr sys::fs::mapped_file_region::mapmode Mapmode =
-    sys::fs::mapped_file_region::readonly;
+constexpr auto kMapMode = MappedFileRegion::kReadOnly;
 template <>
-constexpr sys::fs::mapped_file_region::mapmode Mapmode<MemoryBuffer> =
-    sys::fs::mapped_file_region::readonly;
+constexpr auto kMapMode<MemoryBuffer> = MappedFileRegion::kReadOnly;
 template <>
-constexpr sys::fs::mapped_file_region::mapmode Mapmode<WritableMemoryBuffer> =
-    sys::fs::mapped_file_region::priv;
+constexpr auto kMapMode<WritableMemoryBuffer> = MappedFileRegion::kPriv;
 template <>
-constexpr sys::fs::mapped_file_region::mapmode
-    Mapmode<WriteThroughMemoryBuffer> = sys::fs::mapped_file_region::readwrite;
+constexpr auto kMapMode<WriteThroughMemoryBuffer> =
+    MappedFileRegion::kReadWrite;
 
-/// Memory maps a file descriptor using sys::fs::mapped_file_region.
+/// Memory maps a file descriptor using MappedFileRegion.
 ///
 /// This handles converting the offset into a legal offset on the platform.
 template<typename MB>
 class MemoryBufferMMapFile : public MB {
-  sys::fs::mapped_file_region MFR;
+  MappedFileRegion MFR;
 
   static uint64_t getLegalMapOffset(uint64_t Offset) {
-    return Offset & ~(sys::fs::mapped_file_region::alignment() - 1);
+    return Offset & ~(MappedFileRegion::GetAlignment() - 1);
   }
 
   static uint64_t getLegalMapSize(uint64_t Len, uint64_t Offset) {
@@ -209,8 +195,8 @@ class MemoryBufferMMapFile : public MB {
 public:
   MemoryBufferMMapFile(bool RequiresNullTerminator, sys::fs::file_t FD, uint64_t Len,
                        uint64_t Offset, std::error_code &EC)
-      : MFR(FD, Mapmode<MB>, getLegalMapSize(Len, Offset),
-            getLegalMapOffset(Offset), EC) {
+      : MFR(FD, getLegalMapSize(Len, Offset),
+            getLegalMapOffset(Offset), kMapMode<MB>, EC) {
     if (!EC) {
       const uint8_t *Start = getStart(Len, Offset);
       MemoryBuffer::init(Start, Start + Len, RequiresNullTerminator);
@@ -329,61 +315,6 @@ WritableMemoryBuffer::getNewMemBuffer(size_t Size, std::string_view BufferName)
   return SB;
 }
 
-static bool shouldUseMmap(sys::fs::file_t FD,
-                          size_t FileSize,
-                          size_t MapSize,
-                          off_t Offset,
-                          bool RequiresNullTerminator,
-                          int PageSize,
-                          bool IsVolatile) {
-  // mmap may leave the buffer without null terminator if the file size changed
-  // by the time the last page is mapped in, so avoid it if the file size is
-  // likely to change.
-  if (IsVolatile && RequiresNullTerminator)
-    return false;
-
-  // We don't use mmap for small files because this can severely fragment our
-  // address space.
-  if (MapSize < 4 * 4096 || MapSize < (unsigned)PageSize)
-    return false;
-
-  if (!RequiresNullTerminator)
-    return true;
-
-  // If we don't know the file size, use fstat to find out.  fstat on an open
-  // file descriptor is cheaper than stat on a random path.
-  // FIXME: this chunk of code is duplicated, but it avoids a fstat when
-  // RequiresNullTerminator = false and MapSize != -1.
-  if (FileSize == size_t(-1)) {
-    sys::fs::file_status Status;
-    if (sys::fs::status(FD, Status))
-      return false;
-    FileSize = Status.getSize();
-  }
-
-  // If we need a null terminator and the end of the map is inside the file,
-  // we cannot use mmap.
-  size_t End = Offset + MapSize;
-  assert(End <= FileSize);
-  if (End != FileSize)
-    return false;
-
-  // Don't try to map files that are exactly a multiple of the system page size
-  // if we need a null terminator.
-  if ((FileSize & (PageSize -1)) == 0)
-    return false;
-
-#if defined(__CYGWIN__)
-  // Don't try to map files that are exactly a multiple of the physical page size
-  // if we need a null terminator.
-  // FIXME: We should reorganize again getPageSize() on Win32.
-  if ((FileSize & (4096 - 1)) == 0)
-    return false;
-#endif
-
-  return true;
-}
-
 static ErrorOr<std::unique_ptr<WriteThroughMemoryBuffer>>
 getReadWriteFile(std::string_view Filename, uint64_t FileSize, uint64_t MapSize,
                  uint64_t Offset) {
@@ -441,8 +372,6 @@ static ErrorOr<std::unique_ptr<MB>>
 getOpenFileImpl(sys::fs::file_t FD, std::string_view Filename, uint64_t FileSize,
                 uint64_t MapSize, int64_t Offset, bool RequiresNullTerminator,
                 bool IsVolatile) {
-  static int PageSize = sys::Process::getPageSizeEstimate();
-
   // Default is to map the full file.
   if (MapSize == uint64_t(-1)) {
     // If we don't know the file size, use fstat to find out.  fstat on an open
@@ -516,16 +445,6 @@ MemoryBuffer::getOpenFileSlice(sys::fs::file_t FD, std::string_view Filename, ui
                                        IsVolatile);
 }
 
-ErrorOr<std::unique_ptr<MemoryBuffer>> MemoryBuffer::getSTDIN() {
-  // Read in all of the data from stdin, we cannot mmap stdin.
-  //
-  // FIXME: That isn't necessarily true, we should try to mmap stdin and
-  // fallback if it fails.
-  sys::ChangeStdinToBinary();
-
-  return getMemoryBufferForStream(sys::fs::getStdinHandle(), "<stdin>");
-}
-
 ErrorOr<std::unique_ptr<MemoryBuffer>>
 MemoryBuffer::getFileAsStream(const std::string_view &Filename) {
   std::error_code EC;
-- 
2.20.1.windows.1


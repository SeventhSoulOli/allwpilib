From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Colby Skeggs <skeggsc@catlin.edu>
Date: Tue, 22 Jul 2014 13:10:23 -0700
Subject: [PATCH 0191/6262] Fixed FRCSim artf2619, and misc reformatting.

Change-Id: I7133f46f88f7e2cb2451c2a6714daa8f3f368b40
---
 .../org/gazebosim/transport/Publisher.java    | 21 ++++++++++
 .../include/simulation/MainNode.h             | 33 ++++++++-------
 .../include/simulation/SimEncoder.h           | 27 +++++++------
 .../src/simulation/SimEncoder.cpp             | 40 ++++++++++---------
 .../first/wpilibj/simulation/SimEncoder.java  | 18 +++++++--
 5 files changed, 86 insertions(+), 53 deletions(-)

diff --git a/simulation/JavaGazebo/src/main/java/org/gazebosim/transport/Publisher.java b/simulation/JavaGazebo/src/main/java/org/gazebosim/transport/Publisher.java
index 8bf973e793c9d44bf8a9f521faa0b5f9d7317d54..6f9c622fe3719a5e2f0d946e576543e29e83517c 100644
--- a/simulation/JavaGazebo/src/main/java/org/gazebosim/transport/Publisher.java
+++ b/simulation/JavaGazebo/src/main/java/org/gazebosim/transport/Publisher.java
@@ -79,6 +79,27 @@ public class Publisher<T extends Message> implements PublisherRecord {
 			}
 		}
 		listeners.add(conn);
+		this.notifyAll();
+	}
+
+	public synchronized void waitForConnection() throws InterruptedException {
+		while (this.listeners.isEmpty()) {
+			this.wait();
+		}
+	}
+
+	public synchronized boolean waitForConnection(long timeout_millis) throws InterruptedException {
+		long start = System.currentTimeMillis();
+
+		while (this.listeners.isEmpty()) {
+			long remain = timeout_millis - (System.currentTimeMillis() - start);
+			if (remain <= 0) {
+				break;
+			}
+			this.wait(remain);
+		}
+
+		return !this.listeners.isEmpty();
 	}
 
 	public void setLatchMode(boolean b) {
diff --git a/wpilibc/wpilibC++Sim/include/simulation/MainNode.h b/wpilibc/wpilibC++Sim/include/simulation/MainNode.h
index 696670b1f4a6b7da33a5cbd706edd8351a65bcbd..12923c893f3ef88f7cb432f8a1b19fca1fd0dc9a 100644
--- a/wpilibc/wpilibC++Sim/include/simulation/MainNode.h
+++ b/wpilibc/wpilibC++Sim/include/simulation/MainNode.h
@@ -10,43 +10,42 @@ using namespace gazebo;
 class MainNode {
 public:
 	static MainNode* GetInstance() {
-        if (instance == NULL) {
+		if (instance == NULL) {
 			instance = new MainNode();
 		}
 		return instance;
 	}
 
-  
-    template<typename M>
-    static transport::PublisherPtr Advertise(const std::string &topic,
+	template<typename M>
+	static transport::PublisherPtr Advertise(const std::string &topic,
                                              unsigned int _queueLimit = 10,
                                              bool _latch = false) {
-        return GetInstance()->main->Advertise<M>(topic, _queueLimit, _latch);
+		return GetInstance()->main->Advertise<M>(topic, _queueLimit, _latch);
 	}
 
-    template<typename M, typename T>
-    static transport::SubscriberPtr Subscribe(const std::string &topic,
+	template<typename M, typename T>
+	static transport::SubscriberPtr Subscribe(const std::string &topic,
                             void(T::*fp)(const boost::shared_ptr<M const> &), T *obj,
                             bool _latching = false) {
-      return GetInstance()->main->Subscribe(topic, fp, obj, _latching);
+		return GetInstance()->main->Subscribe(topic, fp, obj, _latching);
 	}
 
-    template<typename M>
-    static transport::SubscriberPtr Subscribe(const std::string &topic,
+	template<typename M>
+	static transport::SubscriberPtr Subscribe(const std::string &topic,
                             void(*fp)(const boost::shared_ptr<M const> &),
                             bool _latching = false) {
-        return GetInstance()->main->Subscribe(topic, fp, _latching);
-    }
+		return GetInstance()->main->Subscribe(topic, fp, _latching);
+	}
   
-    transport::NodePtr main;
+	transport::NodePtr main;
 private:
   	static MainNode* instance;
 
 	MainNode() {
-        gazebo::transport::init();
-        main = transport::NodePtr(new transport::Node());
-        main->Init("frc");
-        gazebo::transport::run();
+		gazebo::transport::init();
+		main = transport::NodePtr(new transport::Node());
+		main->Init("frc");
+		gazebo::transport::run();
 	}
 };
 
diff --git a/wpilibc/wpilibC++Sim/include/simulation/SimEncoder.h b/wpilibc/wpilibC++Sim/include/simulation/SimEncoder.h
index 5527d3d013b793f53eadbab10d3a5a2e7d82265d..6f551d27be519cfbbebbb34201ba3386187367f6 100644
--- a/wpilibc/wpilibC++Sim/include/simulation/SimEncoder.h
+++ b/wpilibc/wpilibC++Sim/include/simulation/SimEncoder.h
@@ -5,6 +5,7 @@
 
 #include "simulation/msgs/msgs.h"
 #include <gazebo/transport/transport.hh>
+#include <gazebo/common/Time.hh>
 
 using namespace gazebo;
 
@@ -12,20 +13,20 @@ class SimEncoder {
 public:
 	SimEncoder(std::string topic);
 
-    void Reset();
-    void Start();
-    void Stop();
-    double GetPosition();
-    double GetVelocity();
-  
+	void Reset();
+	void Start();
+	void Stop();
+	double GetPosition();
+	double GetVelocity();
+
 private:
-    void sendCommand(std::string cmd);
-  
-    double position, velocity;
-    transport::SubscriberPtr posSub, velSub;
-    transport::PublisherPtr commandPub;
-    void positionCallback(const msgs::ConstFloat64Ptr &msg);
-    void velocityCallback(const msgs::ConstFloat64Ptr &msg);
+	void sendCommand(std::string cmd);
+
+	double position, velocity;
+	transport::SubscriberPtr posSub, velSub;
+	transport::PublisherPtr commandPub;
+	void positionCallback(const msgs::ConstFloat64Ptr &msg);
+	void velocityCallback(const msgs::ConstFloat64Ptr &msg);
 };
 
 #endif
diff --git a/wpilibc/wpilibC++Sim/src/simulation/SimEncoder.cpp b/wpilibc/wpilibC++Sim/src/simulation/SimEncoder.cpp
index 51602f708787e418509883277b8ba6e8b6427d97..b72b8f115290d09673b31370edc8daedd104207a 100644
--- a/wpilibc/wpilibC++Sim/src/simulation/SimEncoder.cpp
+++ b/wpilibc/wpilibC++Sim/src/simulation/SimEncoder.cpp
@@ -3,50 +3,52 @@
 #include "simulation/MainNode.h"
 
 SimEncoder::SimEncoder(std::string topic) {
-    commandPub = MainNode::Advertise<msgs::GzString>("~/simulator/"+topic+"/control");
-  
-    posSub = MainNode::Subscribe("~/simulator/"+topic+"/position",
-                                 &SimEncoder::positionCallback, this);
-    velSub = MainNode::Subscribe("~/simulator/"+topic+"/velocity",
-                                 &SimEncoder::velocityCallback, this);
+	commandPub = MainNode::Advertise<msgs::GzString>("~/simulator/"+topic+"/control");
 
-    commandPub->WaitForConnection();
-    
-    std::cout << "Initialized ~/simulator/"+topic << std::endl;
+	posSub = MainNode::Subscribe("~/simulator/"+topic+"/position",
+		                 &SimEncoder::positionCallback, this);
+	velSub = MainNode::Subscribe("~/simulator/"+topic+"/velocity",
+		                 &SimEncoder::velocityCallback, this);
+
+	if (commandPub->WaitForConnection(gazebo::common::Time(5.0))) { // Wait up to five seconds.
+		std::cout << "Initialized ~/simulator/" + topic << std::endl;
+	} else {
+		std::cerr << "Failed to initialize ~/simulator/" + topic + ": does the encoder exist?" << std::endl;
+	}
 }
 
 void SimEncoder::Reset() {
-    sendCommand("reset");
+	sendCommand("reset");
 }
 
 void SimEncoder::Start() {
-    sendCommand("start");
+	sendCommand("start");
 }
 
 void SimEncoder::Stop() {
-    sendCommand("stop");
+	sendCommand("stop");
 }
 
 double SimEncoder::GetPosition() {
-    return position;
+	return position;
 }
 
 double SimEncoder::GetVelocity() {
-    return velocity;
+	return velocity;
 }
 
 
 void SimEncoder::sendCommand(std::string cmd) {
-  msgs::GzString msg;
-  msg.set_data(cmd);
-  commandPub->Publish(msg);
+	msgs::GzString msg;
+	msg.set_data(cmd);
+	commandPub->Publish(msg);
 }
 
 
 void SimEncoder::positionCallback(const msgs::ConstFloat64Ptr &msg) {
-    position = msg->data();
+	position = msg->data();
 }
 
 void SimEncoder::velocityCallback(const msgs::ConstFloat64Ptr &msg) {
-    velocity = msg->data();
+	velocity = msg->data();
 }
diff --git a/wpilibj/wpilibJavaSim/src/main/java/edu/wpi/first/wpilibj/simulation/SimEncoder.java b/wpilibj/wpilibJavaSim/src/main/java/edu/wpi/first/wpilibj/simulation/SimEncoder.java
index 0a5f69caae7116814a91cb87d2f54e3c0231ac14..9f09f5cb6aa9f6f743e66dbfd185736859fa82d4 100644
--- a/wpilibj/wpilibJavaSim/src/main/java/edu/wpi/first/wpilibj/simulation/SimEncoder.java
+++ b/wpilibj/wpilibJavaSim/src/main/java/edu/wpi/first/wpilibj/simulation/SimEncoder.java
@@ -13,7 +13,6 @@ public class SimEncoder {
 	
 	public SimEncoder(String topic) {
 		command_pub = MainNode.advertise(topic+"/control", Msgs.String());
-		command_pub.setLatchMode(true);
 
 		MainNode.subscribe(topic+"/position", Msgs.Float64(),
 			new SubscriberCallback<Float64>() {
@@ -21,15 +20,26 @@ public class SimEncoder {
 					position = msg.getData();
 				}
 			}
-    	);
-    	
-    	MainNode.subscribe(topic+"/velocity", Msgs.Float64(),
+		);
+
+		MainNode.subscribe(topic+"/velocity", Msgs.Float64(),
 			new SubscriberCallback<Float64>() {
 				@Override public void callback(Float64 msg) {
 					velocity = msg.getData();
 				}
 			}
 		);
+
+		try {
+			if (command_pub.waitForConnection(5000)) { // Wait up to five seconds.
+				System.out.println("Initialized " + topic);
+			} else {
+				System.err.println("Failed to initialize " + topic + ": does the encoder exist?");
+			}
+		} catch (InterruptedException ex) {
+			ex.printStackTrace(); // TODO: Better way to handle this?
+			Thread.currentThread().interrupt();
+		}
 	}
 	
 	public void reset() {

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Omar Zrien <OZrien@crosstheroadelectronics.com>
Date: Sat, 6 Dec 2014 15:32:14 -0500
Subject: [PATCH 0543/6262] comment change and added SetModeSelect(int
 modeSelect,int demand) {

Change-Id: Iadac7ec70cf04cdc339771c4e919e93723cf62ec
---
 hal/lib/Athena/ctre/CanTalonSRX.cpp | 22 +++++++++++++++++++---
 hal/lib/Athena/ctre/CanTalonSRX.h   |  6 +++---
 2 files changed, 22 insertions(+), 6 deletions(-)

diff --git a/hal/lib/Athena/ctre/CanTalonSRX.cpp b/hal/lib/Athena/ctre/CanTalonSRX.cpp
index d0852008ac3a8b99cf14ff09cc08113267fab53a..d2486b00f4c01dfc5a79611d7e67f424637046bb 100644
--- a/hal/lib/Athena/ctre/CanTalonSRX.cpp
+++ b/hal/lib/Athena/ctre/CanTalonSRX.cpp
@@ -63,9 +63,8 @@
  * 			ClearIaccum()
  * 		...this is very useful in preventing integral windup and is highly recommended if using full PID to keep stability low.
  *
- * CloseLoopRampRate ramps the target of the close loop.  The units are in position per 1ms.  Set to zero to disable ramping.
- * 		So a value of 10 means allow the target input of the close loop to approach the user's demand by 10 units (ADC or encoder edges)
- * 		per 1ms.
+ * CloseLoopRampRate is in throttle units per 1ms.  Set to zero to disable ramping.
+ * 		Works the same as RampThrottle but only is in effect when a close loop mode and profile slot is selected.
  *
  * auto generated using spreadsheet and WpiClassGen.csproj
  * @link https://docs.google.com/spreadsheets/d/1OU_ZV7fZLGYUQ-Uhc8sVAmUmWTlT8XBFYK8lfjg_tac/edit#gid=1766046967
@@ -966,6 +965,23 @@ CTR_Code CanTalonSRX::SetModeSelect(int param)
 	FlushTx(toFill);
 	return CTR_OKAY;
 }
+/**
+ * @param modeSelect selects which mode.
+ * @param demand setpt or throttle or masterId to follow.
+ * @return error code, 0 iff successful.
+ * This function has the advantage of atomically setting mode and demand.
+ */
+CTR_Code CanTalonSRX::SetModeSelect(int modeSelect,int demand)
+{
+	CtreCanNode::txTask<TALON_Control_1_General_10ms_t> toFill = GetTx<TALON_Control_1_General_10ms_t>(CONTROL_1 | GetDeviceNumber());
+	if (toFill.IsEmpty()) return CTR_UnexpectedArbId;
+	toFill->ModeSelect = modeSelect;
+	toFill->DemandH = demand>>16;
+	toFill->DemandM = demand>>8;
+	toFill->DemandL = demand>>0;
+	FlushTx(toFill);
+	return CTR_OKAY;
+}
 CTR_Code CanTalonSRX::SetProfileSlotSelect(int param)
 {
 	CtreCanNode::txTask<TALON_Control_1_General_10ms_t> toFill = GetTx<TALON_Control_1_General_10ms_t>(CONTROL_1 | GetDeviceNumber());
diff --git a/hal/lib/Athena/ctre/CanTalonSRX.h b/hal/lib/Athena/ctre/CanTalonSRX.h
index 2ed5c61d00a1128edffffd7d9e9bde97846eb613..749d5055d3231defbc494c8c3ecba40eecc4eebe 100644
--- a/hal/lib/Athena/ctre/CanTalonSRX.h
+++ b/hal/lib/Athena/ctre/CanTalonSRX.h
@@ -63,9 +63,8 @@
  * 			ClearIaccum()
  * 		...this is very useful in preventing integral windup and is highly recommended if using full PID to keep stability low.
  *
- * CloseLoopRampRate ramps the target of the close loop.  The units are in position per 1ms.  Set to zero to disable ramping.
- * 		So a value of 10 means allow the target input of the close loop to approach the user's demand by 10 units (ADC or encoder edges)
- * 		per 1ms.
+ * CloseLoopRampRate is in throttle units per 1ms.  Set to zero to disable ramping.
+ * 		Works the same as RampThrottle but only is in effect when a close loop mode and profile slot is selected.
  *
  * auto generated using spreadsheet and WpiClassGen.csproj
  * @link https://docs.google.com/spreadsheets/d/1OU_ZV7fZLGYUQ-Uhc8sVAmUmWTlT8XBFYK8lfjg_tac/edit#gid=1766046967
@@ -308,6 +307,7 @@ public:
 	CTR_Code SetRevMotDuringCloseLoopEn(int param);
 	CTR_Code SetOverrideBrakeType(int param);
 	CTR_Code SetModeSelect(int param);
+	CTR_Code SetModeSelect(int modeSelect,int demand);
 	CTR_Code SetProfileSlotSelect(int param);
 	CTR_Code SetRampThrottle(int param);
 	CTR_Code SetRevFeedbackSensor(int param);

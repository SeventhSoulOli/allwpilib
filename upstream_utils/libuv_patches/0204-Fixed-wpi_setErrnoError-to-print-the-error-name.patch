From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Thomas Clark <tjclark@wpi.edu>
Date: Fri, 25 Jul 2014 16:52:00 -0400
Subject: [PATCH 0204/6262] Fixed wpi_setErrnoError to print the error name

Previously, wpi_setErrnoError and wpi_setErrnoErrorWithContext
always printed "Unknown errno" whenever a C library error
occured.

Change-Id: Ib235138eea0e83b0d7462dfd6e834e3499e3b0c5
---
 hal/include/HAL/cpp/StackTrace.hpp  |  1 -
 hal/lib/Athena/cpp/StackTrace.cpp   |  4 ----
 wpilibc/wpilibC++/lib/ErrorBase.cpp | 21 ++++++++-------------
 3 files changed, 8 insertions(+), 18 deletions(-)

diff --git a/hal/include/HAL/cpp/StackTrace.hpp b/hal/include/HAL/cpp/StackTrace.hpp
index 9e5939b88b2d80fd76d150263c13dc6e597d5431..6182e4585626f04e4cf767897364707106b36813 100644
--- a/hal/include/HAL/cpp/StackTrace.hpp
+++ b/hal/include/HAL/cpp/StackTrace.hpp
@@ -9,5 +9,4 @@
 extern "C"
 {
 	void printCurrentStackTrace();
-	bool getErrnoToName(int32_t errNo, char* name);
 }
diff --git a/hal/lib/Athena/cpp/StackTrace.cpp b/hal/lib/Athena/cpp/StackTrace.cpp
index aaedbb767211c35fc115ebb6db6c168d66b6d675..d20796ab1d5d9c8f9c92ee6764ff892c0b5be5fd 100644
--- a/hal/lib/Athena/cpp/StackTrace.cpp
+++ b/hal/lib/Athena/cpp/StackTrace.cpp
@@ -7,7 +7,3 @@
 void printCurrentStackTrace() {
   // TODO: Implement
 }
-
-bool getErrnoToName(int32_t errNo, char* name) {
-	return false; // TODO: Implement
-}
diff --git a/wpilibc/wpilibC++/lib/ErrorBase.cpp b/wpilibc/wpilibC++/lib/ErrorBase.cpp
index 88e8c9dc20c140e64a50c7a4c5348c9d0425eec9..9092d5bc6cb81d636a4341b1957d901974c06881 100644
--- a/wpilibc/wpilibC++/lib/ErrorBase.cpp
+++ b/wpilibc/wpilibC++/lib/ErrorBase.cpp
@@ -12,6 +12,7 @@
 #include "WPIErrors.h"
 
 #include <errno.h>
+#include <cstring>
 #include <cstdio>
 
 MUTEX_ID ErrorBase::_globalErrorMutex = initializeMutexNormal();
@@ -49,7 +50,7 @@ void ErrorBase::ClearError() const
 
 /**
  * @brief Set error information associated with a C library call that set an error to the "errno" global variable.
- * 
+ *
  * @param contextMessage A custom message from the code that set the error.
  * @param filename Filename of the error source
  * @param function Function of the error source
@@ -66,12 +67,7 @@ void ErrorBase::SetErrnoError(const char *contextMessage,
 	}
 	else
 	{
-		char *statName = new char[256 + 1]; // TODO: MAX_SYS_SYM_LEN or linux equivalent.
-		if (getErrnoToName(errNo, statName))
-			snprintf(err, 256, "%s (0x%08X): %s", statName, errNo, contextMessage);
-		else
-			snprintf(err, 256, "Unknown errno 0x%08X: %s", errNo, contextMessage);
-		delete [] statName;
+		snprintf(err, 256, "%s (0x%08X): %s", strerror(errNo), errNo, contextMessage);
 	}
 
 	//  Set the current error information for this object.
@@ -86,7 +82,7 @@ void ErrorBase::SetErrnoError(const char *contextMessage,
 
 /**
  * @brief Set the current error information associated from the nivision Imaq API.
- * 
+ *
  * @param success The return from the function
  * @param contextMessage A custom message from the code that set the error.
  * @param filename Filename of the error source
@@ -113,7 +109,7 @@ void ErrorBase::SetImaqError(int success, const char *contextMessage, const char
 
 /**
  * @brief Set the current error information associated with this sensor.
- * 
+ *
  * @param code The error code
  * @param contextMessage A custom message from the code that set the error.
  * @param filename Filename of the error source
@@ -138,7 +134,7 @@ void ErrorBase::SetError(Error::Code code, const char *contextMessage,
 
 /**
  * @brief Set the current error information associated with this sensor.
- * 
+ *
  * @param errorMessage The error message from WPIErrors.h
  * @param contextMessage A custom message from the code that set the error.
  * @param filename Filename of the error source
@@ -168,7 +164,7 @@ void ErrorBase::CloneError(ErrorBase *rhs) const
 
 /**
 @brief Check if the current error code represents a fatal error.
-  
+
 @return true if the current error is fatal.
 */
 bool ErrorBase::StatusIsFatal() const
@@ -202,11 +198,10 @@ void ErrorBase::SetGlobalWPIError(const char *errorMessage, const char *contextM
 }
 
 /**
-  * Retrieve the current global error.    
+  * Retrieve the current global error.
 */
 Error& ErrorBase::GetGlobalError()
 {
 	Synchronized mutex(_globalErrorMutex);
 	return _globalError;
 }
-

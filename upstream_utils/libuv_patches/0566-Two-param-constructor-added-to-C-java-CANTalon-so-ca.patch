From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Omar Zrien <OZrien@crosstheroadelectronics.com>
Date: Sun, 14 Dec 2014 17:09:52 -0500
Subject: [PATCH 0566/6262] Two param constructor added to C++/java CANTalon so
 caller can optionally specify the periodMs at which the talon control frame
 is sent. The param is capped in the HAL C++ class to [1ms, 95ms] so that zero
 and negative periods are caped to 1ms, and so that caller can't pass an
 absurdly large value, which causes TALON is appear disabled.

Change-Id: I4207194be25a33bbd6ad281a75301ce6684659a5
---
 hal/lib/Athena/ctre/CanTalonSRX.cpp           |  5 +++++
 wpilibc/wpilibC++Devices/include/CANTalon.h   |  1 +
 wpilibc/wpilibC++Devices/src/CANTalon.cpp     | 19 ++++++++++++++++++-
 .../java/edu/wpi/first/wpilibj/CANTalon.java  | 10 ++++++++++
 4 files changed, 34 insertions(+), 1 deletion(-)

diff --git a/hal/lib/Athena/ctre/CanTalonSRX.cpp b/hal/lib/Athena/ctre/CanTalonSRX.cpp
index 039ecc38deff2e486d6537904ac9adf20f5c86db..3c91eeff1793242b60650d47136c28ea56cdb85e 100644
--- a/hal/lib/Athena/ctre/CanTalonSRX.cpp
+++ b/hal/lib/Athena/ctre/CanTalonSRX.cpp
@@ -242,6 +242,11 @@ typedef struct _TALON_Param_Response_t {
 
 CanTalonSRX::CanTalonSRX(int deviceNumber,int controlPeriodMs): CtreCanNode(deviceNumber), _can_h(0), _can_stat(0)
 {
+	/* bound period to be within [1 ms,95 ms] */
+	if(controlPeriodMs < 1)
+		controlPeriodMs = 1;
+	else if(controlPeriodMs > 95)
+		controlPeriodMs = 95;
 	RegisterRx(STATUS_1 | (UINT8)deviceNumber );
 	RegisterRx(STATUS_2 | (UINT8)deviceNumber );
 	RegisterRx(STATUS_3 | (UINT8)deviceNumber );
diff --git a/wpilibc/wpilibC++Devices/include/CANTalon.h b/wpilibc/wpilibC++Devices/include/CANTalon.h
index 467b758d29daeb9b0ca853da8efae2ef2260bd98..bafeb661e558448234144ecab46cfc2c4253d503 100644
--- a/wpilibc/wpilibC++Devices/include/CANTalon.h
+++ b/wpilibc/wpilibC++Devices/include/CANTalon.h
@@ -28,6 +28,7 @@ public:
     EncFalling=5
   };
 	explicit CANTalon(int deviceNumber);
+	explicit CANTalon(int deviceNumber,int controlPeriodMs);
 	virtual ~CANTalon();
 
 	// PIDController interface
diff --git a/wpilibc/wpilibC++Devices/src/CANTalon.cpp b/wpilibc/wpilibC++Devices/src/CANTalon.cpp
index cf09f95e690ee64040d0739153372ceadc8b5a92..a377e48fe4655db2e18f4b25078bfa8ffd00d1d0 100644
--- a/wpilibc/wpilibC++Devices/src/CANTalon.cpp
+++ b/wpilibc/wpilibC++Devices/src/CANTalon.cpp
@@ -24,7 +24,24 @@ CANTalon::CANTalon(int deviceNumber)
   SetControlMode(m_controlMode);
   m_impl->SetProfileSlotSelect(m_profile);
 }
-
+/**
+ * Constructor for the CANTalon device.
+ * @param deviceNumber The CAN ID of the Talon SRX
+ * @param controlPeriodMs The period in ms to send the CAN control frame.
+ *							Period is bounded to [1ms, 95ms].
+ */
+CANTalon::CANTalon(int deviceNumber,int controlPeriodMs)
+	: m_deviceNumber(deviceNumber)
+	, m_impl(new CanTalonSRX(deviceNumber,controlPeriodMs)) /* bounded underneath to be within [1 ms,95 ms] */
+	, m_safetyHelper(new MotorSafetyHelper(this))
+  , m_profile(0)
+  , m_controlEnabled(true)
+  , m_controlMode(kPercentVbus)
+  , m_setPoint(0)
+{
+  SetControlMode(m_controlMode);
+  m_impl->SetProfileSlotSelect(m_profile);
+}
 CANTalon::~CANTalon() {
 	delete m_impl;
 	delete m_safetyHelper;
diff --git a/wpilibj/wpilibJavaDevices/src/main/java/edu/wpi/first/wpilibj/CANTalon.java b/wpilibj/wpilibJavaDevices/src/main/java/edu/wpi/first/wpilibj/CANTalon.java
index 276747dcb93616810ea80517ac383502ba9fc4f4..dd256c6ab139f40b65fc84b132feed2a56fbb33e 100644
--- a/wpilibj/wpilibJavaDevices/src/main/java/edu/wpi/first/wpilibj/CANTalon.java
+++ b/wpilibj/wpilibJavaDevices/src/main/java/edu/wpi/first/wpilibj/CANTalon.java
@@ -76,6 +76,16 @@ public class CANTalon implements MotorSafety, PIDOutput, SpeedController {
     setProfile(m_profile);
     changeControlMode(ControlMode.PercentVbus);
   }
+  public CANTalon(int deviceNumber,int controlPeriodMs) {
+    m_deviceNumber = deviceNumber;
+    m_impl = new CanTalonSRX(deviceNumber,controlPeriodMs); /* bound period to be within [1 ms,95 ms] */
+    m_safetyHelper = new MotorSafetyHelper(this);
+    m_controlEnabled = true;
+    m_profile = 0;
+    m_setPoint = 0;
+    setProfile(m_profile);
+    changeControlMode(ControlMode.PercentVbus);
+  }
 
   @Override
   public void pidWrite(double output)

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Thomas Clark <tjclark@wpi.edu>
Date: Fri, 8 Aug 2014 14:56:22 -0400
Subject: [PATCH 0279/6262] Implement DriverStation::GetBatteryVoltage

Make the GetBatteryVoltage method work using the new tPower header

Change-Id: If504f8a46f3f7f737f0b729b72fc6b5da0d29ff9
---
 hal/include/HAL/HAL.hpp                       |  1 +
 hal/include/HAL/Power.hpp                     | 15 +++
 hal/lib/Athena/Power.cpp                      | 74 ++++++++++++++
 .../wpilibC++Devices/src/DriverStation.cpp    |  6 +-
 .../edu/wpi/first/wpilibj/DriverStation.java  | 13 ++-
 .../edu/wpi/first/wpilibj/hal/PowerJNI.java   | 14 +++
 wpilibj/wpilibJavaJNI/lib/PowerJNI.cpp        | 99 +++++++++++++++++++
 wpilibj/wpilibJavaJNI/pom.xml                 |  1 +
 8 files changed, 217 insertions(+), 6 deletions(-)
 create mode 100644 hal/include/HAL/Power.hpp
 create mode 100644 hal/lib/Athena/Power.cpp
 create mode 100644 wpilibj/wpilibJavaDevices/src/main/java/edu/wpi/first/wpilibj/hal/PowerJNI.java
 create mode 100644 wpilibj/wpilibJavaJNI/lib/PowerJNI.cpp

diff --git a/hal/include/HAL/HAL.hpp b/hal/include/HAL/HAL.hpp
index 853655d9d3e2492a2a55ae89030904b43c19a5b5..cb8f5f5d698b8446391f1e477e4138e15d8c1fcc 100644
--- a/hal/include/HAL/HAL.hpp
+++ b/hal/include/HAL/HAL.hpp
@@ -22,6 +22,7 @@
 #include "Interrupts.hpp"
 #include "Errors.hpp"
 #include "PDP.hpp"
+#include "Power.hpp"
 
 #include "Utilities.hpp"
 #include "Semaphore.hpp"
diff --git a/hal/include/HAL/Power.hpp b/hal/include/HAL/Power.hpp
new file mode 100644
index 0000000000000000000000000000000000000000..10e9096f3194b17303cd32969f05ef8c4838ae89
--- /dev/null
+++ b/hal/include/HAL/Power.hpp
@@ -0,0 +1,15 @@
+#pragma once
+
+#include <stdint.h>
+
+extern "C"
+{
+	float getVinVoltage(int32_t *status);
+	float getVinCurrent(int32_t *status);
+	float getUserVoltage6V(int32_t *status);
+	float getUserCurrent6V(int32_t *status);
+	float getUserVoltage5V(int32_t *status);
+	float getUserCurrent5V(int32_t *status);
+	float getUserVoltage3V3(int32_t *status);
+	float getUserCurrent3V3(int32_t *status);
+}
diff --git a/hal/lib/Athena/Power.cpp b/hal/lib/Athena/Power.cpp
new file mode 100644
index 0000000000000000000000000000000000000000..d4edb75dc6a990863ffa04025ed087c447de6b5d
--- /dev/null
+++ b/hal/lib/Athena/Power.cpp
@@ -0,0 +1,74 @@
+#include "HAL/Power.hpp"
+#include "ChipObject.h"
+
+static tPower *power = NULL;
+
+static void initializePower(int32_t *status) {
+	if(power == NULL) {
+		power = tPower::create(status);
+	}
+}
+
+/**
+ * Get the roboRIO input voltage
+ */
+float getVinVoltage(int32_t *status) {
+	initializePower(status);
+	return power->readVinVoltage(status) / 4.096f * 0.025733f - 0.029f;
+}
+
+/**
+ * Get the roboRIO input current
+ */
+float getVinCurrent(int32_t *status) {
+	initializePower(status);
+	return power->readVinCurrent(status) / 4.096f * 0.017042 - 0.071f;
+}
+
+/**
+ * Get the 6V rail voltage
+ */
+float getUserVoltage6V(int32_t *status) {
+	initializePower(status);
+	return power->readUserVoltage6V(status) / 4.096f * 0.007019f - 0.014f;
+}
+
+/**
+ * Get the 6V rail current
+ */
+float getUserCurrent6V(int32_t *status) {
+	initializePower(status);
+	return power->readUserCurrent6V(status) / 4.096f * 0.005566f - 0.009f;
+}
+
+/**
+ * Get the 5V rail voltage
+ */
+float getUserVoltage5V(int32_t *status) {
+	initializePower(status);
+	return power->readUserVoltage5V(status) / 4.096f * 0.004962f - 0.013f;
+}
+
+/**
+ * Get the 5V rail current
+ */
+float getUserCurrent5V(int32_t *status) {
+	initializePower(status);
+	return power->readUserCurrent5V(status) / 4.096f * 0.001996f - 0.002f;
+}
+
+/**
+ * Get the 3.3V rail voltage
+ */
+float getUserVoltage3V3(int32_t *status) {
+	initializePower(status);
+	return power->readUserVoltage3V3(status) / 4.096f * 0.004902f - 0.01f;
+}
+
+/**
+ * Get the 3.3V rail current
+ */
+float getUserCurrent3V3(int32_t *status) {
+	initializePower(status);
+	return power->readUserCurrent3V3(status) / 4.096f * 0.002486f - 0.003f;
+}
diff --git a/wpilibc/wpilibC++Devices/src/DriverStation.cpp b/wpilibc/wpilibC++Devices/src/DriverStation.cpp
index beda69ebada6c883a11af3ed7377fa5ceb4e91a9..8c35b93ae70b22643633482b60199956b6ed0ec8 100644
--- a/wpilibc/wpilibC++Devices/src/DriverStation.cpp
+++ b/wpilibc/wpilibC++Devices/src/DriverStation.cpp
@@ -162,7 +162,11 @@ void DriverStation::GetData()
  */
 float DriverStation::GetBatteryVoltage()
 {
-	return 0.0f; // TODO
+	int32_t status = 0;
+	float voltage = getVinVoltage(&status);
+	wpi_setErrorWithContext(status, "getVinVoltage");
+
+	return voltage;
 }
 
 /**
diff --git a/wpilibj/wpilibJavaDevices/src/main/java/edu/wpi/first/wpilibj/DriverStation.java b/wpilibj/wpilibJavaDevices/src/main/java/edu/wpi/first/wpilibj/DriverStation.java
index 7686a6dc7f75e4f7332d3df364785906c12bef52..0678e303f236ace22782e596e76d9f315b222c2c 100644
--- a/wpilibj/wpilibJavaDevices/src/main/java/edu/wpi/first/wpilibj/DriverStation.java
+++ b/wpilibj/wpilibJavaDevices/src/main/java/edu/wpi/first/wpilibj/DriverStation.java
@@ -6,6 +6,7 @@
 /*----------------------------------------------------------------------------*/
 package edu.wpi.first.wpilibj;
 
+import java.nio.IntBuffer;
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
 
@@ -13,6 +14,7 @@ import edu.wpi.first.wpilibj.communication.FRCNetworkCommunicationsLibrary;
 import edu.wpi.first.wpilibj.communication.HALControlWord;
 import edu.wpi.first.wpilibj.communication.HALAllianceStationID;
 import edu.wpi.first.wpilibj.hal.HALUtil;
+import edu.wpi.first.wpilibj.hal.PowerJNI;
 import edu.wpi.first.wpilibj.Timer;
 
 /**
@@ -95,10 +97,7 @@ public class DriverStation implements RobotState.Interface {
         m_semaphore = new Object();
         m_dataSem = new Object();
 
-        m_packetDataAvailableSem = ByteBuffer.allocateDirect(4);
-        // set the byte order
-        m_packetDataAvailableSem.order(ByteOrder.LITTLE_ENDIAN);
-
+        m_packetDataAvailableSem = HALUtil.initializeMutexNormal();
         FRCNetworkCommunicationsLibrary.setNewDataSem(m_packetDataAvailableSem);
 
         m_thread = new Thread(new DriverStationTask(this), "FRCDriverStation");
@@ -209,7 +208,11 @@ public class DriverStation implements RobotState.Interface {
      * @return The battery voltage.
      */
     public double getBatteryVoltage() {
-        return 0.0; // TODO
+        IntBuffer status = ByteBuffer.allocateDirect(4).asIntBuffer();
+        float voltage = PowerJNI.getVinVoltage(status);
+        HALUtil.checkStatus(status);
+
+        return voltage;
     }
 
     /**
diff --git a/wpilibj/wpilibJavaDevices/src/main/java/edu/wpi/first/wpilibj/hal/PowerJNI.java b/wpilibj/wpilibJavaDevices/src/main/java/edu/wpi/first/wpilibj/hal/PowerJNI.java
new file mode 100644
index 0000000000000000000000000000000000000000..faef60ead0cd860de6f7a4576e6bec6066e186a5
--- /dev/null
+++ b/wpilibj/wpilibJavaDevices/src/main/java/edu/wpi/first/wpilibj/hal/PowerJNI.java
@@ -0,0 +1,14 @@
+package edu.wpi.first.wpilibj.hal;
+
+import java.nio.IntBuffer;
+
+public class PowerJNI extends JNIWrapper {
+	public static native float getVinVoltage(IntBuffer status);
+	public static native float getVinCurrent(IntBuffer status);
+	public static native float getUserVoltage6V(IntBuffer status);
+	public static native float getUserCurrent6V(IntBuffer status);
+	public static native float getUserVoltage5V(IntBuffer status);
+	public static native float getUserCurrent5V(IntBuffer status);
+	public static native float getUserVoltage3V3(IntBuffer status);
+	public static native float getUserCurrent3V3(IntBuffer status);
+}
diff --git a/wpilibj/wpilibJavaJNI/lib/PowerJNI.cpp b/wpilibj/wpilibJavaJNI/lib/PowerJNI.cpp
new file mode 100644
index 0000000000000000000000000000000000000000..0d5f802c4f1eebd380bbf0f6098d5e27b97ce52c
--- /dev/null
+++ b/wpilibj/wpilibJavaJNI/lib/PowerJNI.cpp
@@ -0,0 +1,99 @@
+#include <jni.h>
+#include "edu_wpi_first_wpilibj_hal_PowerJNI.h"
+#include "HAL/Power.hpp"
+
+/*
+ * Class:     edu_wpi_first_wpilibj_hal_PowerJNI
+ * Method:    getVinVoltage
+ * Signature: (Ljava/nio/IntBuffer;)F
+ */
+JNIEXPORT jfloat JNICALL Java_edu_wpi_first_wpilibj_hal_PowerJNI_getVinVoltage
+  (JNIEnv * env, jclass, jobject status)
+{
+	jint * statusPtr = (jint*)env->GetDirectBufferAddress(status);
+	return getVinVoltage(statusPtr);
+}
+
+/*
+ * Class:     edu_wpi_first_wpilibj_hal_PowerJNI
+ * Method:    getVinCurrent
+ * Signature: (Ljava/nio/IntBuffer;)F
+ */
+JNIEXPORT jfloat JNICALL Java_edu_wpi_first_wpilibj_hal_PowerJNI_getVinCurrent
+  (JNIEnv * env, jclass, jobject status)
+{
+	jint * statusPtr = (jint*)env->GetDirectBufferAddress(status);
+	return getVinCurrent(statusPtr);
+}
+
+/*
+ * Class:     edu_wpi_first_wpilibj_hal_PowerJNI
+ * Method:    getUserVoltage6V
+ * Signature: (Ljava/nio/IntBuffer;)F
+ */
+JNIEXPORT jfloat JNICALL Java_edu_wpi_first_wpilibj_hal_PowerJNI_getUserVoltage6V
+  (JNIEnv * env, jclass, jobject status)
+{
+	jint * statusPtr = (jint*)env->GetDirectBufferAddress(status);
+	return getUserVoltage6V(statusPtr);
+}
+
+/*
+ * Class:     edu_wpi_first_wpilibj_hal_PowerJNI
+ * Method:    getUserCurrent6V
+ * Signature: (Ljava/nio/IntBuffer;)F
+ */
+JNIEXPORT jfloat JNICALL Java_edu_wpi_first_wpilibj_hal_PowerJNI_getUserCurrent6V
+  (JNIEnv * env, jclass, jobject status)
+{
+	jint * statusPtr = (jint*)env->GetDirectBufferAddress(status);
+	return getUserCurrent6V(statusPtr);
+}
+
+/*
+ * Class:     edu_wpi_first_wpilibj_hal_PowerJNI
+ * Method:    getUserVoltage5V
+ * Signature: (Ljava/nio/IntBuffer;)F
+ */
+JNIEXPORT jfloat JNICALL Java_edu_wpi_first_wpilibj_hal_PowerJNI_getUserVoltage5V
+  (JNIEnv * env, jclass, jobject status)
+{
+	jint * statusPtr = (jint*)env->GetDirectBufferAddress(status);
+	return getUserVoltage5V(statusPtr);
+}
+
+/*
+ * Class:     edu_wpi_first_wpilibj_hal_PowerJNI
+ * Method:    getUserCurrent5V
+ * Signature: (Ljava/nio/IntBuffer;)F
+ */
+JNIEXPORT jfloat JNICALL Java_edu_wpi_first_wpilibj_hal_PowerJNI_getUserCurrent5V
+  (JNIEnv * env, jclass, jobject status)
+{
+	jint * statusPtr = (jint*)env->GetDirectBufferAddress(status);
+	return getUserCurrent5V(statusPtr);
+}
+
+/*
+ * Class:     edu_wpi_first_wpilibj_hal_PowerJNI
+ * Method:    getUserVoltage3V3
+ * Signature: (Ljava/nio/IntBuffer;)F
+ */
+JNIEXPORT jfloat JNICALL Java_edu_wpi_first_wpilibj_hal_PowerJNI_getUserVoltage3V3
+  (JNIEnv * env, jclass, jobject status)
+{
+	jint * statusPtr = (jint*)env->GetDirectBufferAddress(status);
+	return getUserVoltage3V3(statusPtr);
+}
+
+/*
+ * Class:     edu_wpi_first_wpilibj_hal_PowerJNI
+ * Method:    getUserCurrent3V3
+ * Signature: (Ljava/nio/IntBuffer;)F
+ */
+JNIEXPORT jfloat JNICALL Java_edu_wpi_first_wpilibj_hal_PowerJNI_getUserCurrent3V3
+  (JNIEnv * env, jclass, jobject status)
+{
+	jint * statusPtr = (jint*)env->GetDirectBufferAddress(status);
+	return getUserCurrent3V3(statusPtr);
+}
diff --git a/wpilibj/wpilibJavaJNI/pom.xml b/wpilibj/wpilibJavaJNI/pom.xml
index 3ef82d2a4d99edd853abd0184c24945d339dd7d0..6da2c6629cf7e784c8aec94ce22f84c43ba1303e 100644
--- a/wpilibj/wpilibJavaJNI/pom.xml
+++ b/wpilibj/wpilibJavaJNI/pom.xml
@@ -126,6 +126,7 @@ this default location, specify a value for the 'embeddedJDKHome' property at the
 								<javahClassName>edu.wpi.first.wpilibj.hal.SolenoidJNI</javahClassName>
 								<javahClassName>edu.wpi.first.wpilibj.hal.CompressorJNI</javahClassName>
 								<javahClassName>edu.wpi.first.wpilibj.hal.PDPJNI</javahClassName>
+								<javahClassName>edu.wpi.first.wpilibj.hal.PowerJNI</javahClassName>
 							</javahClassNames>
 							<!-- enable additional javah interface in dependencies list -->
 							<!-- javahSearchJNIFromDependencies>true</javahSearchJNIFromDependencies -->

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Peter Johnson <johnson.peter@gmail.com>
Date: Wed, 26 Jul 2023 21:32:07 -0700
Subject: [PATCH 09/10] Fix clang 16 warnings in more files (#5)

---
 common/getopt.c      | 2 +-
 common/getopt.h      | 2 +-
 common/string_util.c | 2 +-
 common/string_util.h | 2 +-
 common/zhash.c       | 8 ++++----
 common/zhash.h       | 8 ++++----
 6 files changed, 12 insertions(+), 12 deletions(-)

diff --git a/common/getopt.c b/common/getopt.c
index 71ae57bd83b2ed50c7f80f3e3952ddfcc53cb7bc..458ef7705019b73dcd4c9fa03fe15555ea087fcf 100644
--- a/common/getopt.c
+++ b/common/getopt.c
@@ -64,7 +64,7 @@ struct getopt
     zarray_t   *options;
 };
 
-getopt_t *getopt_create()
+getopt_t *getopt_create(void)
 {
     getopt_t *gopt = (getopt_t*) calloc(1, sizeof(getopt_t));
 
diff --git a/common/getopt.h b/common/getopt.h
index 69dbb05c8286a9d5d301382fc44fdea8c8f7875e..75266f033a0485b22cc34ec08e894781b6658894 100644
--- a/common/getopt.h
+++ b/common/getopt.h
@@ -36,7 +36,7 @@ extern "C" {
 
 typedef struct getopt getopt_t;
 
-getopt_t *getopt_create();
+getopt_t *getopt_create(void);
 void getopt_destroy(getopt_t *gopt);
 
 // Parse args. Returns 1 on success
diff --git a/common/string_util.c b/common/string_util.c
index 3d86eb2f2d602a5b00c29952808368dc73c0b0cd..14726e7a7f66a330b28ef326734cd7fd25e8d4dd 100644
--- a/common/string_util.c
+++ b/common/string_util.c
@@ -314,7 +314,7 @@ char *str_touppercase(char *s)
     return s;
 }
 
-string_buffer_t* string_buffer_create()
+string_buffer_t* string_buffer_create(void)
 {
     string_buffer_t *sb = (string_buffer_t*) calloc(1, sizeof(string_buffer_t));
     assert(sb != NULL);
diff --git a/common/string_util.h b/common/string_util.h
index 9a7cd1e4509e3eba102316330cd50df918f56aed..d0363b03f23a94c35ed3581ea40f6d8f3f2d4110 100644
--- a/common/string_util.h
+++ b/common/string_util.h
@@ -262,7 +262,7 @@ char *str_replace(const char *haystack, const char *needle, const char *replacem
  * It is the caller's responsibility to free the string buffer resources with
  * a call to string_buffer_destroy() when it is no longer needed.
  */
-string_buffer_t *string_buffer_create();
+string_buffer_t *string_buffer_create(void);
 
 /**
  * Frees the resources associated with a string buffer object, including space
diff --git a/common/zhash.c b/common/zhash.c
index 914f530eca8742ed39fc814ab6587a4514c966b5..c1eeee6670b6823e1d0e36f9d097641c084e4a4f 100644
--- a/common/zhash.c
+++ b/common/zhash.c
@@ -353,7 +353,7 @@ void zhash_iterator_remove(zhash_iterator_t *zit)
     zit->last_entry--;
 }
 
-void zhash_map_keys(zhash_t *zh, void (*f)())
+void zhash_map_keys(zhash_t *zh, void (*f)(void *))
 {
     assert(zh != NULL);
     if (f == NULL)
@@ -369,7 +369,7 @@ void zhash_map_keys(zhash_t *zh, void (*f)())
     }
 }
 
-void zhash_vmap_keys(zhash_t * zh, void (*f)())
+void zhash_vmap_keys(zhash_t * zh, void (*f)(void *))
 {
     assert(zh != NULL);
     if (f == NULL)
@@ -386,7 +386,7 @@ void zhash_vmap_keys(zhash_t * zh, void (*f)())
     }
 }
 
-void zhash_map_values(zhash_t * zh, void (*f)())
+void zhash_map_values(zhash_t * zh, void (*f)(void *))
 {
     assert(zh != NULL);
     if (f == NULL)
@@ -401,7 +401,7 @@ void zhash_map_values(zhash_t * zh, void (*f)())
     }
 }
 
-void zhash_vmap_values(zhash_t * zh, void (*f)())
+void zhash_vmap_values(zhash_t * zh, void (*f)(void *))
 {
     assert(zh != NULL);
     if (f == NULL)
diff --git a/common/zhash.h b/common/zhash.h
index f3dee1aa40f6f2717fa23d7e7f856bd8864a99b3..9993a66e4aed22d998d58e10a5d0db0193fcff95 100644
--- a/common/zhash.h
+++ b/common/zhash.h
@@ -259,7 +259,7 @@ void zhash_iterator_remove(zhash_iterator_t *zit);
  * for the key, which the caller should not modify, as the hash table will not be
  * re-indexed. The function may be NULL, in which case no action is taken.
  */
-void zhash_map_keys(zhash_t *zh, void (*f)());
+void zhash_map_keys(zhash_t *zh, void (*f)(void *));
 
 /**
  * Calls the supplied function with a pointer to every value in the hash table in
@@ -267,7 +267,7 @@ void zhash_map_keys(zhash_t *zh, void (*f)());
  * for the value, which the caller may safely modify. The function may be NULL,
  * in which case no action is taken.
  */
-void zhash_map_values(zhash_t *zh, void (*f)());
+void zhash_map_values(zhash_t *zh, void (*f)(void *));
 
 /**
  * Calls the supplied function with a copy of every key in the hash table in
@@ -280,7 +280,7 @@ void zhash_map_values(zhash_t *zh, void (*f)());
  * Use with non-pointer keys (i.e. integer, double, etc.) will likely cause a
  * segmentation fault.
  */
-void zhash_vmap_keys(zhash_t *vh, void (*f)());
+void zhash_vmap_keys(zhash_t *vh, void (*f)(void *));
 
 /**
  * Calls the supplied function with a copy of every value in the hash table in
@@ -293,7 +293,7 @@ void zhash_vmap_keys(zhash_t *vh, void (*f)());
  * Use with non-pointer values (i.e. integer, double, etc.) will likely cause a
  * segmentation fault.
  */
-void zhash_vmap_values(zhash_t *vh, void (*f)());
+void zhash_vmap_values(zhash_t *vh, void (*f)(void *));
 
 /**
  * Returns an array which contains copies of all of the hash table's keys, in no

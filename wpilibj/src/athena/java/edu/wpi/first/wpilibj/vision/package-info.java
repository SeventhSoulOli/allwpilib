/*----------------------------------------------------------------------------*/
/* Copyright (c) FIRST 2008-2016. All Rights Reserved.                        */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

/**
 * Classes in the {@code edu.wpi.first.wpilibj.vision} package are designed to
 * simplify using OpenCV vision processing code from a robot program.
 * <p>
 * <p>An example usecase for finding targets:
 * <br>
 * <pre><code>
 * public class Robot extends IterativeRobot implements VisionRunner.Listener {
 *
 *      // A USB camera connected to the roboRIO.
 *      private {@link edu.wpi.cscore.VideoSource VideoSource} usbCamera;
 *
 *      // A vision pipeline. This could be handwritten or generated by GRIP.
 *      // This has to implement {@link edu.wpi.first.wpilibj.vision.VisionPipeline}.
 *      private MyFindGoalPipeline findGoalPipeline;
 *      private {@link edu.wpi.first.wpilibj.vision.VisionRunner} findGoalRunner;
 *      private {@link edu.wpi.first.wpilibj.vision.VisionThread} findGoalThread;
 *
 *      // The object to synchronize on to make sure the vision thread doesn't
 *      // write to variables the main thread is using.
 *      private final Object visionLock = new Object();
 *
 *      // The pipeline outputs we want
 *      private List&lt;MatOfPoint&gt; goalContours = null;
 *
 *      // The last known absolute (field-oriented) angle needed to turn to face the goal
 *      private double lastKnownAngleToGoal = 0;
 *
 *     {@literal @}Override
 *      public void {@link edu.wpi.first.wpilibj.vision.VisionRunner.Listener#copyPipelineOutputs() copyPipelineOutputs()} {
 *          synchronized (visionLock) {
 *              // Take a snapshot of the pipeline's output because
 *              // it may have changed the next time this method is called!
 *              goalContours = findGoalPipeline.getGoalContours();
 *          }
 *      }
 *
 *     {@literal @}Override
 *      public void robotInit() {
 *          usbCamera = new {@link edu.wpi.cscore.UsbCamera UsbCamera}("USB camera", 0);
 *          findGoalPipeline = new MyFindGoalPipeline();
 *          findGoalRunner = new VisionRunner(usbCamera, findGoalPipeline, this);
 *          findGoalThread = new VisionThread(findGoalRunner);
 *      }
 *
 *     {@literal @}Override
 *      public void autonomousInit() {
 *          findGoalThread.start();
 *      }
 *
 *     {@literal @}Override
 *      public void autonomousPeriodic() {
 *          synchronized (visionLock) {
 *              if (goalContours == null) {
 *                  // Wait until the pipeline has run
 *                  return;
 *              }
 *              // assumes the pipeline is perfect and will always find exactly one goal
 *              MatOfPoint goalContour = goalContours.get(0);
 *
 *              // Do something with the contour
 *              ...
 *          }
 *      }
 *
 * }
 * </code></pre>
 * </p>
 */
package edu.wpi.first.wpilibj.vision;

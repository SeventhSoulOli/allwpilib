apply plugin: 'maven-publish'
apply plugin: 'java-library'
apply plugin: 'jacoco'

def baseArtifactId = project.baseId
def artifactGroupId = project.groupId
def javaBaseName = "_GROUP_edu_wpi_first_${project.baseId}_ID_${project.baseId}-java_CLS"

File outputsFolder = file("$project.buildDir/outputs")

TaskProvider<Jar> sourcesJar = tasks.register('sourcesJar', Jar) {
    dependsOn 'classes'
    classifier = 'sources'
    from sourceSets.main.allSource
}

TaskProvider<org.gradle.jvm.tasks.Jar> javadocJar = tasks.register('javadocJar', Jar) {
    dependsOn 'javadoc'
    classifier = 'javadoc'
    from javadoc.destinationDir
}

TaskProvider<Jar> outputJar = tasks.register('outputJar', Jar) { Jar j ->
    j.dependsOn 'classes'
    j.archiveBaseName = javaBaseName
    j.destinationDirectory = outputsFolder
    j.from sourceSets.main.output

    addTaskToCopyAllOutputs(j)
}

TaskProvider<Jar> outputSourcesJar = tasks.register('outputSourcesJar', Jar) { Jar j ->
    j.dependsOn 'classes'
    j.archiveBaseName = javaBaseName
    j.destinationDirectory = outputsFolder
    j.classifier = 'sources'
    j.from sourceSets.main.allSource

    addTaskToCopyAllOutputs(j)
}

TaskProvider<Jar> outputJavadocJar = tasks.register('outputJavadocJar', Jar) { Jar j ->
    j.dependsOn 'javadoc'
    j.archiveBaseName = javaBaseName
    j.destinationDirectory = outputsFolder
    j.classifier = 'javadoc'
    j.from javadoc.destinationDir

    addTaskToCopyAllOutputs(j)
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives outputJar
    archives outputSourcesJar
    archives outputJavadocJar
}

tasks.named('build') { Task build ->
    build.dependsOn outputSourcesJar
    build.dependsOn outputJavadocJar
    build.dependsOn outputJar

    project(':').libraryBuild.dependsOn build
}

publishing {
    publications {

        java(MavenPublication) {
            artifact jar
            artifact sourcesJar
            artifact javadocJar

            artifactId = "${baseArtifactId}-java"
            groupId artifactGroupId
            version wpilibVersioning.version.get()
        }
    }
}

tasks.named('test', Test) { Test t ->
    t.useJUnitPlatform()
    t.systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
    t.testLogging {
        events "failed"
        exceptionFormat "full"
    }
    t.finalizedBy tasks.named('jacocoTestReport', JacocoReport)

    if (project.hasProperty('onlylinuxathena') || project.hasProperty('onlylinuxarm32') || project.hasProperty('onlylinuxarm64')) {
        t.enabled = false
    }
}

repositories {
    maven {
        url = 'https://frcmaven.wpi.edu/artifactory/ex-mvn'
    }
    //maven.url "https://oss.sonatype.org/content/repositories/snapshots/"
}

sourceSets {
    dev
}

tasks.withType(JavaCompile).configureEach { JavaCompile javac ->
    javac.options.compilerArgs = [
        '--release',
        '11',
        '-encoding',
        'UTF8',
        "-Werror",
        "-Xlint:all",
        // ignore AutoCloseable warnings
        "-Xlint:-try",
        // ignore missing serialVersionUID warnings
        "-Xlint:-serial",
    ]
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'

    devImplementation sourceSets.main.output
}

tasks.register('run', JavaExec) { JavaExec run ->
    run.classpath = sourceSets.dev.runtimeClasspath

    run.mainClass = project.devMain
}

tasks.named('build') { Task build ->
    build.dependsOn devClasses
}

jacoco {
    toolVersion = "0.8.8"
}

tasks.named('jacocoTestReport', JacocoReport) { JacocoReport task ->
    task.reports {
        xml.required = true
        html.required = true
    }
}

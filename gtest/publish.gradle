apply plugin: 'maven-publish'
apply plugin: 'edu.wpi.first.wpilib.versioning.WPILibVersioningPlugin'

if (!hasProperty('releaseType')) {
    WPILibVersion {
        releaseType = 'dev'
    }
}

def pubVersion = ''
if (project.hasProperty("publishVersion")) {
    pubVersion = "1.8.0-4e4df22-frc-$project.publishVersion"
} else {
    pubVersion = "1.8.0-4e4df22-frc-$WPILibVersion.version"
}

def baseArtifactId = 'gtest-cpp'
def artifactGroupId = 'com.google'
def zipBaseName = '_GROUP_com_gtest_ID_gtest-cpp_CLS'

def outputsFolder = file("$project.buildDir/outputs")

task cppSourcesZip(type: Zip) {
    destinationDir = outputsFolder
    baseName = zipBaseName
    classifier = "sources"

    from("$projectDir/LICENSE") {
        into '/'
    }

    from('src/main/native/cpp') {
        into '/'
    }
}

task cppHeadersZip(type: Zip) {
    destinationDir = outputsFolder
    baseName = zipBaseName
    classifier = "headers"

    from("$projectDir/LICENSE") {
        into '/'
    }

    from('src/main/native/include') {
        into '/'
    }
}

build.dependsOn cppHeadersZip
build.dependsOn cppSourcesZip

addTaskToCopyAllOutputs(cppHeadersZip)
addTaskToCopyAllOutputs(cppSourcesZip)

model {
    publishing {
        def taskList = createComponentZipTasks($.components, 'gtest', zipBaseName, Zip, project, { task, value ->
            task.from("$projectDir/LICENSE") {
                into '/'
            }
            value.each { binary ->
                if (binary.buildable) {
                    if (binary instanceof StaticLibraryBinarySpec) {
                        task.dependsOn binary.buildTask
                        task.from(binary.staticLibraryFile) {
                            into getPlatformPath(binary) + '/static'
                        }
                    }
                }
            }
        })

        def allTask
        if (!project.hasProperty('jenkinsBuild')) {
            allTask = createAllCombined(taskList, 'gtest', zipBaseName, Zip, project)
        }

        publications {
            cpp(MavenPublication) {
                taskList.each {
                    artifact it
                }
                artifact cppHeadersZip
                artifact cppSourcesZip

                if (!project.hasProperty('jenkinsBuild')) {
                    artifact allTask
                }

                artifactId = "${baseArtifactId}-cpp"
                groupId artifactGroupId
                version pubVersion
            }
        }
    }
}

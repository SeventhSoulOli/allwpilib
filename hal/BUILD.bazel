load("@rules_cc//cc:defs.bzl", "cc_binary", "cc_library", "cc_test")
load("@rules_java//java:defs.bzl", "java_binary", "java_library")

cc_library(
    name = "generated_cc_headers",
    hdrs = glob(["src/generated/main/native/include/**"]),
    includes = ["src/generated/main/native/include"],
    strip_include_prefix = "src/generated/main/native/include",
    visibility = ["//hal:__subpackages__"],
)

filegroup(
    name = "generated_java",
    srcs = glob(["src/generated/main/java/**/*.java"]),
    visibility = ["//hal:__subpackages__"],
)

ATHENA_SRCS = glob([
    "athena/*.cpp",
    "athena/*.h",
    "athena/cpp/*.cpp",
    "athena/ctre/*.cpp",
    "athena/ctre/*.h",
    "athena/rev/*.cpp",
    "athena/rev/*.h",
    "athena/frccansae/*.h",
    "athena/mockdata/*.cpp",
])

ATHENA_DEPS = ["@bzlmodrio-ni//libraries/cpp/ni:shared"]

SIM_SRCS = glob([
    "sim/*.cpp",
    "sim/mockdata/*.cpp",
    "sim/*.h",
    "sim/mockdata/*.h",
])

SIM_DEPS = []

HAL_DEPS = select({
    "@rules_bzlmodrio_toolchains//constraints/is_roborio:roborio": ATHENA_DEPS,
    "//conditions:default": SIM_DEPS,
})

filegroup(
    name = "platform-srcs",
    srcs = select({
        "@rules_bzlmodrio_toolchains//constraints/is_roborio:roborio": ATHENA_SRCS,
        "//conditions:default": SIM_SRCS,
    }),
)

cc_library(
    name = "wpiHal.static",
    srcs = ["platform-srcs"] + glob(
        ["src/main/native/cpp/**"],
        exclude = ["src/main/native/cpp/jni/**"],
    ),
    hdrs = glob(["src/main/native/include/**/*"]),
    includes = ["src/main/native/include"],
    strip_include_prefix = "src/main/native/include",
    visibility = ["//visibility:public"],
    deps = [
        "//hal:generated_cc_headers",
        "//wpiutil/src/main/native:wpiutil.static",
    ] + HAL_DEPS,
)

java_library(
    name = "hal",
    srcs = ["//hal:generated_java"] + glob(["src/main/java/**/*.java"]),
    visibility = ["//visibility:public"],
    deps = [
        "//wpiutil/src/main/java/edu/wpi/first/util:wpiutil",
    ],
)

cc_test(
    name = "hal-cpp-test",
    size = "small",
    srcs = glob([
        "**/*.cpp",
        "**/*.h",
    ]),
    deps = [
        "//hal/src/main/native:wpiHal.static",
        "//thirdparty/googletest",
    ],
)

cc_binary(
    name = "DevMain-Cpp",
    srcs = ["src/dev/native/cpp/main.cpp"],
    deps = [
        ":wpiHal.static",
    ],
)

java_binary(
    name = "DevMain-Java",
    srcs = ["src/dev/java/edu/wpi/first/hal/DevMain.java"],
    deps = [
    ],
)

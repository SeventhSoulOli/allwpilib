# Build and testing pipeline for WPI owned hardware.

resources:
  containers:
  - container: wpilib2020
    image: wpilib/roborio-cross-ubuntu:2020-18.04
  - container: raspbian
    image:  wpilib/raspbian-cross-ubuntu:10-18.04
  - container: aarch64
    image:  wpilib/aarch64-cross-ubuntu:bionic-18.04
  - container: ubuntu
    image:  wpilib/ubuntu-base:18.04

# variables:
# - group: Artifactory-Package-Publish

trigger:
  batch: true
  branches:
    include:
    - master

stages:
- stage: Build
  jobs:
  - template: azure-templates/build-job.yml
    parameters:
      jobName: Linux_Arm
      buildOptions: '-Ponlylinuxathena'
      artifactName: 'Athena'

  - template: azure-templates/build-job.yml
    parameters:
      jobName: Linux_Raspbian
      container: raspbian
      buildOptions: '-Ponlylinuxraspbian'
      artifactName: 'Raspbian'

  - template: azure-templates/build-job.yml
    parameters:
      jobName: Linux_Aarch64
      container: aarch64
      buildOptions: '-Ponlylinuxaarch64bionic'
      artifactName: 'Aarch64'

  - template: azure-templates/build-job.yml
    parameters:
      jobName: Linux
      container: ubuntu
      artifactName: 'Linux'

  - template: azure-templates/build-job.yml
    parameters:
      jobName: Windows_64_Bit
      pool:
        name: 'WPI Build'
        demands:
        - agent.os -equals Windows_NT
      container: ''
      preBuild:
      - script: call "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\Common7\Tools\VsDevCmd.bat"
      jdkVersionOption: '1.11'
      buildOptions: '-PskipPMD'
      artifactName: 'Win64'

  - template: azure-templates/build-job-win32.yml
    parameters:
      pool:
        name: 'WPI Build'
        demands:
        - agent.os -equals Windows_NT
      preBuild:
      - script: call "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\Common7\Tools\VsDevCmd.bat"

  - template: azure-templates/build-job-mac.yml

- template: azure-templates/combine-stage.yml
  parameters:
    publish: true

- stage: IntegrationTests
  dependsOn: []
  jobs:
  - job: Build
    displayName: Integration Tests
    pool:
      vmImage: 'Ubuntu 16.04'

    container:
      image:  wpilib/roborio-cross-ubuntu:2020-18.04

    timeoutInMinutes: 0

    steps:
    - task: Gradle@2
      condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v')))
      inputs:
        workingDirectory: ''
        gradleWrapperFile: 'gradlew'
        gradleOptions: '-Xmx3072m'
        publishJUnitResults: false
        testResultsFiles: '**/TEST-*.xml'
        tasks: 'copyWpilibJIntegrationTestJarToOutput copyWpilibCTestLibrariesToOutput'
        options: '-Ponlylinuxathena -PbuildServer'

    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'Integration Tests'
        targetPath: 'build/integrationTestFiles'

  - job: Cpp
    dependsOn: Build
    displayName: C++
    pool: RoboRioConnections
    timeoutInMinutes: 30
    workspace:
      clean: all
    steps:
    - task: DownloadPipelineArtifact@0
      inputs:
        artifactName: 'Integration Tests'
        targetPath: 'build/integrationTestFiles'

    - task: ShellScript@2
      displayName: Run C++ Tests
      inputs:
        scriptPath: test-scripts/deploy-and-run-test-on-robot.sh
        args: 'cpp -A "--gtest_output=xml:/home/admin/testResults/cppreport.xml"'

    - task: PublishTestResults@2
      displayName: Publish C++ Test Results
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '*.xml'
        testRunTitle: 'C++ Test Report'
        searchFolder: '$(System.DefaultWorkingDirectory)/test-reports'

  - job: Java
    dependsOn: Build
    pool: RoboRioConnections
    timeoutInMinutes: 30
    workspace:
      clean: all
    steps:
    - task: DownloadPipelineArtifact@0
      inputs:
        artifactName: 'Integration Tests'
        targetPath: 'build/integrationTestFiles'

    - task: ShellScript@2
      displayName: Run Java Tests
      inputs:
        scriptPath: test-scripts/deploy-and-run-test-on-robot.sh
        args: 'java'

    - task: PublishTestResults@2
      displayName: Publish Java Test Results
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '*.xml'
        testRunTitle: 'Java Test Report'
        searchFolder: '$(System.DefaultWorkingDirectory)/test-reports'

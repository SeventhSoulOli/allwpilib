diff --git a/wpimath/src/main/native/include/frc/interpolation/InterpolatingMap.h b/wpimath/src/main/native/include/frc/interpolation/InterpolatingMap.h
index 4f4bf45a1..0ab512d26 100644
--- a/wpimath/src/main/native/include/frc/interpolation/InterpolatingMap.h
+++ b/wpimath/src/main/native/include/frc/interpolation/InterpolatingMap.h
@@ -84,4 +84,4 @@ class InterpolatingMap {
   std::map<Key, Value> m_container;
 };
 
-}  // namespace frc
\ No newline at end of file
+}  // namespace frc
diff --git a/wpimath/src/test/native/cpp/interpolation/InterpolatingMapTest.cpp b/wpimath/src/test/native/cpp/interpolation/InterpolatingMapTest.cpp
index 7b187da17..817d08d93 100644
--- a/wpimath/src/test/native/cpp/interpolation/InterpolatingMapTest.cpp
+++ b/wpimath/src/test/native/cpp/interpolation/InterpolatingMapTest.cpp
@@ -5,50 +5,51 @@
 #include "frc/interpolation/InterpolatingMap.h"  // NOLINT(build/include_order)
 
 #include <gtest/gtest.h>
-#include <units/angular_velocity.h>
-#include <units/length.h>
 
-TEST(InterpolatingMap, Insert) {
-    frc::InterpolatingMap<units::meter_t, units::radians_per_second_t> table;
+#include "units/angular_velocity.h"
+#include "units/length.h"
 
-    table.Insert(125_in, 450_rad_per_s);
-    table.Insert(200_in, 510_rad_per_s);
-    table.Insert(268_in, 525_rad_per_s);
-    table.Insert(312_in, 550_rad_per_s);
-    table.Insert(326_in, 650_rad_per_s);
+TEST(InterpolatingMapTest, Insert) {
+  frc::InterpolatingMap<units::meter_t, units::radians_per_second_t> table;
 
-    // Key below minimum gives smallest value
-    EXPECT_EQ(450_rad_per_s, table[100_in]);
+  table.Insert(125_in, 450_rad_per_s);
+  table.Insert(200_in, 510_rad_per_s);
+  table.Insert(268_in, 525_rad_per_s);
+  table.Insert(312_in, 550_rad_per_s);
+  table.Insert(326_in, 650_rad_per_s);
 
-    // Minimum key gives exact value
-    EXPECT_EQ(450_rad_per_s, table[125_in]);
+  // Key below minimum gives smallest value
+  EXPECT_EQ(450_rad_per_s, table[100_in]);
 
-    // Key gives interpolated value
-    EXPECT_EQ(480_rad_per_s, table[162.5_in]);
+  // Minimum key gives exact value
+  EXPECT_EQ(450_rad_per_s, table[125_in]);
 
-    // Key at right of interpolation range gives exact value
-    EXPECT_EQ(510_rad_per_s, table[200_in]);
+  // Key gives interpolated value
+  EXPECT_EQ(480_rad_per_s, table[162.5_in]);
 
-    // Maximum key gives exact value
-    EXPECT_EQ(650_rad_per_s, table[326_in]);
+  // Key at right of interpolation range gives exact value
+  EXPECT_EQ(510_rad_per_s, table[200_in]);
 
-    // Key above maximum gives largest value
-    EXPECT_EQ(650_rad_per_s, table[400_in]);
+  // Maximum key gives exact value
+  EXPECT_EQ(650_rad_per_s, table[326_in]);
+
+  // Key above maximum gives largest value
+  EXPECT_EQ(650_rad_per_s, table[400_in]);
 }
 
-TEST(InterpolatingMap, Clear) {
-    frc::InterpolatingMap<units::meter_t, units::radians_per_second_t> table;
+TEST(InterpolatingMapTest, Clear) {
+  frc::InterpolatingMap<units::meter_t, units::radians_per_second_t> table;
 
-    table.Insert(125_in, 450_rad_per_s);
-    table.Insert(200_in, 510_rad_per_s);
-    table.Insert(268_in, 525_rad_per_s);
-    table.Insert(312_in, 550_rad_per_s);
-    table.Insert(326_in, 650_rad_per_s);
+  table.Insert(125_in, 450_rad_per_s);
+  table.Insert(200_in, 510_rad_per_s);
+  table.Insert(268_in, 525_rad_per_s);
+  table.Insert(312_in, 550_rad_per_s);
+  table.Insert(326_in, 650_rad_per_s);
 
-    table.Clear();
+  table.Clear();
 
-    table.Insert(100_in, 250_rad_per_s);
-    table.Insert(200_in, 500_rad_per_s);
+  table.Insert(100_in, 250_rad_per_s);
+  table.Insert(200_in, 500_rad_per_s);
 
-    EXPECT_EQ(375_rad_per_s, table[150_in]);
-}
\ No newline at end of file
+  EXPECT_EQ(375_rad_per_s, table[150_in]);
+}

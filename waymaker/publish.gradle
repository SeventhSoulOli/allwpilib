apply plugin: 'maven-publish'

def baseArtifactId = 'Waymaker'
def artifactGroupId = 'edu.wpi.first.tools'
def zipBaseName = '_GROUP_edu_wpi_first_tools_ID_Waymaker_CLS'

def libBaseArtifactId = 'libglass'
def libArtifactGroupId = 'edu.wpi.first.glass'
def libZipBaseName = '_GROUP_edu_wpi_first_glass_ID_libglass_CLS'



def outputsFolder = file("$project.buildDir/outputs")

task libCppSourcesZip(type: Zip) {
    destinationDirectory = outputsFolder
    archiveBaseName = libZipBaseName
    classifier = "sources"

    from(licenseFile) { into '/' }
    from('src/lib/native/cpp') { into '/' }
}

task libCppHeadersZip(type: Zip) {
    destinationDirectory = outputsFolder
    archiveBaseName = libZipBaseName
    classifier = "headers"

    from(licenseFile) { into '/' }
    from('src/lib/native/include') { into '/' }
}


build.dependsOn libCppHeadersZip
build.dependsOn libCppSourcesZip

addTaskToCopyAllOutputs(libCppHeadersZip)
addTaskToCopyAllOutputs(libCppSourcesZip)


model {
    tasks {
        // Create the run task.
        $.components.waymakerApp.binaries.each { bin ->
            if (bin.buildable && bin.name.toLowerCase().contains("debug")) {
                Task run = project.tasks.create("run", Exec) {
                    commandLine bin.tasks.install.runScriptFile.get().asFile.toString()
                }
                run.dependsOn bin.tasks.install
            }
        }
    }
    publishing {
        def waymakerAppTaskList = []
        $.components.each { component ->
            component.binaries.each { binary ->
                if (binary in NativeExecutableBinarySpec && binary.component.name.contains("waymakerApp")) {
                    if (binary.buildable && binary.name.contains("Release")) {
                        // We are now in the binary that we want.
                        // This is the default application path for the ZIP task.
                        def applicationPath = binary.executable.file
                        def icon = file("$project.projectDir/src/app/native/mac/glass.icns")

                        // Create the macOS bundle.
                        def bundleTask = project.tasks.create("bundleWaymakerOsxApp", Copy) {
                            description("Creates a macOS application bundle for Waymaker")
                            from(file("$project.projectDir/Info.plist"))
                            into(file("$project.buildDir/outputs/bundles/Waymaker.app/Contents"))
                            into("MacOS") { with copySpec { from binary.executable.file } }
                            into("Resources") { with copySpec { from icon } }

                            doLast {
                                if (project.hasProperty("developerID")) {
                                    // Get path to binary.
                                    exec {
                                        workingDir rootDir
                                        def args = [
                                            "sh",
                                            "-c",
                                            "codesign --force --strict --deep " +
                                            "--timestamp --options=runtime " +
                                            "--verbose -s ${project.findProperty("developerID")} " +
                                            "$project.buildDir/outputs/bundles/Waymaker.app/"
                                        ]
                                        commandLine args
                                    }
                                }
                            }
                        }

                        // Reset the application path if we are creating a bundle.
                        if (binary.targetPlatform.operatingSystem.isMacOsX()) {
                            applicationPath = file("$project.buildDir/outputs/bundles")
                            project.build.dependsOn bundleTask
                        }

                        // Create the ZIP.
                        def task = project.tasks.create("copyWaymakerExecutable", Zip) {
                            description("Copies the Waymaker executable to the outputs directory.")
                            destinationDirectory = outputsFolder

                            archiveBaseName = '_M_' + zipBaseName
                            duplicatesStrategy = 'exclude'
                            classifier = nativeUtils.getPublishClassifier(binary)

                            from(licenseFile) {
                                into '/'
                            }

                            from(applicationPath)
                            into(nativeUtils.getPlatformPath(binary))
                        }

                        if (binary.targetPlatform.operatingSystem.isMacOsX()) {
                            bundleTask.dependsOn binary.tasks.link
                            task.dependsOn(bundleTask)
                        }

                        task.dependsOn binary.tasks.link
                        waymakerAppTaskList.add(task)
                        project.build.dependsOn task
                        project.artifacts { task }
                        addTaskToCopyAllOutputs(task)
                    }
                }
            }
        }

        def libGlassTaskList = createComponentZipTasks($.components, ['glass'], libZipBaseName, Zip, project, includeStandardZipFormat)

        publications {
            waymakerApp(MavenPublication) {
                waymakerAppTaskList.each { artifact it }

                artifactId = baseArtifactId
                groupId = artifactGroupId
                version wpilibVersioning.version.get()
            }
            libglass(MavenPublication) {
                libGlassTaskList.each { artifact it }

                artifact libCppHeadersZip
                artifact libCppSourcesZip

                artifactId = libBaseArtifactId
                groupId = libArtifactGroupId
                version wpilibVersioning.version.get()
            }
        }
    }
}

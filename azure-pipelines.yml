# Gradle
# Build your Java projects and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/vsts/pipelines/languages/java

resources:
  containers:
  - container: wpilib2019
    image: wpilib/roborio-cross-ubuntu:2019-18.04
  - container: raspbian
    image:  wpilib/raspbian-cross-ubuntu:18.04
  - container: ubuntu18
    image: ubuntu:18.04
    options: "--name ci-container -v /usr/bin/docker:/tmp/docker:ro"
  - container: staticlibcpp
    image: wpilib/toolchain-builder:14.04
    options: "--name ci-container -v /usr/bin/docker:/tmp/docker:ro"

stages:
- stage: Build
  jobs:
  - job: StaticLibCpp
    pool:
      vmImage: 'Ubuntu 16.04'

    container: staticlibcpp

    steps:
        - script: |
            /tmp/docker exec -t -u 0 ci-container \
            sh -c "apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confold" -y install sudo"
          displayName: Set up sudo

        - script: |
            sudo apt-get update -y && sudo apt-get install curl
            curl -SL https://download.java.net/java/GA/jdk11/13/GPL/openjdk-11.0.1_linux-x64_bin.tar.gz
            ls
          displayName: 'Download JDK'  

        - task: JavaToolInstaller@0
          inputs:
            jdkArchitectureOption: 'x64'
            jdkSourceOption: 'localDirectory'
            jdkFile: 'openjdk-11.0.1_linux-x64_bin.tar.gz'
            jdkDestinationDirectory: '~/jdk'

        - script: |
            sudo apt-get update -y &&
            sudo apt-get upgrade -y &&
            sudo apt-get dist-upgrade -y &&
            sudo apt-get install build-essential software-properties-common -y &&
            sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y &&
            sudo apt-get update -y &&
            sudo apt-get install gcc-9 g++-9 -y &&
            sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 60 --slave /usr/bin/g++ g++ /usr/bin/g++-9 &&
            sudo update-alternatives --config gcc
          displayName: 'Install Dependencies'

        - task: Gradle@2
          inputs:
            workingDirectory: ''
            gradleWrapperFile: 'gradlew'
            gradleOptions: '-Xmx3072m'
            publishJUnitResults: true
            testResultsFiles: '**/TEST-*.xml'
            tasks: 'build'
            options: '-PskipAthena'
            # checkStyleRunAnalysis: true
            # pmdRunAnalysis: true

        - task: PublishPipelineArtifact@0
          inputs:
            artifactName: 'Linux'
            targetPath: 'build/allOutputs'


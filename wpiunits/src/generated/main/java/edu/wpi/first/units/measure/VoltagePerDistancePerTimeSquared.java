// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

// THIS FILE WAS AUTO-GENERATED BY ./wpiunits/generate_units.py. DO NOT MODIFY

package edu.wpi.first.units.measure;

import static edu.wpi.first.units.Units.*;
import edu.wpi.first.units.*;

@SuppressWarnings({"unchecked", "cast", "checkstyle", "PMD"})
public interface VoltagePerDistancePerTimeSquared extends Measure<VoltagePerDistancePerTimeSquaredUnit> {
  static  VoltagePerDistancePerTimeSquared ofRelativeUnits(double magnitude, VoltagePerDistancePerTimeSquaredUnit unit) {
    return new ImmutableVoltagePerDistancePerTimeSquared(magnitude, unit.toBaseUnits(magnitude), unit);
  }

  static  VoltagePerDistancePerTimeSquared ofBaseUnits(double baseUnitMagnitude, VoltagePerDistancePerTimeSquaredUnit unit) {
    return new ImmutableVoltagePerDistancePerTimeSquared(unit.fromBaseUnits(baseUnitMagnitude), baseUnitMagnitude, unit);
  }

  @Override
  VoltagePerDistancePerTimeSquared copy();

  @Override
  default MutVoltagePerDistancePerTimeSquared mutableCopy() {
    return new MutVoltagePerDistancePerTimeSquared(magnitude(), baseUnitMagnitude(), unit());
  }

  @Override
  VoltagePerDistancePerTimeSquaredUnit unit();

  @Override
  default VoltagePerDistancePerTimeSquaredUnit baseUnit() { return (VoltagePerDistancePerTimeSquaredUnit) unit().getBaseUnit(); }

  @Override
  default double in(VoltagePerDistancePerTimeSquaredUnit unit) {
    return unit.fromBaseUnits(baseUnitMagnitude());
  }

  @Override
  default VoltagePerDistancePerTimeSquared unaryMinus() {
    return (VoltagePerDistancePerTimeSquared) unit().ofBaseUnits(0 - baseUnitMagnitude());
  }

  @Override
  default VoltagePerDistancePerTimeSquared plus(Measure<? extends VoltagePerDistancePerTimeSquaredUnit> other) {
    return (VoltagePerDistancePerTimeSquared) unit().ofBaseUnits(baseUnitMagnitude() + other.baseUnitMagnitude());
  }

  @Override
  default VoltagePerDistancePerTimeSquared minus(Measure<? extends VoltagePerDistancePerTimeSquaredUnit> other) {
    return (VoltagePerDistancePerTimeSquared) unit().ofBaseUnits(baseUnitMagnitude() - other.baseUnitMagnitude());
  }

  @Override
  default VoltagePerDistancePerTimeSquared times(double multiplier) {
    return (VoltagePerDistancePerTimeSquared) unit().ofBaseUnits(baseUnitMagnitude() * multiplier);
  }

  @Override
  default VoltagePerDistancePerTimeSquared divide(double divisor) {
    return (VoltagePerDistancePerTimeSquared) unit().ofBaseUnits(baseUnitMagnitude() / divisor);
  }

  @Override
  default Velocity<VoltagePerDistancePerTimeSquaredUnit> per(TimeUnit period) {
    return divide(period.of(1));
  }


  @Override
  default Mult<VoltagePerDistancePerTimeSquaredUnit, AccelerationUnit<?>> times(Acceleration<?> multiplier) {
    return (Mult<VoltagePerDistancePerTimeSquaredUnit, AccelerationUnit<?>>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeSquaredUnit, AccelerationUnit<?>> divide(Acceleration<?> divisor) {
    return (Per<VoltagePerDistancePerTimeSquaredUnit, AccelerationUnit<?>>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeSquaredUnit, AngleUnit> times(Angle multiplier) {
    return (Mult<VoltagePerDistancePerTimeSquaredUnit, AngleUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeSquaredUnit, AngleUnit> divide(Angle divisor) {
    return (Per<VoltagePerDistancePerTimeSquaredUnit, AngleUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeSquaredUnit, AngularAccelerationUnit> times(AngularAcceleration multiplier) {
    return (Mult<VoltagePerDistancePerTimeSquaredUnit, AngularAccelerationUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeSquaredUnit, AngularAccelerationUnit> divide(AngularAcceleration divisor) {
    return (Per<VoltagePerDistancePerTimeSquaredUnit, AngularAccelerationUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeSquaredUnit, AngularMomentumUnit> times(AngularMomentum multiplier) {
    return (Mult<VoltagePerDistancePerTimeSquaredUnit, AngularMomentumUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeSquaredUnit, AngularMomentumUnit> divide(AngularMomentum divisor) {
    return (Per<VoltagePerDistancePerTimeSquaredUnit, AngularMomentumUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeSquaredUnit, AngularVelocityUnit> times(AngularVelocity multiplier) {
    return (Mult<VoltagePerDistancePerTimeSquaredUnit, AngularVelocityUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeSquaredUnit, AngularVelocityUnit> divide(AngularVelocity divisor) {
    return (Per<VoltagePerDistancePerTimeSquaredUnit, AngularVelocityUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeSquaredUnit, CurrentUnit> times(Current multiplier) {
    return (Mult<VoltagePerDistancePerTimeSquaredUnit, CurrentUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeSquaredUnit, CurrentUnit> divide(Current divisor) {
    return (Per<VoltagePerDistancePerTimeSquaredUnit, CurrentUnit>) Measure.super.divide(divisor);
  }

  @Override
  default VoltagePerDistancePerTimeSquared divide(Dimensionless divisor) {
    return (VoltagePerDistancePerTimeSquared) VoltsPerMeterPerSecondSquared.of(baseUnitMagnitude() / divisor.baseUnitMagnitude());
  }

  @Override
  default VoltagePerDistancePerTimeSquared times(Dimensionless multiplier) {
    return (VoltagePerDistancePerTimeSquared) VoltsPerMeterPerSecondSquared.of(baseUnitMagnitude() * multiplier.baseUnitMagnitude());
  }


  @Override
  default Mult<VoltagePerDistancePerTimeSquaredUnit, DistanceUnit> times(Distance multiplier) {
    return (Mult<VoltagePerDistancePerTimeSquaredUnit, DistanceUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeSquaredUnit, DistanceUnit> divide(Distance divisor) {
    return (Per<VoltagePerDistancePerTimeSquaredUnit, DistanceUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeSquaredUnit, EnergyUnit> times(Energy multiplier) {
    return (Mult<VoltagePerDistancePerTimeSquaredUnit, EnergyUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeSquaredUnit, EnergyUnit> divide(Energy divisor) {
    return (Per<VoltagePerDistancePerTimeSquaredUnit, EnergyUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeSquaredUnit, ForceUnit> times(Force multiplier) {
    return (Mult<VoltagePerDistancePerTimeSquaredUnit, ForceUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeSquaredUnit, ForceUnit> divide(Force divisor) {
    return (Per<VoltagePerDistancePerTimeSquaredUnit, ForceUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeSquaredUnit, FrequencyUnit> times(Frequency multiplier) {
    return (Mult<VoltagePerDistancePerTimeSquaredUnit, FrequencyUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeSquaredUnit, FrequencyUnit> divide(Frequency divisor) {
    return (Per<VoltagePerDistancePerTimeSquaredUnit, FrequencyUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Voltage times(LinearAcceleration multiplier) {
    return Volts.of(baseUnitMagnitude() * multiplier.baseUnitMagnitude());
  }

  @Override
  default Per<VoltagePerDistancePerTimeSquaredUnit, LinearAccelerationUnit> divide(LinearAcceleration divisor) {
    return (Per<VoltagePerDistancePerTimeSquaredUnit, LinearAccelerationUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeSquaredUnit, LinearMomentumUnit> times(LinearMomentum multiplier) {
    return (Mult<VoltagePerDistancePerTimeSquaredUnit, LinearMomentumUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeSquaredUnit, LinearMomentumUnit> divide(LinearMomentum divisor) {
    return (Per<VoltagePerDistancePerTimeSquaredUnit, LinearMomentumUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeSquaredUnit, LinearVelocityUnit> times(LinearVelocity multiplier) {
    return (Mult<VoltagePerDistancePerTimeSquaredUnit, LinearVelocityUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeSquaredUnit, LinearVelocityUnit> divide(LinearVelocity divisor) {
    return (Per<VoltagePerDistancePerTimeSquaredUnit, LinearVelocityUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeSquaredUnit, MassUnit> times(Mass multiplier) {
    return (Mult<VoltagePerDistancePerTimeSquaredUnit, MassUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeSquaredUnit, MassUnit> divide(Mass divisor) {
    return (Per<VoltagePerDistancePerTimeSquaredUnit, MassUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeSquaredUnit, MomentOfInertiaUnit> times(MomentOfInertia multiplier) {
    return (Mult<VoltagePerDistancePerTimeSquaredUnit, MomentOfInertiaUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeSquaredUnit, MomentOfInertiaUnit> divide(MomentOfInertia divisor) {
    return (Per<VoltagePerDistancePerTimeSquaredUnit, MomentOfInertiaUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeSquaredUnit, MultUnit<?, ?>> times(Mult<?, ?> multiplier) {
    return (Mult<VoltagePerDistancePerTimeSquaredUnit, MultUnit<?, ?>>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeSquaredUnit, MultUnit<?, ?>> divide(Mult<?, ?> divisor) {
    return (Per<VoltagePerDistancePerTimeSquaredUnit, MultUnit<?, ?>>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeSquaredUnit, PerUnit<?, ?>> times(Per<?, ?> multiplier) {
    return (Mult<VoltagePerDistancePerTimeSquaredUnit, PerUnit<?, ?>>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeSquaredUnit, PerUnit<?, ?>> divide(Per<?, ?> divisor) {
    return (Per<VoltagePerDistancePerTimeSquaredUnit, PerUnit<?, ?>>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeSquaredUnit, PowerUnit> times(Power multiplier) {
    return (Mult<VoltagePerDistancePerTimeSquaredUnit, PowerUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeSquaredUnit, PowerUnit> divide(Power divisor) {
    return (Per<VoltagePerDistancePerTimeSquaredUnit, PowerUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeSquaredUnit, TemperatureUnit> times(Temperature multiplier) {
    return (Mult<VoltagePerDistancePerTimeSquaredUnit, TemperatureUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeSquaredUnit, TemperatureUnit> divide(Temperature divisor) {
    return (Per<VoltagePerDistancePerTimeSquaredUnit, TemperatureUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeSquaredUnit, TimeUnit> times(Time multiplier) {
    return (Mult<VoltagePerDistancePerTimeSquaredUnit, TimeUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Velocity<VoltagePerDistancePerTimeSquaredUnit> divide(Time divisor) {
    return VelocityUnit.combine(unit(), divisor.unit()).ofBaseUnits(baseUnitMagnitude() / divisor.baseUnitMagnitude());
  }


  @Override
  default Mult<VoltagePerDistancePerTimeSquaredUnit, TorqueUnit> times(Torque multiplier) {
    return (Mult<VoltagePerDistancePerTimeSquaredUnit, TorqueUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeSquaredUnit, TorqueUnit> divide(Torque divisor) {
    return (Per<VoltagePerDistancePerTimeSquaredUnit, TorqueUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeSquaredUnit, VelocityUnit<?>> times(Velocity<?> multiplier) {
    return (Mult<VoltagePerDistancePerTimeSquaredUnit, VelocityUnit<?>>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeSquaredUnit, VelocityUnit<?>> divide(Velocity<?> divisor) {
    return (Per<VoltagePerDistancePerTimeSquaredUnit, VelocityUnit<?>>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeSquaredUnit, VoltageUnit> times(Voltage multiplier) {
    return (Mult<VoltagePerDistancePerTimeSquaredUnit, VoltageUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeSquaredUnit, VoltageUnit> divide(Voltage divisor) {
    return (Per<VoltagePerDistancePerTimeSquaredUnit, VoltageUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeSquaredUnit, VoltagePerAnglePerTimeUnit> times(VoltagePerAnglePerTime multiplier) {
    return (Mult<VoltagePerDistancePerTimeSquaredUnit, VoltagePerAnglePerTimeUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeSquaredUnit, VoltagePerAnglePerTimeUnit> divide(VoltagePerAnglePerTime divisor) {
    return (Per<VoltagePerDistancePerTimeSquaredUnit, VoltagePerAnglePerTimeUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeSquaredUnit, VoltagePerAnglePerTimeSquaredUnit> times(VoltagePerAnglePerTimeSquared multiplier) {
    return (Mult<VoltagePerDistancePerTimeSquaredUnit, VoltagePerAnglePerTimeSquaredUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeSquaredUnit, VoltagePerAnglePerTimeSquaredUnit> divide(VoltagePerAnglePerTimeSquared divisor) {
    return (Per<VoltagePerDistancePerTimeSquaredUnit, VoltagePerAnglePerTimeSquaredUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeSquaredUnit, VoltagePerDistancePerTimeUnit> times(VoltagePerDistancePerTime multiplier) {
    return (Mult<VoltagePerDistancePerTimeSquaredUnit, VoltagePerDistancePerTimeUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeSquaredUnit, VoltagePerDistancePerTimeUnit> divide(VoltagePerDistancePerTime divisor) {
    return (Per<VoltagePerDistancePerTimeSquaredUnit, VoltagePerDistancePerTimeUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeSquaredUnit, VoltagePerDistancePerTimeSquaredUnit> times(VoltagePerDistancePerTimeSquared multiplier) {
    return (Mult<VoltagePerDistancePerTimeSquaredUnit, VoltagePerDistancePerTimeSquaredUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Dimensionless divide(VoltagePerDistancePerTimeSquared divisor) {
    return Value.of(baseUnitMagnitude() / divisor.baseUnitMagnitude());
  }

}

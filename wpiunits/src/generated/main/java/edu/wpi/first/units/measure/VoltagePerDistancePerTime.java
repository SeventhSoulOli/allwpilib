// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

// THIS FILE WAS AUTO-GENERATED BY ./wpiunits/generate_units.py. DO NOT MODIFY

package edu.wpi.first.units.measure;

import static edu.wpi.first.units.Units.*;
import edu.wpi.first.units.*;

@SuppressWarnings({"unchecked", "cast", "checkstyle", "PMD"})
public interface VoltagePerDistancePerTime extends Measure<VoltagePerDistancePerTimeUnit> {
  static  VoltagePerDistancePerTime ofRelativeUnits(double magnitude, VoltagePerDistancePerTimeUnit unit) {
    return new ImmutableVoltagePerDistancePerTime(magnitude, unit.toBaseUnits(magnitude), unit);
  }

  static  VoltagePerDistancePerTime ofBaseUnits(double baseUnitMagnitude, VoltagePerDistancePerTimeUnit unit) {
    return new ImmutableVoltagePerDistancePerTime(unit.fromBaseUnits(baseUnitMagnitude), baseUnitMagnitude, unit);
  }

  @Override
  VoltagePerDistancePerTime copy();

  @Override
  default MutVoltagePerDistancePerTime mutableCopy() {
    return new MutVoltagePerDistancePerTime(magnitude(), baseUnitMagnitude(), unit());
  }

  @Override
  VoltagePerDistancePerTimeUnit unit();

  @Override
  default VoltagePerDistancePerTimeUnit baseUnit() { return (VoltagePerDistancePerTimeUnit) unit().getBaseUnit(); }

  @Override
  default double in(VoltagePerDistancePerTimeUnit unit) {
    return unit.fromBaseUnits(baseUnitMagnitude());
  }

  @Override
  default VoltagePerDistancePerTime unaryMinus() {
    return (VoltagePerDistancePerTime) unit().ofBaseUnits(0 - baseUnitMagnitude());
  }

  @Override
  default VoltagePerDistancePerTime plus(Measure<? extends VoltagePerDistancePerTimeUnit> other) {
    return (VoltagePerDistancePerTime) unit().ofBaseUnits(baseUnitMagnitude() + other.baseUnitMagnitude());
  }

  @Override
  default VoltagePerDistancePerTime minus(Measure<? extends VoltagePerDistancePerTimeUnit> other) {
    return (VoltagePerDistancePerTime) unit().ofBaseUnits(baseUnitMagnitude() - other.baseUnitMagnitude());
  }

  @Override
  default VoltagePerDistancePerTime times(double multiplier) {
    return (VoltagePerDistancePerTime) unit().ofBaseUnits(baseUnitMagnitude() * multiplier);
  }

  @Override
  default VoltagePerDistancePerTime divide(double divisor) {
    return (VoltagePerDistancePerTime) unit().ofBaseUnits(baseUnitMagnitude() / divisor);
  }

  @Override
  default Velocity<VoltagePerDistancePerTimeUnit> per(TimeUnit period) {
    return divide(period.of(1));
  }


  @Override
  default Mult<VoltagePerDistancePerTimeUnit, AccelerationUnit<?>> times(Acceleration<?> multiplier) {
    return (Mult<VoltagePerDistancePerTimeUnit, AccelerationUnit<?>>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeUnit, AccelerationUnit<?>> divide(Acceleration<?> divisor) {
    return (Per<VoltagePerDistancePerTimeUnit, AccelerationUnit<?>>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeUnit, AngleUnit> times(Angle multiplier) {
    return (Mult<VoltagePerDistancePerTimeUnit, AngleUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeUnit, AngleUnit> divide(Angle divisor) {
    return (Per<VoltagePerDistancePerTimeUnit, AngleUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeUnit, AngularAccelerationUnit> times(AngularAcceleration multiplier) {
    return (Mult<VoltagePerDistancePerTimeUnit, AngularAccelerationUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeUnit, AngularAccelerationUnit> divide(AngularAcceleration divisor) {
    return (Per<VoltagePerDistancePerTimeUnit, AngularAccelerationUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeUnit, AngularMomentumUnit> times(AngularMomentum multiplier) {
    return (Mult<VoltagePerDistancePerTimeUnit, AngularMomentumUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeUnit, AngularMomentumUnit> divide(AngularMomentum divisor) {
    return (Per<VoltagePerDistancePerTimeUnit, AngularMomentumUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeUnit, AngularVelocityUnit> times(AngularVelocity multiplier) {
    return (Mult<VoltagePerDistancePerTimeUnit, AngularVelocityUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeUnit, AngularVelocityUnit> divide(AngularVelocity divisor) {
    return (Per<VoltagePerDistancePerTimeUnit, AngularVelocityUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeUnit, CurrentUnit> times(Current multiplier) {
    return (Mult<VoltagePerDistancePerTimeUnit, CurrentUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeUnit, CurrentUnit> divide(Current divisor) {
    return (Per<VoltagePerDistancePerTimeUnit, CurrentUnit>) Measure.super.divide(divisor);
  }

  @Override
  default VoltagePerDistancePerTime divide(Dimensionless divisor) {
    return (VoltagePerDistancePerTime) VoltsPerMeterPerSecond.of(baseUnitMagnitude() / divisor.baseUnitMagnitude());
  }

  @Override
  default VoltagePerDistancePerTime times(Dimensionless multiplier) {
    return (VoltagePerDistancePerTime) VoltsPerMeterPerSecond.of(baseUnitMagnitude() * multiplier.baseUnitMagnitude());
  }


  @Override
  default Mult<VoltagePerDistancePerTimeUnit, DistanceUnit> times(Distance multiplier) {
    return (Mult<VoltagePerDistancePerTimeUnit, DistanceUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeUnit, DistanceUnit> divide(Distance divisor) {
    return (Per<VoltagePerDistancePerTimeUnit, DistanceUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeUnit, EnergyUnit> times(Energy multiplier) {
    return (Mult<VoltagePerDistancePerTimeUnit, EnergyUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeUnit, EnergyUnit> divide(Energy divisor) {
    return (Per<VoltagePerDistancePerTimeUnit, EnergyUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeUnit, ForceUnit> times(Force multiplier) {
    return (Mult<VoltagePerDistancePerTimeUnit, ForceUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeUnit, ForceUnit> divide(Force divisor) {
    return (Per<VoltagePerDistancePerTimeUnit, ForceUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeUnit, FrequencyUnit> times(Frequency multiplier) {
    return (Mult<VoltagePerDistancePerTimeUnit, FrequencyUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeUnit, FrequencyUnit> divide(Frequency divisor) {
    return (Per<VoltagePerDistancePerTimeUnit, FrequencyUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeUnit, LinearAccelerationUnit> times(LinearAcceleration multiplier) {
    return (Mult<VoltagePerDistancePerTimeUnit, LinearAccelerationUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeUnit, LinearAccelerationUnit> divide(LinearAcceleration divisor) {
    return (Per<VoltagePerDistancePerTimeUnit, LinearAccelerationUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeUnit, LinearMomentumUnit> times(LinearMomentum multiplier) {
    return (Mult<VoltagePerDistancePerTimeUnit, LinearMomentumUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeUnit, LinearMomentumUnit> divide(LinearMomentum divisor) {
    return (Per<VoltagePerDistancePerTimeUnit, LinearMomentumUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Voltage times(LinearVelocity multiplier) {
    return Volts.of(baseUnitMagnitude() * multiplier.baseUnitMagnitude());
  }

  @Override
  default Per<VoltagePerDistancePerTimeUnit, LinearVelocityUnit> divide(LinearVelocity divisor) {
    return (Per<VoltagePerDistancePerTimeUnit, LinearVelocityUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeUnit, MassUnit> times(Mass multiplier) {
    return (Mult<VoltagePerDistancePerTimeUnit, MassUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeUnit, MassUnit> divide(Mass divisor) {
    return (Per<VoltagePerDistancePerTimeUnit, MassUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeUnit, MomentOfInertiaUnit> times(MomentOfInertia multiplier) {
    return (Mult<VoltagePerDistancePerTimeUnit, MomentOfInertiaUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeUnit, MomentOfInertiaUnit> divide(MomentOfInertia divisor) {
    return (Per<VoltagePerDistancePerTimeUnit, MomentOfInertiaUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeUnit, MultUnit<?, ?>> times(Mult<?, ?> multiplier) {
    return (Mult<VoltagePerDistancePerTimeUnit, MultUnit<?, ?>>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeUnit, MultUnit<?, ?>> divide(Mult<?, ?> divisor) {
    return (Per<VoltagePerDistancePerTimeUnit, MultUnit<?, ?>>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeUnit, PerUnit<?, ?>> times(Per<?, ?> multiplier) {
    return (Mult<VoltagePerDistancePerTimeUnit, PerUnit<?, ?>>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeUnit, PerUnit<?, ?>> divide(Per<?, ?> divisor) {
    return (Per<VoltagePerDistancePerTimeUnit, PerUnit<?, ?>>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeUnit, PowerUnit> times(Power multiplier) {
    return (Mult<VoltagePerDistancePerTimeUnit, PowerUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeUnit, PowerUnit> divide(Power divisor) {
    return (Per<VoltagePerDistancePerTimeUnit, PowerUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeUnit, TemperatureUnit> times(Temperature multiplier) {
    return (Mult<VoltagePerDistancePerTimeUnit, TemperatureUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeUnit, TemperatureUnit> divide(Temperature divisor) {
    return (Per<VoltagePerDistancePerTimeUnit, TemperatureUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeUnit, TimeUnit> times(Time multiplier) {
    return (Mult<VoltagePerDistancePerTimeUnit, TimeUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Velocity<VoltagePerDistancePerTimeUnit> divide(Time divisor) {
    return VelocityUnit.combine(unit(), divisor.unit()).ofBaseUnits(baseUnitMagnitude() / divisor.baseUnitMagnitude());
  }


  @Override
  default Mult<VoltagePerDistancePerTimeUnit, TorqueUnit> times(Torque multiplier) {
    return (Mult<VoltagePerDistancePerTimeUnit, TorqueUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeUnit, TorqueUnit> divide(Torque divisor) {
    return (Per<VoltagePerDistancePerTimeUnit, TorqueUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeUnit, VelocityUnit<?>> times(Velocity<?> multiplier) {
    return (Mult<VoltagePerDistancePerTimeUnit, VelocityUnit<?>>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeUnit, VelocityUnit<?>> divide(Velocity<?> divisor) {
    return (Per<VoltagePerDistancePerTimeUnit, VelocityUnit<?>>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeUnit, VoltageUnit> times(Voltage multiplier) {
    return (Mult<VoltagePerDistancePerTimeUnit, VoltageUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeUnit, VoltageUnit> divide(Voltage divisor) {
    return (Per<VoltagePerDistancePerTimeUnit, VoltageUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeUnit, VoltagePerAnglePerTimeUnit> times(VoltagePerAnglePerTime multiplier) {
    return (Mult<VoltagePerDistancePerTimeUnit, VoltagePerAnglePerTimeUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeUnit, VoltagePerAnglePerTimeUnit> divide(VoltagePerAnglePerTime divisor) {
    return (Per<VoltagePerDistancePerTimeUnit, VoltagePerAnglePerTimeUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeUnit, VoltagePerAnglePerTimeSquaredUnit> times(VoltagePerAnglePerTimeSquared multiplier) {
    return (Mult<VoltagePerDistancePerTimeUnit, VoltagePerAnglePerTimeSquaredUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeUnit, VoltagePerAnglePerTimeSquaredUnit> divide(VoltagePerAnglePerTimeSquared divisor) {
    return (Per<VoltagePerDistancePerTimeUnit, VoltagePerAnglePerTimeSquaredUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerDistancePerTimeUnit, VoltagePerDistancePerTimeUnit> times(VoltagePerDistancePerTime multiplier) {
    return (Mult<VoltagePerDistancePerTimeUnit, VoltagePerDistancePerTimeUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Dimensionless divide(VoltagePerDistancePerTime divisor) {
    return Value.of(baseUnitMagnitude() / divisor.baseUnitMagnitude());
  }


  @Override
  default Mult<VoltagePerDistancePerTimeUnit, VoltagePerDistancePerTimeSquaredUnit> times(VoltagePerDistancePerTimeSquared multiplier) {
    return (Mult<VoltagePerDistancePerTimeUnit, VoltagePerDistancePerTimeSquaredUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerDistancePerTimeUnit, VoltagePerDistancePerTimeSquaredUnit> divide(VoltagePerDistancePerTimeSquared divisor) {
    return (Per<VoltagePerDistancePerTimeUnit, VoltagePerDistancePerTimeSquaredUnit>) Measure.super.divide(divisor);
  }

}

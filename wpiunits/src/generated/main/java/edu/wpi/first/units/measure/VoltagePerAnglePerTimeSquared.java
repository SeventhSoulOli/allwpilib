// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

// THIS FILE WAS AUTO-GENERATED BY ./wpiunits/generate_units.py. DO NOT MODIFY

package edu.wpi.first.units.measure;

import static edu.wpi.first.units.Units.*;
import edu.wpi.first.units.*;

@SuppressWarnings({"unchecked", "cast", "checkstyle", "PMD"})
public interface VoltagePerAnglePerTimeSquared extends Measure<VoltagePerAnglePerTimeSquaredUnit> {
  static  VoltagePerAnglePerTimeSquared ofRelativeUnits(double magnitude, VoltagePerAnglePerTimeSquaredUnit unit) {
    return new ImmutableVoltagePerAnglePerTimeSquared(magnitude, unit.toBaseUnits(magnitude), unit);
  }

  static  VoltagePerAnglePerTimeSquared ofBaseUnits(double baseUnitMagnitude, VoltagePerAnglePerTimeSquaredUnit unit) {
    return new ImmutableVoltagePerAnglePerTimeSquared(unit.fromBaseUnits(baseUnitMagnitude), baseUnitMagnitude, unit);
  }

  @Override
  VoltagePerAnglePerTimeSquared copy();

  @Override
  default MutVoltagePerAnglePerTimeSquared mutableCopy() {
    return new MutVoltagePerAnglePerTimeSquared(magnitude(), baseUnitMagnitude(), unit());
  }

  @Override
  VoltagePerAnglePerTimeSquaredUnit unit();

  @Override
  default VoltagePerAnglePerTimeSquaredUnit baseUnit() { return (VoltagePerAnglePerTimeSquaredUnit) unit().getBaseUnit(); }

  @Override
  default double in(VoltagePerAnglePerTimeSquaredUnit unit) {
    return unit.fromBaseUnits(baseUnitMagnitude());
  }

  @Override
  default VoltagePerAnglePerTimeSquared unaryMinus() {
    return (VoltagePerAnglePerTimeSquared) unit().ofBaseUnits(0 - baseUnitMagnitude());
  }

  @Override
  default VoltagePerAnglePerTimeSquared plus(Measure<? extends VoltagePerAnglePerTimeSquaredUnit> other) {
    return (VoltagePerAnglePerTimeSquared) unit().ofBaseUnits(baseUnitMagnitude() + other.baseUnitMagnitude());
  }

  @Override
  default VoltagePerAnglePerTimeSquared minus(Measure<? extends VoltagePerAnglePerTimeSquaredUnit> other) {
    return (VoltagePerAnglePerTimeSquared) unit().ofBaseUnits(baseUnitMagnitude() - other.baseUnitMagnitude());
  }

  @Override
  default VoltagePerAnglePerTimeSquared times(double multiplier) {
    return (VoltagePerAnglePerTimeSquared) unit().ofBaseUnits(baseUnitMagnitude() * multiplier);
  }

  @Override
  default VoltagePerAnglePerTimeSquared divide(double divisor) {
    return (VoltagePerAnglePerTimeSquared) unit().ofBaseUnits(baseUnitMagnitude() / divisor);
  }

  @Override
  default Velocity<VoltagePerAnglePerTimeSquaredUnit> per(TimeUnit period) {
    return divide(period.of(1));
  }


  @Override
  default Mult<VoltagePerAnglePerTimeSquaredUnit, AccelerationUnit<?>> times(Acceleration<?> multiplier) {
    return (Mult<VoltagePerAnglePerTimeSquaredUnit, AccelerationUnit<?>>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerAnglePerTimeSquaredUnit, AccelerationUnit<?>> divide(Acceleration<?> divisor) {
    return (Per<VoltagePerAnglePerTimeSquaredUnit, AccelerationUnit<?>>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerAnglePerTimeSquaredUnit, AngleUnit> times(Angle multiplier) {
    return (Mult<VoltagePerAnglePerTimeSquaredUnit, AngleUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerAnglePerTimeSquaredUnit, AngleUnit> divide(Angle divisor) {
    return (Per<VoltagePerAnglePerTimeSquaredUnit, AngleUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Voltage times(AngularAcceleration multiplier) {
    return Volts.of(baseUnitMagnitude() * multiplier.baseUnitMagnitude());
  }

  @Override
  default Per<VoltagePerAnglePerTimeSquaredUnit, AngularAccelerationUnit> divide(AngularAcceleration divisor) {
    return (Per<VoltagePerAnglePerTimeSquaredUnit, AngularAccelerationUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerAnglePerTimeSquaredUnit, AngularMomentumUnit> times(AngularMomentum multiplier) {
    return (Mult<VoltagePerAnglePerTimeSquaredUnit, AngularMomentumUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerAnglePerTimeSquaredUnit, AngularMomentumUnit> divide(AngularMomentum divisor) {
    return (Per<VoltagePerAnglePerTimeSquaredUnit, AngularMomentumUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerAnglePerTimeSquaredUnit, AngularVelocityUnit> times(AngularVelocity multiplier) {
    return (Mult<VoltagePerAnglePerTimeSquaredUnit, AngularVelocityUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerAnglePerTimeSquaredUnit, AngularVelocityUnit> divide(AngularVelocity divisor) {
    return (Per<VoltagePerAnglePerTimeSquaredUnit, AngularVelocityUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerAnglePerTimeSquaredUnit, CurrentUnit> times(Current multiplier) {
    return (Mult<VoltagePerAnglePerTimeSquaredUnit, CurrentUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerAnglePerTimeSquaredUnit, CurrentUnit> divide(Current divisor) {
    return (Per<VoltagePerAnglePerTimeSquaredUnit, CurrentUnit>) Measure.super.divide(divisor);
  }

  @Override
  default VoltagePerAnglePerTimeSquared divide(Dimensionless divisor) {
    return (VoltagePerAnglePerTimeSquared) VoltsPerRadianPerSecondSquared.of(baseUnitMagnitude() / divisor.baseUnitMagnitude());
  }

  @Override
  default VoltagePerAnglePerTimeSquared times(Dimensionless multiplier) {
    return (VoltagePerAnglePerTimeSquared) VoltsPerRadianPerSecondSquared.of(baseUnitMagnitude() * multiplier.baseUnitMagnitude());
  }


  @Override
  default Mult<VoltagePerAnglePerTimeSquaredUnit, DistanceUnit> times(Distance multiplier) {
    return (Mult<VoltagePerAnglePerTimeSquaredUnit, DistanceUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerAnglePerTimeSquaredUnit, DistanceUnit> divide(Distance divisor) {
    return (Per<VoltagePerAnglePerTimeSquaredUnit, DistanceUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerAnglePerTimeSquaredUnit, EnergyUnit> times(Energy multiplier) {
    return (Mult<VoltagePerAnglePerTimeSquaredUnit, EnergyUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerAnglePerTimeSquaredUnit, EnergyUnit> divide(Energy divisor) {
    return (Per<VoltagePerAnglePerTimeSquaredUnit, EnergyUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerAnglePerTimeSquaredUnit, ForceUnit> times(Force multiplier) {
    return (Mult<VoltagePerAnglePerTimeSquaredUnit, ForceUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerAnglePerTimeSquaredUnit, ForceUnit> divide(Force divisor) {
    return (Per<VoltagePerAnglePerTimeSquaredUnit, ForceUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerAnglePerTimeSquaredUnit, FrequencyUnit> times(Frequency multiplier) {
    return (Mult<VoltagePerAnglePerTimeSquaredUnit, FrequencyUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerAnglePerTimeSquaredUnit, FrequencyUnit> divide(Frequency divisor) {
    return (Per<VoltagePerAnglePerTimeSquaredUnit, FrequencyUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerAnglePerTimeSquaredUnit, LinearAccelerationUnit> times(LinearAcceleration multiplier) {
    return (Mult<VoltagePerAnglePerTimeSquaredUnit, LinearAccelerationUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerAnglePerTimeSquaredUnit, LinearAccelerationUnit> divide(LinearAcceleration divisor) {
    return (Per<VoltagePerAnglePerTimeSquaredUnit, LinearAccelerationUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerAnglePerTimeSquaredUnit, LinearMomentumUnit> times(LinearMomentum multiplier) {
    return (Mult<VoltagePerAnglePerTimeSquaredUnit, LinearMomentumUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerAnglePerTimeSquaredUnit, LinearMomentumUnit> divide(LinearMomentum divisor) {
    return (Per<VoltagePerAnglePerTimeSquaredUnit, LinearMomentumUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerAnglePerTimeSquaredUnit, LinearVelocityUnit> times(LinearVelocity multiplier) {
    return (Mult<VoltagePerAnglePerTimeSquaredUnit, LinearVelocityUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerAnglePerTimeSquaredUnit, LinearVelocityUnit> divide(LinearVelocity divisor) {
    return (Per<VoltagePerAnglePerTimeSquaredUnit, LinearVelocityUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerAnglePerTimeSquaredUnit, MassUnit> times(Mass multiplier) {
    return (Mult<VoltagePerAnglePerTimeSquaredUnit, MassUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerAnglePerTimeSquaredUnit, MassUnit> divide(Mass divisor) {
    return (Per<VoltagePerAnglePerTimeSquaredUnit, MassUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerAnglePerTimeSquaredUnit, MomentOfInertiaUnit> times(MomentOfInertia multiplier) {
    return (Mult<VoltagePerAnglePerTimeSquaredUnit, MomentOfInertiaUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerAnglePerTimeSquaredUnit, MomentOfInertiaUnit> divide(MomentOfInertia divisor) {
    return (Per<VoltagePerAnglePerTimeSquaredUnit, MomentOfInertiaUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerAnglePerTimeSquaredUnit, MultUnit<?, ?>> times(Mult<?, ?> multiplier) {
    return (Mult<VoltagePerAnglePerTimeSquaredUnit, MultUnit<?, ?>>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerAnglePerTimeSquaredUnit, MultUnit<?, ?>> divide(Mult<?, ?> divisor) {
    return (Per<VoltagePerAnglePerTimeSquaredUnit, MultUnit<?, ?>>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerAnglePerTimeSquaredUnit, PerUnit<?, ?>> times(Per<?, ?> multiplier) {
    return (Mult<VoltagePerAnglePerTimeSquaredUnit, PerUnit<?, ?>>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerAnglePerTimeSquaredUnit, PerUnit<?, ?>> divide(Per<?, ?> divisor) {
    return (Per<VoltagePerAnglePerTimeSquaredUnit, PerUnit<?, ?>>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerAnglePerTimeSquaredUnit, PowerUnit> times(Power multiplier) {
    return (Mult<VoltagePerAnglePerTimeSquaredUnit, PowerUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerAnglePerTimeSquaredUnit, PowerUnit> divide(Power divisor) {
    return (Per<VoltagePerAnglePerTimeSquaredUnit, PowerUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerAnglePerTimeSquaredUnit, TemperatureUnit> times(Temperature multiplier) {
    return (Mult<VoltagePerAnglePerTimeSquaredUnit, TemperatureUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerAnglePerTimeSquaredUnit, TemperatureUnit> divide(Temperature divisor) {
    return (Per<VoltagePerAnglePerTimeSquaredUnit, TemperatureUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerAnglePerTimeSquaredUnit, TimeUnit> times(Time multiplier) {
    return (Mult<VoltagePerAnglePerTimeSquaredUnit, TimeUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Velocity<VoltagePerAnglePerTimeSquaredUnit> divide(Time divisor) {
    return VelocityUnit.combine(unit(), divisor.unit()).ofBaseUnits(baseUnitMagnitude() / divisor.baseUnitMagnitude());
  }


  @Override
  default Mult<VoltagePerAnglePerTimeSquaredUnit, TorqueUnit> times(Torque multiplier) {
    return (Mult<VoltagePerAnglePerTimeSquaredUnit, TorqueUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerAnglePerTimeSquaredUnit, TorqueUnit> divide(Torque divisor) {
    return (Per<VoltagePerAnglePerTimeSquaredUnit, TorqueUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerAnglePerTimeSquaredUnit, VelocityUnit<?>> times(Velocity<?> multiplier) {
    return (Mult<VoltagePerAnglePerTimeSquaredUnit, VelocityUnit<?>>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerAnglePerTimeSquaredUnit, VelocityUnit<?>> divide(Velocity<?> divisor) {
    return (Per<VoltagePerAnglePerTimeSquaredUnit, VelocityUnit<?>>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerAnglePerTimeSquaredUnit, VoltageUnit> times(Voltage multiplier) {
    return (Mult<VoltagePerAnglePerTimeSquaredUnit, VoltageUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerAnglePerTimeSquaredUnit, VoltageUnit> divide(Voltage divisor) {
    return (Per<VoltagePerAnglePerTimeSquaredUnit, VoltageUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerAnglePerTimeSquaredUnit, VoltagePerAnglePerTimeUnit> times(VoltagePerAnglePerTime multiplier) {
    return (Mult<VoltagePerAnglePerTimeSquaredUnit, VoltagePerAnglePerTimeUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerAnglePerTimeSquaredUnit, VoltagePerAnglePerTimeUnit> divide(VoltagePerAnglePerTime divisor) {
    return (Per<VoltagePerAnglePerTimeSquaredUnit, VoltagePerAnglePerTimeUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerAnglePerTimeSquaredUnit, VoltagePerAnglePerTimeSquaredUnit> times(VoltagePerAnglePerTimeSquared multiplier) {
    return (Mult<VoltagePerAnglePerTimeSquaredUnit, VoltagePerAnglePerTimeSquaredUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Dimensionless divide(VoltagePerAnglePerTimeSquared divisor) {
    return Value.of(baseUnitMagnitude() / divisor.baseUnitMagnitude());
  }


  @Override
  default Mult<VoltagePerAnglePerTimeSquaredUnit, VoltagePerDistancePerTimeUnit> times(VoltagePerDistancePerTime multiplier) {
    return (Mult<VoltagePerAnglePerTimeSquaredUnit, VoltagePerDistancePerTimeUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerAnglePerTimeSquaredUnit, VoltagePerDistancePerTimeUnit> divide(VoltagePerDistancePerTime divisor) {
    return (Per<VoltagePerAnglePerTimeSquaredUnit, VoltagePerDistancePerTimeUnit>) Measure.super.divide(divisor);
  }


  @Override
  default Mult<VoltagePerAnglePerTimeSquaredUnit, VoltagePerDistancePerTimeSquaredUnit> times(VoltagePerDistancePerTimeSquared multiplier) {
    return (Mult<VoltagePerAnglePerTimeSquaredUnit, VoltagePerDistancePerTimeSquaredUnit>) Measure.super.times(multiplier);
  }

  @Override
  default Per<VoltagePerAnglePerTimeSquaredUnit, VoltagePerDistancePerTimeSquaredUnit> divide(VoltagePerDistancePerTimeSquared divisor) {
    return (Per<VoltagePerAnglePerTimeSquaredUnit, VoltagePerDistancePerTimeSquaredUnit>) Measure.super.divide(divisor);
  }

}
